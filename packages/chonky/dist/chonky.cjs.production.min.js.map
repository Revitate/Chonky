{"version":3,"file":"chonky.cjs.production.min.js","sources":["../src/util/hooks-helpers.ts","../src/types/sort.types.ts","../src/util/logger.ts","../src/util/file-helper.ts","../src/redux/files-transforms.ts","../src/action-definitions/option-ids.ts","../src/types/file-view.types.ts","../src/types/icons.types.ts","../src/redux/selectors.ts","../src/redux/thunks/file-actions.thunks.ts","../src/redux/thunks/dispatchers.thunks.ts","../src/util/i18n.ts","../src/util/helpers.ts","../src/action-definitions/essential.ts","../src/redux/thunks/index.ts","../src/action-definitions/default.ts","../src/action-definitions/extra.ts","../src/action-definitions/index.ts","../src/redux/state.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/redux/watchers.ts","../src/components/internal/ChonkyIconPlaceholder.tsx","../src/util/default-config.ts","../src/util/icon-helper.ts","../src/util/styles.ts","../src/components/internal/ChonkyBusinessLogic.tsx","../src/util/file-browser-handle.ts","../src/util/dnd-fallback.ts","../src/components/file-list/DnDFileListDragLayer.tsx","../src/types/dnd.types.ts","../src/components/internal/HotkeyListener.tsx","../src/components/internal/ChonkyPresentationLayer.tsx","../src/components/external/FileContextMenu-hooks.ts","../src/components/external/FileBrowser.tsx","../src/components/external/FileNavbar-hooks.ts","../src/types/action.types.ts","../src/util/dnd.ts","../src/components/external/TextPlaceholder.tsx","../src/components/file-list/FileEntry-hooks.tsx","../src/util/file-actions.ts","../src/components/external/ToolbarButton.tsx","../src/components/external/FolderChainButton.tsx","../src/components/external/FileNavbar.tsx","../src/components/external/ToolbarDropdownButton.tsx","../src/components/external/ToolbarDropdown.tsx","../src/components/external/ToolbarInfo.tsx","../src/components/external/ToolbarSearch.tsx","../src/components/external/FileToolbar.tsx","../src/components/file-list/FileListEmpty.tsx","../src/components/internal/ClickableWrapper.tsx","../src/components/internal/ClickableWrapper-hooks.tsx","../src/components/file-list/FileEntryName.tsx","../src/components/file-list/CompactEntry.tsx","../src/components/file-list/DnDFileEntry.tsx","../src/components/file-list/FileThumbnail.tsx","../src/components/file-list/GridEntryDndIndicator.tsx","../src/components/file-list/GridEntryPreview.tsx","../src/components/file-list/GridEntry.tsx","../src/components/file-list/ListEntry.tsx","../src/components/file-list/FileEntry.tsx","../src/components/file-list/GridContainer.tsx","../src/components/file-list/ListContainer.tsx","../src/components/file-list/FileList.tsx","../src/components/external/FileContextMenu.tsx","../src/components/external/FullFileBrowser.tsx","../src/extensions/file-map.ts"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\n\r\nexport const useDebounce = <T>(\r\n    value: T,\r\n    delay: number\r\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            setDebouncedValue(value);\r\n        }, delay);\r\n\r\n        return () => {\r\n            clearTimeout(handler);\r\n        };\r\n    }, [value, delay]);\r\n\r\n    return [debouncedValue, setDebouncedValue];\r\n};\r\n\r\nconst UNINITIALIZED_SENTINEL = {};\r\nexport const useStaticValue = <T>(factory: () => T): T => {\r\n    const valueRef = useRef<T>(UNINITIALIZED_SENTINEL as T);\r\n    if (valueRef.current === UNINITIALIZED_SENTINEL) valueRef.current = factory();\r\n    return valueRef.current;\r\n};\r\n\r\nexport const useInstanceVariable = <T>(value: T) => {\r\n    const ref = useRef(value);\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    }, [ref, value]);\r\n    return ref;\r\n};\r\n","import { Nullable } from 'tsdef';\r\n\r\nimport { FileData } from './file.types';\r\n\r\nexport type FileSortKeySelector = (file: Nullable<FileData>) => any;\r\n\r\nexport enum SortOrder {\r\n    ASC = 'asc',\r\n    DESC = 'desc',\r\n}\r\n","export class Logger {\r\n    public static error(...args: any[]): void {\r\n        // eslint-disable-next-line no-console\r\n        console.error('[Chonky runtime error]', ...args);\r\n    }\r\n\r\n    public static warn(...args: any[]): void {\r\n        // eslint-disable-next-line no-console\r\n        console.warn('[Chonky runtime warning]', ...args);\r\n    }\r\n\r\n    public static debug(...args: any[]): void {\r\n        // eslint-disable-next-line no-console\r\n        console.debug('[Chonky runtime debug]', ...args);\r\n    }\r\n\r\n    public static formatBullets(bullets: string[]): string {\r\n        return `\\n- ${bullets.join('\\n- ')}`;\r\n    }\r\n}\r\n","import { Nullable } from 'tsdef';\r\n\r\nimport { FileData } from '../types/file.types';\r\nimport { Logger } from './logger';\r\n\r\nexport class FileHelper {\r\n    public static isDirectory(file: Nullable<FileData>): file is FileData {\r\n        // Not a directory by default\r\n        return !!file && file.isDir === true;\r\n    }\r\n\r\n    public static isHidden(file: Nullable<FileData>): file is FileData {\r\n        // Not hidden by default\r\n        return !!file && file.isHidden === true;\r\n    }\r\n\r\n    public static isSymlink(file: Nullable<FileData>): file is FileData {\r\n        // Not a symlink by default\r\n        return !!file && file.isSymlink === true;\r\n    }\r\n\r\n    public static isEncrypted(file: Nullable<FileData>): file is FileData {\r\n        // Not encrypted by default\r\n        return !!file && file.isEncrypted === true;\r\n    }\r\n\r\n    public static isClickable(file: Nullable<FileData>): file is FileData {\r\n        // Clickable by default\r\n        return !!file;\r\n    }\r\n\r\n    public static isOpenable(file: Nullable<FileData>): file is FileData {\r\n        // Openable by default\r\n        return !!file && file.openable !== false;\r\n    }\r\n\r\n    public static isSelectable(file: Nullable<FileData>): file is FileData {\r\n        // Selectable by default\r\n        return !!file && file.selectable !== false;\r\n    }\r\n\r\n    public static isDraggable(file: Nullable<FileData>): file is FileData {\r\n        // File & folders are draggable by default, `null` is not\r\n        return !!file && file.draggable !== false;\r\n    }\r\n\r\n    public static isDroppable(file: Nullable<FileData>): file is FileData {\r\n        // Folders are droppable by default, files are not\r\n        if (!file) return false;\r\n        if (file.isDir && file.droppable !== false) return true;\r\n        return file.droppable === true;\r\n    }\r\n\r\n    public static isDndOpenable(file: Nullable<FileData>): file is FileData {\r\n        // Folders are DnD openable by default, files are not\r\n        if (!FileHelper.isOpenable(file)) return false;\r\n        if (file.isDir && file.dndOpenable !== false) return true;\r\n        return file.dndOpenable === true;\r\n    }\r\n\r\n    public static getModDate(file: Nullable<FileData>): Nullable<Date> {\r\n        if (!file || file.modDate === null || file.modDate === undefined) return null;\r\n        return FileHelper.parseDate(file.modDate);\r\n    }\r\n\r\n    public static parseDate(maybeDate: Date | string | any): Nullable<Date> {\r\n        if (typeof maybeDate === 'string' || typeof maybeDate === 'number') {\r\n            // We allow users to provide string and numerical representations of dates.\r\n            try {\r\n                return new Date(maybeDate);\r\n            } catch (error) {\r\n                Logger.error(\r\n                    `Could not convert provided string/number into a date: ${error.message} `,\r\n                    'Invalid value:',\r\n                    maybeDate\r\n                );\r\n            }\r\n        }\r\n        if (maybeDate instanceof Date && !isNaN(maybeDate.getTime())) {\r\n            // We only allow valid dates objects\r\n            return maybeDate;\r\n        }\r\n\r\n        // If we have an invalid date representation, we just return null.\r\n        Logger.warn('Unsupported date representation:', maybeDate);\r\n        return null;\r\n    }\r\n\r\n    public static getChildrenCount(file: Nullable<FileData>): Nullable<number> {\r\n        if (!file || typeof file.childrenCount !== 'number') return null;\r\n\r\n        return file.childrenCount;\r\n    }\r\n}\r\n","import { Nullable } from 'tsdef';\r\n\r\nimport { FileAction } from '../types/action.types';\r\nimport { FileArray } from '../types/file.types';\r\nimport { Logger } from '../util/logger';\r\n\r\ninterface SanitizeFiles {\r\n    (mode: 'files', rawArray: FileArray | any): {\r\n        sanitizedArray: FileArray;\r\n        errorMessages: string[];\r\n    };\r\n    (mode: 'folderChain', rawArray: Nullable<FileArray> | any): {\r\n        sanitizedArray: FileArray;\r\n        errorMessages: string[];\r\n    };\r\n    (mode: 'fileActions', rawArray: FileAction[] | any): {\r\n        sanitizedArray: FileAction[];\r\n        errorMessages: string[];\r\n    };\r\n}\r\n\r\nexport const sanitizeInputArray: SanitizeFiles = (mode: string, rawArray: any[]) => {\r\n    const sanitizedFiles = [];\r\n    const errorMessages: string[] = [];\r\n\r\n    if ((mode === 'folderChain' || mode === 'fileActions') && !rawArray) {\r\n        // Do nothing, we allow folder chain to be null.\r\n    } else if (!Array.isArray(rawArray)) {\r\n        errorMessages.push(\r\n            `Expected \"${mode}\" prop to be an array, got \"${typeof rawArray}\" instead.`\r\n        );\r\n    } else {\r\n        let nonObjectFileCount = 0;\r\n        let missingFieldFileCount = 0;\r\n        const seenIds = new Set<string>();\r\n        const duplicateIds = new Set<string>();\r\n\r\n        for (let i = 0; i < rawArray.length; ++i) {\r\n            const item = rawArray[i];\r\n            if (!item) {\r\n                if (mode === 'fileActions') nonObjectFileCount++;\r\n                else sanitizedFiles.push(null);\r\n            } else if (typeof item !== 'object') {\r\n                nonObjectFileCount++;\r\n            } else {\r\n                if (!item.id || (mode !== 'fileActions' && !item.name)) {\r\n                    missingFieldFileCount++;\r\n                } else if (seenIds.has(item.id)) {\r\n                    duplicateIds.add(item.id);\r\n                } else {\r\n                    seenIds.add(item.id);\r\n                    sanitizedFiles.push(item);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nonObjectFileCount) {\r\n            errorMessages.push(\r\n                `Detected ${nonObjectFileCount} file(s) of invalid type. Remember ` +\r\n                    `that \"files\" array should contain either objects or nulls.`\r\n            );\r\n        }\r\n        if (missingFieldFileCount) {\r\n            errorMessages.push(\r\n                `Detected ${missingFieldFileCount} file(s) that are missing the ` +\r\n                    `required fields. Remember that file object should define an ` +\r\n                    `\"id\" and a \"name\".`\r\n            );\r\n        }\r\n        if (duplicateIds.size > 0) {\r\n            const repeatedIdsString = '\"' + Array.from(duplicateIds).join('\", \"') + '\"';\r\n            errorMessages.push(\r\n                `Detected ${duplicateIds.size} file IDs that are used multiple ` +\r\n                    `times. Remember that each file should have a unique IDs. The ` +\r\n                    `following IDs were seen multiple times: ${repeatedIdsString}`\r\n            );\r\n        }\r\n    }\r\n\r\n    if (errorMessages.length > 0) {\r\n        const errorMessageString = '\\n- ' + errorMessages.join('\\n- ');\r\n        let arrayString: string;\r\n        let itemString: string;\r\n        if (mode === 'folderChain') {\r\n            arrayString = 'folder chain';\r\n            itemString = 'files';\r\n        } else if (mode === 'fileActions') {\r\n            arrayString = 'file actions';\r\n            itemString = 'file actions';\r\n        } else {\r\n            // mode === 'files'\r\n            arrayString = 'files';\r\n            itemString = 'files';\r\n        }\r\n\r\n        Logger.error(\r\n            `Errors were detected when sanitizing the ${arrayString} array. ` +\r\n                `Offending ${itemString} were removed from the array. Summary of ` +\r\n                `validation errors: ${errorMessageString}`\r\n        );\r\n    }\r\n\r\n    return {\r\n        sanitizedArray: sanitizedFiles,\r\n        errorMessages,\r\n    };\r\n};\r\n","/**\r\n * We have option IDs in a separate file to avoid circular deps...\r\n */\r\nexport const OptionIds = {\r\n    ShowHiddenFiles: 'show_hidden_files',\r\n    ShowFoldersFirst: 'show_folders_first',\r\n    DarkMode: 'dark_mode',\r\n};\r\n","export enum FileViewMode {\r\n    List = 'list',\r\n    Compact = 'compact',\r\n    Grid = 'grid',\r\n}\r\n\r\nexport type FileViewConfigList = {\r\n    mode: FileViewMode.List;\r\n    entryHeight: number;\r\n};\r\n\r\nexport type FileViewConfigGrid = {\r\n    mode: FileViewMode.Compact | FileViewMode.Grid;\r\n    entryWidth: number;\r\n    entryHeight: number;\r\n};\r\n\r\nexport type FileViewConfig = FileViewConfigList | FileViewConfigGrid;\r\n","import React from 'react';\r\n\r\nexport enum ChonkyIconName {\r\n    // Misc\r\n    loading = 'loading',\r\n    dropdown = 'dropdown',\r\n    placeholder = 'placeholder',\r\n\r\n    // File Actions: Drag & drop\r\n    dndDragging = 'dndDragging',\r\n    dndCanDrop = 'dndCanDrop',\r\n    dndCannotDrop = 'dndCannotDrop',\r\n\r\n    // File Actions: File operations\r\n    openFiles = 'openFiles',\r\n    openParentFolder = 'openParentFolder',\r\n    copy = 'copy',\r\n    paste = 'paste',\r\n    share = 'share',\r\n    search = 'search',\r\n    selectAllFiles = 'selectAllFiles',\r\n    clearSelection = 'clearSelection',\r\n\r\n    // File Actions: Sorting & options\r\n    sortAsc = 'sortAsc',\r\n    sortDesc = 'sortDesc',\r\n    toggleOn = 'toggleOn',\r\n    toggleOff = 'toggleOff',\r\n\r\n    // File Actions: File Views\r\n    list = 'list',\r\n    compact = 'compact',\r\n    smallThumbnail = 'smallThumbnail',\r\n    largeThumbnail = 'largeThumbnail',\r\n\r\n    // File Actions: Unsorted\r\n    folder = 'folder',\r\n    folderCreate = 'folderCreate',\r\n    folderOpen = 'folderOpen',\r\n    folderChainSeparator = 'folderChainSeparator',\r\n    download = 'download',\r\n    upload = 'upload',\r\n    trash = 'trash',\r\n    fallbackIcon = 'fallbackIcon',\r\n\r\n    // File modifiers\r\n    symlink = 'symlink',\r\n    hidden = 'hidden',\r\n\r\n    // Generic file types\r\n    file = 'file',\r\n    license = 'license',\r\n    code = 'code',\r\n    config = 'config',\r\n    model = 'model',\r\n    database = 'database',\r\n    text = 'text',\r\n    archive = 'archive',\r\n    image = 'image',\r\n    video = 'video',\r\n    info = 'info',\r\n    key = 'key',\r\n    lock = 'lock',\r\n    music = 'music',\r\n    terminal = 'terminal',\r\n    users = 'users',\r\n\r\n    // OS file types\r\n    linux = 'linux',\r\n    ubuntu = 'ubuntu',\r\n    windows = 'windows',\r\n\r\n    // Programming language file types\r\n    rust = 'rust',\r\n    python = 'python',\r\n    nodejs = 'nodejs',\r\n    php = 'php',\r\n\r\n    // Development tools file types\r\n    git = 'git',\r\n\r\n    // Brands file types\r\n    adobe = 'adobe',\r\n\r\n    // Other program file types\r\n    pdf = 'pdf',\r\n    excel = 'excel',\r\n    word = 'word',\r\n    flash = 'flash',\r\n}\r\n\r\nexport interface FileIconData {\r\n    icon: ChonkyIconName | string;\r\n    colorCode: number;\r\n}\r\n\r\nexport interface ChonkyIconProps {\r\n    icon: ChonkyIconName | string;\r\n    spin?: boolean;\r\n    className?: string;\r\n    fixedWidth?: boolean;\r\n    style?: React.CSSProperties;\r\n}\r\n","import sort from 'fast-sort';\r\nimport FuzzySearch from 'fuzzy-search';\r\nimport { Nilable, Nullable } from 'tsdef';\r\n\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nimport { OptionIds } from '../action-definitions/option-ids';\r\nimport { FileArray, FileData, FileFilter } from '../types/file.types';\r\nimport { RootState } from '../types/redux.types';\r\nimport { FileSortKeySelector, SortOrder } from '../types/sort.types';\r\nimport { FileHelper } from '../util/file-helper';\r\n\r\n// Raw selectors\r\nexport const selectInstanceId = (state: RootState) => state.instanceId;\r\nexport const selectExternalFileActionHandler = (state: RootState) => state.externalFileActionHandler;\r\n\r\nexport const selectFileActionMap = (state: RootState) => state.fileActionMap;\r\nexport const selectFileActionIds = (state: RootState) => state.fileActionIds;\r\nexport const selectFileActionData = (fileActionId: string) => (state: RootState) =>\r\n    selectFileActionMap(state)[fileActionId];\r\nexport const selectToolbarItems = (state: RootState) => state.toolbarItems;\r\nexport const selectContextMenuItems = (state: RootState) => state.contextMenuItems;\r\n\r\nexport const selectFolderChain = (state: RootState) => state.folderChain;\r\nexport const selectCurrentFolder = (state: RootState) => {\r\n    const folderChain = selectFolderChain(state);\r\n    const currentFolder = folderChain.length > 0 ? folderChain[folderChain.length - 1] : null;\r\n    return currentFolder;\r\n};\r\nexport const selectParentFolder = (state: RootState) => {\r\n    const folderChain = selectFolderChain(state);\r\n    const parentFolder = folderChain.length > 1 ? folderChain[folderChain.length - 2] : null;\r\n    return parentFolder;\r\n};\r\n\r\nexport const selectRawFiles = (state: RootState) => state.rawFiles;\r\nexport const selectFileMap = (state: RootState) => state.fileMap;\r\nexport const selectCleanFileIds = (state: RootState) => state.cleanFileIds;\r\nexport const selectFileData = (fileId: Nullable<string>) => (state: RootState) =>\r\n    fileId ? selectFileMap(state)[fileId] : null;\r\n\r\nexport const selectHiddenFileIdMap = (state: RootState) => state.hiddenFileIdMap;\r\nexport const selectHiddenFileCount = (state: RootState) => Object.keys(selectHiddenFileIdMap(state)).length;\r\n\r\nexport const selectFocusSearchInput = (state: RootState) => state.focusSearchInput;\r\nexport const selectSearchString = (state: RootState) => state.searchString;\r\n\r\nexport const selectSelectionMap = (state: RootState) => state.selectionMap;\r\nexport const selectSelectedFileIds = (state: RootState) => Object.keys(selectSelectionMap(state));\r\nexport const selectSelectionSize = (state: RootState) => selectSelectedFileIds(state).length;\r\nexport const selectIsFileSelected = (fileId: Nullable<string>) => (state: RootState) =>\r\n    !!fileId && !!selectSelectionMap(state)[fileId];\r\nexport const selectSelectedFiles = (state: RootState) => {\r\n    const fileMap = selectFileMap(state);\r\n    return Object.keys(selectSelectionMap(state)).map(id => fileMap[id]);\r\n};\r\nexport const selectSelectedFilesForAction = (fileActionId: string) => (state: RootState) => {\r\n    const { fileActionMap } = state;\r\n    const action = fileActionMap[fileActionId];\r\n    if (!action || !action.requiresSelection) return undefined;\r\n\r\n    return getSelectedFiles(state, action.fileFilter);\r\n};\r\nexport const selectSelectedFilesForActionCount = (fileActionId: string) => (state: RootState) =>\r\n    getSelectedFilesForAction(state, fileActionId)?.length;\r\nexport const selectDisableSelection = (state: RootState) => state.disableSelection;\r\n\r\nexport const selectFileViewConfig = (state: RootState) => state.fileViewConfig;\r\n\r\nexport const selectSortActionId = (state: RootState) => state.sortActionId;\r\nexport const selectSortOrder = (state: RootState) => state.sortOrder;\r\n\r\nexport const selectOptionMap = (state: RootState) => state.optionMap;\r\nexport const selectOptionValue = (optionId: string) => (state: RootState) => selectOptionMap(state)[optionId];\r\n\r\nexport const selectThumbnailGenerator = (state: RootState) => state.thumbnailGenerator;\r\nexport const selectDoubleClickDelay = (state: RootState) => state.doubleClickDelay;\r\nexport const selectIsDnDDisabled = (state: RootState) => state.disableDragAndDrop;\r\nexport const selectClearSelectionOnOutsideClick = (state: RootState) => state.clearSelectionOnOutsideClick;\r\n\r\nexport const selectContextMenuMounted = (state: RootState) => state.contextMenuMounted;\r\nexport const selectContextMenuConfig = (state: RootState) => state.contextMenuConfig;\r\nexport const selectContextMenuTriggerFile = (state: RootState) => {\r\n    const config = selectContextMenuConfig(state);\r\n    if (!config || !config.triggerFileId) return null;\r\n    const fileMap = selectFileMap(state);\r\n    return fileMap[config.triggerFileId] ?? null;\r\n};\r\n\r\n// Raw selectors\r\nconst getFileActionMap = (state: RootState) => state.fileActionMap;\r\nconst getOptionMap = (state: RootState) => state.optionMap;\r\nconst getFileMap = (state: RootState) => state.fileMap;\r\nconst getFileIds = (state: RootState) => state.fileIds;\r\nconst getCleanFileIds = (state: RootState) => state.cleanFileIds;\r\nconst getSortActionId = (state: RootState) => state.sortActionId;\r\nconst getSortOrder = (state: RootState) => state.sortOrder;\r\nconst getSearchString = (state: RootState) => state.searchString;\r\nconst _getLastClick = (state: RootState) => state.lastClick;\r\n\r\n// Memoized selectors\r\nconst makeGetAction = (fileActionSelector: (state: RootState) => Nullable<string>) =>\r\n    createSelector([getFileActionMap, fileActionSelector], (fileActionMap, fileActionId) =>\r\n        fileActionId && fileActionMap[fileActionId] ? fileActionMap[fileActionId] : null\r\n    );\r\nconst makeGetOptionValue = (optionId: string, defaultValue: any = undefined) =>\r\n    createSelector([getOptionMap], optionMap => {\r\n        const value = optionMap[optionId];\r\n        if (value === undefined) {\r\n            return defaultValue;\r\n        }\r\n        return value;\r\n    });\r\nconst makeGetFiles = (fileIdsSelector: (state: RootState) => Nullable<string>[]) =>\r\n    createSelector(\r\n        [getFileMap, fileIdsSelector],\r\n        (fileMap, fileIds): FileArray => fileIds.map(fileId => (fileId && fileMap[fileId] ? fileMap[fileId] : null))\r\n    );\r\nconst getSortedFileIds = createSelector(\r\n    [\r\n        getFileIds,\r\n        getSortOrder,\r\n        makeGetFiles(getFileIds),\r\n        makeGetAction(getSortActionId),\r\n        makeGetOptionValue(OptionIds.ShowFoldersFirst, false),\r\n    ],\r\n    (fileIds, sortOrder, files, sortAction, showFolderFirst) => {\r\n        if (!sortAction) {\r\n            // We allow users to set the sort action ID to `null` if they want to use their\r\n            // own sorting mechanisms instead of relying on Chonky built-in sort.\r\n            return fileIds;\r\n        }\r\n\r\n        const prepareSortKeySelector = (selector: FileSortKeySelector) => (file: Nullable<FileData>) => selector(file);\r\n\r\n        const sortFunctions: {\r\n            asc?: (file: FileData) => any;\r\n            desc?: (file: FileData) => any;\r\n        }[] = [];\r\n\r\n        if (showFolderFirst) {\r\n            // If option is undefined (relevant actions is not enabled), we don't show\r\n            // folders first.\r\n            sortFunctions.push({\r\n                desc: prepareSortKeySelector(FileHelper.isDirectory),\r\n            });\r\n        }\r\n        if (sortAction.sortKeySelector) {\r\n            const configKeyName = sortOrder === SortOrder.ASC ? 'asc' : 'desc';\r\n            sortFunctions.push({\r\n                [configKeyName]: prepareSortKeySelector(sortAction.sortKeySelector),\r\n            });\r\n        }\r\n        if (sortFunctions.length === 0) return fileIds;\r\n\r\n        // We copy the array because `fast-sort` mutates it\r\n        const sortedFileIds = sort([...files])\r\n            .by(sortFunctions as any)\r\n            .map(file => (file ? file.id : null));\r\n        return sortedFileIds;\r\n    }\r\n);\r\nconst getSearcher = createSelector(\r\n    [makeGetFiles(getCleanFileIds)],\r\n    cleanFiles => new FuzzySearch(cleanFiles as FileData[], ['name'], { caseSensitive: false })\r\n);\r\nconst getSearchFilteredFileIds = createSelector(\r\n    [getCleanFileIds, getSearchString, getSearcher],\r\n    (cleanFileIds, searchString, searcher) =>\r\n        searchString ? searcher.search(searchString).map(f => f.id) : cleanFileIds\r\n);\r\nconst getHiddenFileIdMap = createSelector(\r\n    [getSearchFilteredFileIds, makeGetFiles(getCleanFileIds), makeGetOptionValue(OptionIds.ShowHiddenFiles)],\r\n    (searchFilteredFileIds, cleanFiles, showHiddenFiles) => {\r\n        const searchFilteredFileIdsSet = new Set(searchFilteredFileIds);\r\n        const hiddenFileIdMap: any = {};\r\n        cleanFiles.forEach(file => {\r\n            if (!file) return;\r\n            else if (!searchFilteredFileIdsSet.has(file.id)) {\r\n                // Hidden by seach\r\n                hiddenFileIdMap[file.id] = true;\r\n            } else if (!showHiddenFiles && FileHelper.isHidden(file)) {\r\n                // Hidden by options\r\n                hiddenFileIdMap[file.id] = true;\r\n            }\r\n        });\r\n        return hiddenFileIdMap;\r\n    }\r\n);\r\nconst getDisplayFileIds = createSelector(\r\n    [getSortedFileIds, getHiddenFileIdMap],\r\n    /** Returns files that will actually be shown to the user. */\r\n    (sortedFileIds, hiddenFileIdMap) => sortedFileIds.filter(id => !id || !hiddenFileIdMap[id])\r\n);\r\nconst getLastClickIndex = createSelector(\r\n    [_getLastClick, getSortedFileIds],\r\n    /** Returns the last click index after ensuring it is actually still valid. */\r\n    (lastClick, displayFileIds) => {\r\n        if (\r\n            !lastClick ||\r\n            lastClick.index > displayFileIds.length - 1 ||\r\n            lastClick.fileId != displayFileIds[lastClick.index]\r\n        ) {\r\n            return null;\r\n        }\r\n        return lastClick.index;\r\n    }\r\n);\r\n\r\nexport const selectors = {\r\n    // Raw selectors\r\n    getFileActionMap,\r\n    getOptionMap,\r\n    getFileMap,\r\n    getFileIds,\r\n    getCleanFileIds,\r\n    getSortActionId,\r\n    getSortOrder,\r\n    getSearchString,\r\n    _getLastClick,\r\n\r\n    // Memoized selectors\r\n    getSortedFileIds,\r\n    getSearcher,\r\n    getSearchFilteredFileIds,\r\n    getHiddenFileIdMap,\r\n    getDisplayFileIds,\r\n    getLastClickIndex,\r\n\r\n    // Parametrized selectors\r\n    makeGetAction,\r\n    makeGetOptionValue,\r\n    makeGetFiles,\r\n};\r\n\r\n// Selectors meant to be used outside of Redux code\r\nexport const getFileData = (state: RootState, fileId: Nullable<string>) =>\r\n    fileId ? selectFileMap(state)[fileId] : null;\r\nexport const getIsFileSelected = (state: RootState, file: FileData) => {\r\n    // !!! We deliberately don't use `FileHelper.isSelectable` here as we want to\r\n    //     reflect the state of Redux store accurately.\r\n    return !!selectSelectionMap(state)[file.id];\r\n};\r\nexport const getSelectedFiles = (state: RootState, ...filters: Nilable<FileFilter>[]) => {\r\n    const { fileMap, selectionMap } = state;\r\n\r\n    const selectedFiles = Object.keys(selectionMap).map(id => fileMap[id]);\r\n    const filteredSelectedFiles = filters.reduce(\r\n        (prevFiles, filter) => (filter ? prevFiles.filter(filter) : prevFiles),\r\n        selectedFiles\r\n    );\r\n    return filteredSelectedFiles;\r\n};\r\nexport const getSelectedFilesForAction = (state: RootState, fileActionId: string) =>\r\n    selectSelectedFilesForAction(fileActionId)(state);\r\n","import { Nilable } from 'tsdef';\r\n\r\nimport { ChonkyActions, DefaultFileActions, EssentialFileActions } from '../../action-definitions/index';\r\nimport { FileActionGroup, FileActionMenuItem } from '../../types/action-menus.types';\r\nimport { FileAction } from '../../types/action.types';\r\nimport { ChonkyThunk } from '../../types/redux.types';\r\nimport { SortOrder } from '../../types/sort.types';\r\nimport { sanitizeInputArray } from '../files-transforms';\r\nimport { reduxActions } from '../reducers';\r\nimport { selectCleanFileIds, selectFileMap, selectHiddenFileIdMap, selectSelectionMap } from '../selectors';\r\n\r\n/**\r\n * Merges multiple file action arrays into one while removing duplicates\r\n */\r\nconst mergeFileActionsArrays = (...fileActionArrays: FileAction[][]): FileAction[] => {\r\n    const seenActionIds = new Set<string>();\r\n    const addToSeen = (a: FileAction) => !!seenActionIds.add(a.id);\r\n    const wasNotSeen = (a: FileAction) => !seenActionIds.has(a.id);\r\n\r\n    const duplicateFreeArrays = fileActionArrays.map(arr => {\r\n        const duplicateFreeArray = arr.filter(wasNotSeen);\r\n        duplicateFreeArray.map(addToSeen);\r\n        return duplicateFreeArray;\r\n    });\r\n    return new Array<FileAction>().concat(...duplicateFreeArrays);\r\n};\r\n\r\nexport const thunkUpdateRawFileActions = (\r\n    rawFileActions: FileAction[] | any,\r\n    disableDefaultFileActions: Nilable<boolean | string[]>\r\n): ChonkyThunk => dispatch => {\r\n    const { sanitizedArray, errorMessages } = sanitizeInputArray('fileActions', rawFileActions);\r\n\r\n    // Add default actions unless user disabled them\r\n    let defaultActionsToAdd: FileAction[];\r\n    if (Array.isArray(disableDefaultFileActions)) {\r\n        const disabledActionIds = new Set(disableDefaultFileActions);\r\n        defaultActionsToAdd = DefaultFileActions.filter(action => !disabledActionIds.has(action.id));\r\n    } else if (disableDefaultFileActions) {\r\n        defaultActionsToAdd = [];\r\n    } else {\r\n        defaultActionsToAdd = DefaultFileActions;\r\n    }\r\n\r\n    const fileActions = mergeFileActionsArrays(sanitizedArray, EssentialFileActions, defaultActionsToAdd);\r\n    const optionDefaults: any = {};\r\n    fileActions.map(a => (a.option ? (optionDefaults[a.option.id] = a.option.defaultValue) : null));\r\n\r\n    dispatch(reduxActions.setRawFileActions(rawFileActions));\r\n    dispatch(reduxActions.setFileActionsErrorMessages(errorMessages));\r\n    dispatch(reduxActions.setFileActions(fileActions));\r\n    dispatch(reduxActions.setOptionDefaults(optionDefaults));\r\n    dispatch(thunkUpdateToolbarNContextMenuItems(fileActions));\r\n};\r\n\r\nexport const thunkUpdateToolbarNContextMenuItems = (fileActions: FileAction[]): ChonkyThunk => dispatch => {\r\n    const excludedToolbarFileActionIds = new Set<string>([\r\n        // TODO: Move decision to exclude actions somewhere else, as users' custom\r\n        //  components might not give these actions special treatment like Chonky does.\r\n        ChonkyActions.OpenParentFolder.id,\r\n    ]);\r\n\r\n    type SeenGroupMap = { [groupName: string]: FileActionGroup };\r\n\r\n    const toolbarItems: FileActionMenuItem[] = [];\r\n    const seenToolbarGroups: SeenGroupMap = {};\r\n\r\n    const contextMenuItems: FileActionMenuItem[] = [];\r\n    const seenContextMenuGroups: SeenGroupMap = {};\r\n\r\n    const getGroup = (itemArray: FileActionMenuItem[], seenMap: SeenGroupMap, groupName: string): FileActionGroup => {\r\n        if (seenMap[groupName]) return seenMap[groupName];\r\n        const group: FileActionGroup = { name: groupName, fileActionIds: [] };\r\n        itemArray.push(group);\r\n        seenMap[groupName] = group;\r\n        return group;\r\n    };\r\n\r\n    for (const action of fileActions) {\r\n        const button = action.button;\r\n        if (!button) continue;\r\n\r\n        if (button.toolbar && !excludedToolbarFileActionIds.has(action.id)) {\r\n            if (button.group) {\r\n                const group = getGroup(toolbarItems, seenToolbarGroups, button.group);\r\n                group.fileActionIds.push(action.id);\r\n            } else {\r\n                toolbarItems.push(action.id);\r\n            }\r\n        }\r\n\r\n        if (button.contextMenu) {\r\n            if (button.group) {\r\n                const group = getGroup(contextMenuItems, seenContextMenuGroups, button.group);\r\n                group.fileActionIds.push(action.id);\r\n            } else {\r\n                contextMenuItems.push(action.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatch(reduxActions.updateFileActionMenuItems([toolbarItems, contextMenuItems]));\r\n};\r\n\r\nexport const thunkUpdateDefaultFileViewActionId = (fileActionId: Nilable<string>): ChonkyThunk => (\r\n    dispatch,\r\n    getState\r\n) => {\r\n    const { fileActionMap } = getState();\r\n    const action = fileActionId ? fileActionMap[fileActionId] : null;\r\n    if (action && action.fileViewConfig) {\r\n        dispatch(reduxActions.setFileViewConfig(action.fileViewConfig));\r\n    }\r\n};\r\n\r\nexport const thunkActivateSortAction = (fileActionId: Nilable<string>): ChonkyThunk => (dispatch, getState) => {\r\n    if (!fileActionId) return;\r\n\r\n    const { sortActionId: oldActionId, sortOrder: oldOrder, fileActionMap } = getState();\r\n    const action = fileActionMap[fileActionId];\r\n    if (!action || !action.sortKeySelector) return;\r\n\r\n    let order = oldOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\r\n    if (oldActionId !== fileActionId) {\r\n        order = SortOrder.ASC;\r\n    }\r\n\r\n    dispatch(reduxActions.setSort({ actionId: fileActionId, order: order }));\r\n};\r\n\r\nexport const thunkApplySelectionTransform = (action: FileAction): ChonkyThunk => (dispatch, getState) => {\r\n    const selectionTransform = action.selectionTransform;\r\n    if (!selectionTransform) return;\r\n\r\n    const state = getState();\r\n    const prevSelection = new Set<string>(Object.keys(selectSelectionMap(state)));\r\n    const hiddenFileIds = new Set<string>(Object.keys(selectHiddenFileIdMap(state)));\r\n\r\n    const newSelection = selectionTransform({\r\n        prevSelection,\r\n        fileIds: selectCleanFileIds(state),\r\n        fileMap: selectFileMap(state),\r\n        hiddenFileIds,\r\n    });\r\n    if (!newSelection) return;\r\n\r\n    if (newSelection.size === 0) {\r\n        dispatch(reduxActions.clearSelection());\r\n    } else {\r\n        dispatch(reduxActions.selectFiles({ fileIds: Array.from(newSelection), reset: true }));\r\n    }\r\n};\r\n","import { MaybePromise, Undefinable } from 'tsdef';\r\n\r\nimport { FileActionData, FileActionState } from '../../types/action-handler.types';\r\nimport { FileAction } from '../../types/action.types';\r\nimport { ChonkyDispatch, ChonkyThunk } from '../../types/redux.types';\r\nimport { Logger } from '../../util/logger';\r\nimport { reduxActions } from '../reducers';\r\nimport {\r\n    selectContextMenuTriggerFile, selectExternalFileActionHandler, selectFileActionMap,\r\n    selectInstanceId, selectSelectedFiles\r\n} from '../selectors';\r\nimport { thunkActivateSortAction, thunkApplySelectionTransform } from './file-actions.thunks';\r\n\r\n/**\r\n * Thunk that dispatches actions to the external (user-provided) action handler.\r\n */\r\nexport const thunkDispatchFileAction = (data: FileActionData<FileAction>): ChonkyThunk => (_dispatch, getState) => {\r\n    Logger.debug(`FILE ACTION DISPATCH: [${data.id}]`, 'data:', data);\r\n    const state = getState();\r\n    const action = selectFileActionMap(state)[data.id];\r\n    const externalFileActionHandler = selectExternalFileActionHandler(state);\r\n    if (action) {\r\n        if (externalFileActionHandler) {\r\n            Promise.resolve(externalFileActionHandler(data)).catch(error =>\r\n                Logger.error(`User-defined file action handler threw an error: ${error.message}`)\r\n            );\r\n        }\r\n    } else {\r\n        Logger.warn(\r\n            `Internal components dispatched the \"${data.id}\" file action, but such ` + `action was not registered.`\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Thunk that is used by internal components (and potentially the user) to \"request\"\r\n * actions. When action is requested, Chonky \"prepares\" the action data by extracting it\r\n * from Redux state. Once action data is ready, Chonky executes some side effect and/or\r\n * dispatches the action to the external action handler.\r\n */\r\nexport const thunkRequestFileAction = <Action extends FileAction>(\r\n    action: Action,\r\n    payload: Action['__payloadType']\r\n): ChonkyThunk => (dispatch, getState) => {\r\n    Logger.debug(`FILE ACTION REQUEST: [${action.id}]`, 'action:', action, 'payload:', payload);\r\n    const state = getState();\r\n    const instanceId = selectInstanceId(state);\r\n\r\n    if (!selectFileActionMap(state)[action.id]) {\r\n        Logger.warn(\r\n            `The action \"${action.id}\" was requested, but it is not registered. The ` +\r\n                `action will still be dispatched, but this might indicate a bug in ` +\r\n                `the code. Please register your actions by passing them to ` +\r\n                `\"fileActions\" prop.`\r\n        );\r\n    }\r\n\r\n    // Determine files for the action if action requires selection\r\n    const selectedFiles = selectSelectedFiles(state);\r\n    const selectedFilesForAction = action.fileFilter ? selectedFiles.filter(action.fileFilter) : selectedFiles;\r\n    if (action.requiresSelection && selectedFilesForAction.length === 0) {\r\n        Logger.warn(\r\n            `Internal components requested the \"${action.id}\" file ` +\r\n                `action, but the selection for this action was empty. This ` +\r\n                `might a bug in the code of the presentational components.`\r\n        );\r\n        return;\r\n    }\r\n\r\n    const contextMenuTriggerFile = selectContextMenuTriggerFile(state);\r\n    const actionState: FileActionState<{}> = {\r\n        instanceId,\r\n        selectedFiles,\r\n        selectedFilesForAction,\r\n        contextMenuTriggerFile,\r\n    };\r\n\r\n    // === Update sort state if necessary\r\n    const sortKeySelector = action.sortKeySelector;\r\n    if (sortKeySelector) dispatch(thunkActivateSortAction(action.id));\r\n\r\n    // === Update file view state if necessary\r\n    const fileViewConfig = action.fileViewConfig;\r\n    if (fileViewConfig) dispatch(reduxActions.setFileViewConfig(fileViewConfig));\r\n\r\n    // === Update option state if necessary\r\n    const option = action.option;\r\n    if (option) dispatch(reduxActions.toggleOption(option.id));\r\n\r\n    // === Apply selection transform if necessary\r\n    const selectionTransform = action.selectionTransform;\r\n    if (selectionTransform) dispatch(thunkApplySelectionTransform(action));\r\n\r\n    // Apply the effect\r\n    const effect = action.effect;\r\n    let maybeEffectPromise: MaybePromise<boolean | undefined> = undefined;\r\n    if (effect) {\r\n        try {\r\n            maybeEffectPromise = effect({\r\n                action,\r\n                payload,\r\n                state: actionState,\r\n                reduxDispatch: dispatch,\r\n                getReduxState: getState,\r\n            }) as MaybePromise<boolean | undefined>;\r\n        } catch (error) {\r\n            Logger.error(`User-defined effect function for action ${action.id} threw an ` + `error: ${error.message}`);\r\n        }\r\n    }\r\n\r\n    // Dispatch the action to user code. Deliberately call it after all other\r\n    // operations are over.\r\n    return Promise.resolve(maybeEffectPromise)\r\n        .then(effectResult => {\r\n            const data: FileActionData<Action> = {\r\n                id: action.id,\r\n                action,\r\n                payload,\r\n                state: actionState,\r\n            };\r\n            triggerDispatchAfterEffect(dispatch, data, effectResult);\r\n        })\r\n        .catch(error => {\r\n            Logger.error(\r\n                `User-defined effect function for action ${action.id} returned a ` +\r\n                    `promise that was rejected: ${error.message}`\r\n            );\r\n            const data: FileActionData<Action> = {\r\n                id: action.id,\r\n                action,\r\n                payload,\r\n                state: actionState,\r\n            };\r\n            triggerDispatchAfterEffect(dispatch, data, undefined);\r\n        });\r\n};\r\n\r\nexport const triggerDispatchAfterEffect = <Action extends FileAction>(\r\n    dispatch: ChonkyDispatch,\r\n    data: FileActionData<Action>,\r\n    effectResult: Undefinable<boolean>\r\n) => {\r\n    const preventDispatch = effectResult === true;\r\n    if (!preventDispatch) dispatch(thunkDispatchFileAction(data));\r\n};\r\n","import filesize from 'filesize';\r\nimport { createContext, useContext, useMemo } from 'react';\r\nimport { IntlShape, useIntl } from 'react-intl';\r\nimport { Nullable, Undefinable } from 'tsdef';\r\n\r\nimport { FileAction } from '../types/action.types';\r\nimport { FileData } from '../types/file.types';\r\nimport { ChonkyFormatters } from '../types/i18n.types';\r\nimport { FileHelper } from './file-helper';\r\n\r\nexport enum I18nNamespace {\r\n    Toolbar = 'toolbar',\r\n    FileList = 'fileList',\r\n    FileEntry = 'fileEntry',\r\n    FileContextMenu = 'contextMenu',\r\n\r\n    FileActions = 'actions',\r\n    FileActionGroups = 'actionGroups',\r\n}\r\n\r\nexport const getI18nId = (namespace: I18nNamespace, stringId: string): string =>\r\n    `chonky.${namespace}.${stringId}`;\r\n\r\nexport const getActionI18nId = (actionId: string, stringId: string): string =>\r\n    `chonky.${I18nNamespace.FileActions}.${actionId}.${stringId}`;\r\n\r\nexport const useLocalizedFileActionGroup = (groupName: string) => {\r\n    const intl = useIntl();\r\n    return useMemo(() => {\r\n        return intl.formatMessage({\r\n            id: getI18nId(I18nNamespace.FileActionGroups, groupName),\r\n            defaultMessage: groupName,\r\n        });\r\n    }, [groupName, intl]);\r\n};\r\n\r\nexport const useLocalizedFileActionStrings = (action: Nullable<FileAction>) => {\r\n    const intl = useIntl();\r\n    return useMemo(() => {\r\n        if (!action) {\r\n            return {\r\n                buttonName: '',\r\n                buttonTooltip: undefined,\r\n            };\r\n        }\r\n\r\n        const buttonName = intl.formatMessage({\r\n            id: getActionI18nId(action.id, 'button.name'),\r\n            defaultMessage: action.button?.name,\r\n        });\r\n\r\n        let buttonTooltip: Undefinable<string> = undefined;\r\n        if (action.button?.tooltip) {\r\n            // We only translate the tooltip if the original action has a tooltip.\r\n            buttonTooltip = intl.formatMessage({\r\n                id: getActionI18nId(action.id, 'button.tooltip'),\r\n                defaultMessage: action.button?.tooltip,\r\n            });\r\n        }\r\n\r\n        return {\r\n            buttonName,\r\n            buttonTooltip,\r\n        };\r\n    }, [action, intl]);\r\n};\r\n\r\nexport const useLocalizedFileEntryStrings = (file: Nullable<FileData>) => {\r\n    const intl = useIntl();\r\n    const formatters = useContext(ChonkyFormattersContext);\r\n    return useMemo(() => {\r\n        return {\r\n            fileModDateString: formatters.formatFileModDate(intl, file),\r\n            fileSizeString: formatters.formatFileSize(intl, file),\r\n        };\r\n    }, [file, formatters, intl]);\r\n};\r\n\r\nexport const defaultFormatters: ChonkyFormatters = {\r\n    formatFileModDate: (\r\n        intl: IntlShape,\r\n        file: Nullable<FileData>\r\n    ): Nullable<string> => {\r\n        const safeModDate = FileHelper.getModDate(file);\r\n        if (safeModDate) {\r\n            return intl.formatDate(safeModDate, {\r\n                dateStyle: 'medium',\r\n                timeStyle: 'short',\r\n            } as any);\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n    formatFileSize: (_intl: IntlShape, file: Nullable<FileData>): Nullable<string> => {\r\n        if (!file || typeof file.size !== 'number') return null;\r\n\r\n        const size = file.size;\r\n        const sizeData = filesize(size, { bits: false, output: 'object' }) as any;\r\n        if (sizeData.symbol === 'B') {\r\n            return `${Math.round(sizeData.value / 10) / 100.0} KB`;\r\n        } else if (sizeData.symbol === 'KB') {\r\n            return `${Math.round(sizeData.value)} ${sizeData.symbol}`;\r\n        }\r\n        return `${sizeData.value} ${sizeData.symbol}`;\r\n    },\r\n};\r\n\r\nexport const ChonkyFormattersContext = createContext(defaultFormatters);\r\n","// Used in React hooks to indicate empty deps are intentional.\r\nimport { MaybePromise, Nullable, WritableProps } from 'tsdef';\r\n\r\nimport { FileAction, FileActionEffect } from '../types/action.types';\r\nimport { Logger } from './logger';\r\n\r\n// Used in contexts that need to provide some default value for a function.\r\n// eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars\r\nexport const NOOP_FUNCTION = (...args: any[]) => {\r\n    Logger.warn(\r\n        `The \"NOOP_FUNCTION\" from the constants module was called. ` +\r\n            `This can indicate a bug in one of the components. Supplied args:`,\r\n        args\r\n    );\r\n};\r\n\r\nexport const isPromise = <T>(value: MaybePromise<T> | any): value is Promise<T> => {\r\n    if (typeof value !== 'object' || !value) return false;\r\n    const then = (value as Promise<T>).then;\r\n    return then && typeof then === 'function';\r\n};\r\n\r\nexport const defineFileAction = <Action extends FileAction>(\r\n    action: Action,\r\n    effect?: FileActionEffect<FileAction>\r\n): WritableProps<Action> => {\r\n    if (action.__payloadType !== undefined && (action.hotkeys || action.button)) {\r\n        const errorMessage =\r\n            `Invalid definition was provided for file action \"${action.id}\". Actions ` +\r\n            `that specify hotkeys or buttons cannot define a payload type. If ` +\r\n            `your application requires this functionality, define two actions ` +\r\n            `and chain them using effects.`;\r\n        Logger.error(errorMessage);\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    action.effect = effect;\r\n    return action;\r\n};\r\n\r\n/**\r\n * Recursively check the current element and the parent elements, going bottom-up.\r\n * Returns the first element to match the predicate, otherwise returns null if such\r\n * element is not found.\r\n */\r\nexport const findElementAmongAncestors = (\r\n    maybeElement: HTMLElement | any,\r\n    predicate: (maybeElement: HTMLElement | any) => boolean\r\n): Nullable<HTMLElement> => {\r\n    if (!maybeElement) return maybeElement;\r\n\r\n    if (predicate(maybeElement)) return maybeElement;\r\n\r\n    if (maybeElement.parentElement) {\r\n        return findElementAmongAncestors(maybeElement.parentElement, predicate);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport const elementIsInsideButton = (buttonCandidate: HTMLElement | any): boolean => {\r\n    return !!findElementAmongAncestors(\r\n        buttonCandidate,\r\n        (element: any) => element.tagName && element.tagName.toLowerCase() === 'button'\r\n    );\r\n};\r\n\r\nexport const getValueOrFallback = <T extends any>(\r\n    value: T | undefined,\r\n    fallback: T,\r\n    desiredType?: 'boolean' | 'string' | 'number'\r\n): NonNullable<T> => {\r\n    if (desiredType) {\r\n        return (typeof value === desiredType ? value : fallback) as NonNullable<T>;\r\n    }\r\n    return (value !== undefined ? value : fallback) as NonNullable<T>;\r\n};\r\n","import { reduxActions } from '../redux/reducers';\r\nimport {\r\n    getFileData, getIsFileSelected, selectDisableSelection, selectors, selectParentFolder,\r\n    selectSelectionSize\r\n} from '../redux/selectors';\r\nimport { reduxThunks } from '../redux/thunks';\r\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\r\nimport {\r\n    ChangeSelectionPayload, EndDragNDropPayload, KeyboardClickFilePayload, MouseClickFilePayload,\r\n    MoveFilesPayload, OpenFileContextMenuPayload, OpenFilesPayload, StartDragNDropPayload\r\n} from '../types/action-payloads.types';\r\nimport { ChonkyIconName } from '../types/icons.types';\r\nimport { FileHelper } from '../util/file-helper';\r\nimport { defineFileAction } from '../util/helpers';\r\nimport { Logger } from '../util/logger';\r\nimport { ChonkyActions } from './index';\r\n\r\nexport const EssentialActions = {\r\n    /**\r\n     * Action that is dispatched when the user clicks on a file entry using their mouse.\r\n     * Both single clicks and double clicks trigger this action.\r\n     */\r\n    MouseClickFile: defineFileAction(\r\n        {\r\n            id: 'mouse_click_file',\r\n            __payloadType: {} as MouseClickFilePayload,\r\n        } as const,\r\n        ({ payload, reduxDispatch, getReduxState }) => {\r\n            if (payload.clickType === 'double') {\r\n                if (FileHelper.isOpenable(payload.file)) {\r\n                    reduxDispatch(\r\n                        thunkRequestFileAction(ChonkyActions.OpenFiles, {\r\n                            targetFile: payload.file,\r\n\r\n                            // To simulate Windows Explorer and Nautilus behaviour,\r\n                            // a double click on a file only opens that file even if\r\n                            // there is a selection.\r\n                            files: [payload.file],\r\n                        })\r\n                    );\r\n                }\r\n            } else {\r\n                // We're dealing with a single click\r\n\r\n                const disableSelection = selectDisableSelection(getReduxState());\r\n                if (FileHelper.isSelectable(payload.file) && !disableSelection) {\r\n                    if (payload.ctrlKey) {\r\n                        // Multiple selection\r\n                        reduxDispatch(\r\n                            reduxActions.toggleSelection({\r\n                                fileId: payload.file.id,\r\n                                exclusive: false,\r\n                            })\r\n                        );\r\n                        reduxDispatch(\r\n                            reduxActions.setLastClickIndex({\r\n                                index: payload.fileDisplayIndex,\r\n                                fileId: payload.file.id,\r\n                            })\r\n                        );\r\n                    } else if (payload.shiftKey) {\r\n                        // Range selection\r\n                        const lastClickIndex = selectors.getLastClickIndex(getReduxState());\r\n                        if (typeof lastClickIndex === 'number') {\r\n                            // We have the index of the previous click\r\n                            let rangeStart = lastClickIndex;\r\n                            let rangeEnd = payload.fileDisplayIndex;\r\n                            if (rangeStart > rangeEnd) {\r\n                                [rangeStart, rangeEnd] = [rangeEnd, rangeStart];\r\n                            }\r\n\r\n                            reduxDispatch(reduxThunks.selectRange({ rangeStart, rangeEnd }));\r\n                        } else {\r\n                            // Since we can't do a range selection, do a\r\n                            // multiple selection\r\n                            reduxDispatch(\r\n                                reduxActions.toggleSelection({\r\n                                    fileId: payload.file.id,\r\n                                    exclusive: false,\r\n                                })\r\n                            );\r\n                            reduxDispatch(\r\n                                reduxActions.setLastClickIndex({\r\n                                    index: payload.fileDisplayIndex,\r\n                                    fileId: payload.file.id,\r\n                                })\r\n                            );\r\n                        }\r\n                    } else {\r\n                        // Exclusive selection\r\n                        reduxDispatch(\r\n                            reduxActions.toggleSelection({\r\n                                fileId: payload.file.id,\r\n                                exclusive: true,\r\n                            })\r\n                        );\r\n                        reduxDispatch(\r\n                            reduxActions.setLastClickIndex({\r\n                                index: payload.fileDisplayIndex,\r\n                                fileId: payload.file.id,\r\n                            })\r\n                        );\r\n                    }\r\n                } else {\r\n                    if (!payload.ctrlKey && !disableSelection) {\r\n                        reduxDispatch(reduxActions.clearSelection());\r\n                    }\r\n                    reduxDispatch(\r\n                        reduxActions.setLastClickIndex({\r\n                            index: payload.fileDisplayIndex,\r\n                            fileId: payload.file.id,\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    ),\r\n    /**\r\n     * Action that is dispatched when the user \"clicks\" on a file using their keyboard.\r\n     * Using Space and Enter keys counts as clicking.\r\n     */\r\n    KeyboardClickFile: defineFileAction(\r\n        {\r\n            id: 'keyboard_click_file',\r\n            __payloadType: {} as KeyboardClickFilePayload,\r\n        } as const,\r\n        ({ payload, reduxDispatch, getReduxState }) => {\r\n            reduxDispatch(\r\n                reduxActions.setLastClickIndex({\r\n                    index: payload.fileDisplayIndex,\r\n                    fileId: payload.file.id,\r\n                })\r\n            );\r\n            if (payload.enterKey) {\r\n                // We only dispatch the Open Files action here when the selection is\r\n                // empty. Otherwise, `Enter` key presses are handled by the\r\n                // hotkey manager for the Open Files action.\r\n                if (selectSelectionSize(getReduxState()) === 0) {\r\n                    reduxDispatch(\r\n                        thunkRequestFileAction(ChonkyActions.OpenFiles, {\r\n                            targetFile: payload.file,\r\n                            files: [payload.file],\r\n                        })\r\n                    );\r\n                }\r\n            } else if (payload.spaceKey && FileHelper.isSelectable(payload.file)) {\r\n                reduxDispatch(\r\n                    reduxActions.toggleSelection({\r\n                        fileId: payload.file.id,\r\n                        exclusive: payload.ctrlKey,\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    ),\r\n    /**\r\n     * Action that is dispatched when user starts dragging some file.\r\n     */\r\n    StartDragNDrop: defineFileAction(\r\n        {\r\n            id: 'start_drag_n_drop',\r\n            __payloadType: {} as StartDragNDropPayload,\r\n        } as const,\r\n        ({ payload, reduxDispatch, getReduxState }) => {\r\n            const file = payload.draggedFile;\r\n            if (!getIsFileSelected(getReduxState(), file)) {\r\n                if (FileHelper.isSelectable(file)) {\r\n                    reduxDispatch(\r\n                        reduxActions.selectFiles({\r\n                            fileIds: [file.id],\r\n                            reset: true,\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    ),\r\n    /**\r\n     * Action that is dispatched when user either cancels the drag & drop interaction,\r\n     * or drops a file somewhere.\r\n     */\r\n    EndDragNDrop: defineFileAction(\r\n        {\r\n            id: 'end_drag_n_drop',\r\n            __payloadType: {} as EndDragNDropPayload,\r\n        } as const,\r\n        ({ payload, reduxDispatch, getReduxState }) => {\r\n            if (getIsFileSelected(getReduxState(), payload.destination)) {\r\n                // Can't drop a selection into itself\r\n                return;\r\n            }\r\n\r\n            const { draggedFile, selectedFiles } = payload as EndDragNDropPayload;\r\n            const droppedFiles = selectedFiles.length > 0 ? selectedFiles : [draggedFile];\r\n            reduxDispatch(\r\n                thunkRequestFileAction(ChonkyActions.MoveFiles, {\r\n                    ...payload,\r\n                    files: droppedFiles,\r\n                })\r\n            );\r\n        }\r\n    ),\r\n    /**\r\n     * Action that is dispatched when user moves files from one folder to another,\r\n     * usually by dragging & dropping some files into the folder.\r\n     */\r\n    MoveFiles: defineFileAction({\r\n        id: 'move_files',\r\n        __payloadType: {} as MoveFilesPayload,\r\n    } as const),\r\n    /**\r\n     * Action that is dispatched when the selection changes for any reason.\r\n     */\r\n    ChangeSelection: defineFileAction({\r\n        id: 'change_selection',\r\n        __payloadType: {} as ChangeSelectionPayload,\r\n    } as const),\r\n    /**\r\n     * Action that is dispatched when user wants to open some files. This action is\r\n     * often triggered by other actions.\r\n     */\r\n    OpenFiles: defineFileAction({\r\n        id: 'open_files',\r\n        __payloadType: {} as OpenFilesPayload,\r\n    } as const),\r\n    /**\r\n     * Action that is triggered when user wants to go up a directory.\r\n     */\r\n    OpenParentFolder: defineFileAction(\r\n        {\r\n            id: 'open_parent_folder',\r\n            hotkeys: ['backspace'],\r\n            button: {\r\n                name: 'Go up a directory',\r\n                toolbar: true,\r\n                contextMenu: false,\r\n                icon: ChonkyIconName.openParentFolder,\r\n                iconOnly: true,\r\n            },\r\n        } as const,\r\n        ({ reduxDispatch, getReduxState }) => {\r\n            const parentFolder = selectParentFolder(getReduxState());\r\n            if (FileHelper.isOpenable(parentFolder)) {\r\n                reduxDispatch(\r\n                    thunkRequestFileAction(ChonkyActions.OpenFiles, {\r\n                        targetFile: parentFolder,\r\n                        files: [parentFolder],\r\n                    })\r\n                );\r\n            } else {\r\n                Logger.warn(\r\n                    'Open parent folder effect was triggered  even though the parent folder' +\r\n                        ' is not openable. This indicates a bug in presentation components.'\r\n                );\r\n            }\r\n        }\r\n    ),\r\n    /**\r\n     * Action that is dispatched when user opens the context menu, either by right click\r\n     * on something or using the context menu button on their keyboard.\r\n     */\r\n    OpenFileContextMenu: defineFileAction(\r\n        {\r\n            id: 'open_file_context_menu',\r\n            __payloadType: {} as OpenFileContextMenuPayload,\r\n        } as const,\r\n        ({ payload, reduxDispatch, getReduxState }) => {\r\n            // TODO: Check if the context menu component is actually enabled. There is a\r\n            //  chance it doesn't matter if it is enabled or not - if it is not mounted,\r\n            //  the action will simply have no effect. It also allows users to provide\r\n            //  their own components - however, users could also flip the \"context menu\r\n            //  component mounted\" switch...\r\n            const triggerFile = getFileData(getReduxState(), payload.triggerFileId);\r\n            if (triggerFile) {\r\n                const fileSelected = getIsFileSelected(getReduxState(), triggerFile);\r\n                if (!fileSelected) {\r\n                    // If file is selected, we leave the selection as is. If it is not\r\n                    // selected, it means user right clicked the file with no selection.\r\n                    // We simulate the Windows Explorer/Nautilus behaviour of moving\r\n                    // selection to this file.\r\n                    if (FileHelper.isSelectable(triggerFile)) {\r\n                        reduxDispatch(\r\n                            reduxActions.selectFiles({\r\n                                fileIds: [payload.triggerFileId],\r\n                                reset: true,\r\n                            })\r\n                        );\r\n                    } else {\r\n                        reduxDispatch(reduxActions.clearSelection());\r\n                    }\r\n                }\r\n            }\r\n\r\n            reduxDispatch(\r\n                reduxActions.showContextMenu({\r\n                    triggerFileId: payload.triggerFileId,\r\n                    mouseX: payload.clientX - 2,\r\n                    mouseY: payload.clientY - 4,\r\n                })\r\n            );\r\n        }\r\n    ),\r\n};\r\n","import { ChonkyThunk } from '../../types/redux.types';\r\nimport { FileHelper } from '../../util/file-helper';\r\nimport { reduxActions } from '../reducers';\r\nimport { selectors } from '../selectors';\r\n\r\nexport const reduxThunks = {\r\n    selectRange: (params: {\r\n        rangeStart: number;\r\n        rangeEnd: number;\r\n        reset?: boolean;\r\n    }): ChonkyThunk => (dispatch, getState) => {\r\n        const state = getState();\r\n        if (state.disableSelection) return;\r\n        const displayFileIds = selectors.getDisplayFileIds(state);\r\n        const fileIdsToSelect = displayFileIds\r\n            .slice(params.rangeStart, params.rangeEnd + 1)\r\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id])) as string[];\r\n        dispatch(\r\n            reduxActions.selectFiles({\r\n                fileIds: fileIdsToSelect,\r\n                reset: !!params.reset,\r\n            })\r\n        );\r\n    },\r\n};\r\n","import { Nullable } from 'tsdef';\r\n\r\nimport { selectFocusSearchInput } from '../redux/selectors';\r\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\r\nimport { FileSelectionTransform } from '../types/action.types';\r\nimport { FileViewMode } from '../types/file-view.types';\r\nimport { FileData } from '../types/file.types';\r\nimport { ChonkyIconName } from '../types/icons.types';\r\nimport { FileHelper } from '../util/file-helper';\r\nimport { defineFileAction } from '../util/helpers';\r\nimport { EssentialActions } from './essential';\r\nimport { OptionIds } from './option-ids';\r\n\r\nexport const DefaultActions = {\r\n    /**\r\n     * Action that can be used to open currently selected files.\r\n     */\r\n    OpenSelection: defineFileAction(\r\n        {\r\n            id: 'open_selection',\r\n            hotkeys: ['enter'],\r\n            requiresSelection: true,\r\n            fileFilter: FileHelper.isOpenable,\r\n            button: {\r\n                name: 'Open selection',\r\n                toolbar: true,\r\n                contextMenu: true,\r\n                group: 'Actions',\r\n                icon: ChonkyIconName.openFiles,\r\n            },\r\n        } as const,\r\n        ({ state, reduxDispatch }) => {\r\n            reduxDispatch(\r\n                thunkRequestFileAction(EssentialActions.OpenFiles, {\r\n                    files: state.selectedFilesForAction!,\r\n                })\r\n            );\r\n            return undefined;\r\n        }\r\n    ),\r\n    /**\r\n     * Action that selects all files.\r\n     */\r\n    SelectAllFiles: defineFileAction({\r\n        id: 'select_all_files',\r\n        hotkeys: ['ctrl+a'],\r\n        button: {\r\n            name: 'Select all files',\r\n            toolbar: true,\r\n            contextMenu: true,\r\n            group: 'Actions',\r\n            icon: ChonkyIconName.selectAllFiles,\r\n        },\r\n        selectionTransform: (({ fileIds, hiddenFileIds }) => {\r\n            const newSelection = new Set<string>();\r\n            fileIds.map(fileId => {\r\n                // We don't need to check if file is selectable because Chonky does\r\n                // it own checks internally.\r\n                if (!hiddenFileIds.has(fileId)) newSelection.add(fileId);\r\n            });\r\n            return newSelection;\r\n        }) as FileSelectionTransform,\r\n    } as const),\r\n    /**\r\n     * Action that clear the file selection.\r\n     */\r\n    ClearSelection: defineFileAction({\r\n        id: 'clear_selection',\r\n        hotkeys: ['escape'],\r\n        button: {\r\n            name: 'Clear selection',\r\n            toolbar: true,\r\n            contextMenu: true,\r\n            group: 'Actions',\r\n            icon: ChonkyIconName.clearSelection,\r\n        },\r\n        selectionTransform: (({ prevSelection }) => {\r\n            if (prevSelection.size === 0) return null;\r\n            return new Set<string>();\r\n        }) as FileSelectionTransform,\r\n    } as const),\r\n    /**\r\n     * Action that enables List view.\r\n     */\r\n    EnableListView: defineFileAction({\r\n        id: 'enable_list_view',\r\n        fileViewConfig: {\r\n            mode: FileViewMode.List,\r\n            entryHeight: 30,\r\n        },\r\n        button: {\r\n            name: 'Switch to List view',\r\n            toolbar: true,\r\n            icon: ChonkyIconName.list,\r\n            iconOnly: true,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that enables Compact view. Note that compact view is still\r\n     * experimental and should not be used in production.\r\n     */\r\n    EnableCompactView: defineFileAction({\r\n        // TODO: Don't enable until compact view is fully supported\r\n        id: 'enable_compact_view',\r\n        fileViewConfig: {\r\n            mode: FileViewMode.Compact,\r\n            entryHeight: 40,\r\n            entryWidth: 220,\r\n        },\r\n        button: {\r\n            name: 'Switch to Compact view',\r\n            toolbar: true,\r\n            icon: ChonkyIconName.compact,\r\n            iconOnly: true,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that enables Grid view.\r\n     */\r\n    EnableGridView: defineFileAction({\r\n        id: 'enable_grid_view',\r\n        fileViewConfig: { mode: FileViewMode.Grid, entryWidth: 165, entryHeight: 130 },\r\n        button: {\r\n            name: 'Switch to Grid view',\r\n            toolbar: true,\r\n            icon: ChonkyIconName.smallThumbnail,\r\n            iconOnly: true,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that sorts files by `file.name`.\r\n     */\r\n    SortFilesByName: defineFileAction({\r\n        id: 'sort_files_by_name',\r\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.name.toLowerCase() : undefined),\r\n        button: {\r\n            name: 'Sort by name',\r\n            toolbar: true,\r\n            group: 'Options',\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that sorts files by `file.size`.\r\n     */\r\n    SortFilesBySize: defineFileAction({\r\n        id: 'sort_files_by_size',\r\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.size : undefined),\r\n        button: {\r\n            name: 'Sort by size',\r\n            toolbar: true,\r\n            group: 'Options',\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that sorts files by `file.modDate`.\r\n     */\r\n    SortFilesByDate: defineFileAction({\r\n        id: 'sort_files_by_date',\r\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.modDate : undefined),\r\n        button: {\r\n            name: 'Sort by date',\r\n            toolbar: true,\r\n            group: 'Options',\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that toggles whether hidden files are shown to the user or not.\r\n     */\r\n    ToggleHiddenFiles: defineFileAction({\r\n        id: 'toggle_hidden_files',\r\n        hotkeys: ['ctrl+h'],\r\n        option: {\r\n            id: OptionIds.ShowHiddenFiles,\r\n            defaultValue: true,\r\n        },\r\n        button: {\r\n            name: 'Show hidden files',\r\n            toolbar: true,\r\n            group: 'Options',\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that toggles whether folders should appear before files regardless of\r\n     * current sort function.\r\n     */\r\n    ToggleShowFoldersFirst: defineFileAction({\r\n        id: 'toggle_show_folders_first',\r\n        option: {\r\n            id: OptionIds.ShowFoldersFirst,\r\n            defaultValue: true,\r\n        },\r\n        button: {\r\n            name: 'Show folders first',\r\n            toolbar: true,\r\n            group: 'Options',\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that focuses the search input when it is dispatched.\r\n     */\r\n    FocusSearchInput: defineFileAction(\r\n        {\r\n            id: 'focus_search_input',\r\n            hotkeys: ['ctrl+f'],\r\n        } as const,\r\n        ({ getReduxState }) => {\r\n            const focusSearchInput = selectFocusSearchInput(getReduxState());\r\n            if (focusSearchInput) focusSearchInput();\r\n        }\r\n    ),\r\n    /**\r\n     * Action that enables List view.\r\n     */\r\n    ToggleDarkMode: defineFileAction({\r\n        id: 'enable_dark_mode',\r\n        option: {\r\n            id: OptionIds.DarkMode,\r\n            defaultValue: false,\r\n        },\r\n        button: {\r\n            name: 'Enable dark mode',\r\n            toolbar: true,\r\n            icon: ChonkyIconName.list,\r\n            iconOnly: true,\r\n        },\r\n    } as const),\r\n};\r\n","import { ChonkyIconName } from '../types/icons.types';\r\nimport { defineFileAction } from '../util/helpers';\r\n\r\nexport const ExtraActions = {\r\n    /**\r\n     * Action that adds a button and shortcut to copy files.\r\n     */\r\n    CopyFiles: defineFileAction({\r\n        id: 'copy_files',\r\n        requiresSelection: true,\r\n        hotkeys: ['ctrl+c'],\r\n        button: {\r\n            name: 'Copy selection',\r\n            toolbar: true,\r\n            contextMenu: true,\r\n            group: 'Actions',\r\n            icon: ChonkyIconName.copy,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that adds a button to create a new folder.\r\n     */\r\n    CreateFolder: defineFileAction({\r\n        id: 'create_folder',\r\n        button: {\r\n            name: 'Create folder',\r\n            toolbar: true,\r\n            tooltip: 'Create a folder',\r\n            icon: ChonkyIconName.folderCreate,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that adds a button to upload files.\r\n     */\r\n    UploadFiles: defineFileAction({\r\n        id: 'upload_files',\r\n        button: {\r\n            name: 'Upload files',\r\n            toolbar: true,\r\n            tooltip: 'Upload files',\r\n            icon: ChonkyIconName.upload,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that adds a button to download files.\r\n     */\r\n    DownloadFiles: defineFileAction({\r\n        id: 'download_files',\r\n        requiresSelection: true,\r\n        button: {\r\n            name: 'Download files',\r\n            toolbar: true,\r\n            contextMenu: true,\r\n            group: 'Actions',\r\n            icon: ChonkyIconName.download,\r\n        },\r\n    } as const),\r\n    /**\r\n     * Action that adds a button and shortcut to delete files.\r\n     */\r\n    DeleteFiles: defineFileAction({\r\n        id: 'delete_files',\r\n        requiresSelection: true,\r\n        hotkeys: ['delete'],\r\n        button: {\r\n            name: 'Delete files',\r\n            toolbar: true,\r\n            contextMenu: true,\r\n            group: 'Actions',\r\n            icon: ChonkyIconName.trash,\r\n        },\r\n    } as const),\r\n};\r\n","import { DefaultActions } from './default';\r\nimport { EssentialActions } from './essential';\r\nimport { ExtraActions } from './extra';\r\n\r\nexport { OptionIds } from './option-ids';\r\n\r\nexport const ChonkyActions = {\r\n    ...EssentialActions,\r\n    ...DefaultActions,\r\n    ...ExtraActions,\r\n};\r\n\r\nexport const EssentialFileActions = [\r\n    ChonkyActions.MouseClickFile,\r\n    ChonkyActions.KeyboardClickFile,\r\n    ChonkyActions.StartDragNDrop,\r\n    ChonkyActions.EndDragNDrop,\r\n    ChonkyActions.MoveFiles,\r\n    ChonkyActions.ChangeSelection,\r\n    ChonkyActions.OpenFiles,\r\n    ChonkyActions.OpenParentFolder,\r\n    ChonkyActions.OpenFileContextMenu,\r\n];\r\n\r\nexport const DefaultFileActions = [\r\n    ChonkyActions.OpenSelection,\r\n    ChonkyActions.SelectAllFiles,\r\n    ChonkyActions.ClearSelection,\r\n    ChonkyActions.EnableListView,\r\n    // TODO: Don't enable until compact view is fully supported\r\n    // ChonkyActions.EnableCompactView,\r\n    ChonkyActions.EnableGridView,\r\n    ChonkyActions.SortFilesByName,\r\n    ChonkyActions.SortFilesBySize,\r\n    ChonkyActions.SortFilesByDate,\r\n    ChonkyActions.ToggleHiddenFiles,\r\n    ChonkyActions.ToggleShowFoldersFirst,\r\n    ChonkyActions.FocusSearchInput,\r\n];\r\n","import { ChonkyActions } from '../action-definitions/index';\r\nimport { RootState } from '../types/redux.types';\r\nimport { SortOrder } from '../types/sort.types';\r\n\r\nexport const initialRootState: RootState = {\r\n    instanceId: 'CHONKY_INVALID_ID', // should be overwritten by preloaded state\r\n\r\n    externalFileActionHandler: null,\r\n\r\n    rawFileActions: [],\r\n    fileActionsErrorMessages: [],\r\n    fileActionMap: {},\r\n    fileActionIds: [],\r\n    toolbarItems: [],\r\n    contextMenuItems: [],\r\n\r\n    rawFolderChain: null,\r\n    folderChainErrorMessages: [],\r\n    folderChain: [],\r\n\r\n    rawFiles: [],\r\n    filesErrorMessages: [],\r\n    fileMap: {},\r\n    fileIds: [],\r\n    cleanFileIds: [],\r\n\r\n    sortedFileIds: [],\r\n    hiddenFileIdMap: {},\r\n\r\n    focusSearchInput: null,\r\n    searchString: '',\r\n    searchMode: 'currentFolder',\r\n\r\n    selectionMap: {},\r\n    disableSelection: false,\r\n\r\n    fileViewConfig: ChonkyActions.EnableGridView.fileViewConfig,\r\n\r\n    sortActionId: null,\r\n    sortOrder: SortOrder.ASC,\r\n\r\n    optionMap: {},\r\n\r\n    thumbnailGenerator: null,\r\n    doubleClickDelay: 300,\r\n    disableDragAndDrop: false,\r\n    clearSelectionOnOutsideClick: true,\r\n\r\n    lastClick: null,\r\n\r\n    contextMenuMounted: false,\r\n    contextMenuConfig: null,\r\n};\r\n","import { Nilable, Nullable } from 'tsdef';\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { GenericFileActionHandler } from '../types/action-handler.types';\r\nimport { FileActionMenuItem } from '../types/action-menus.types';\r\nimport { FileAction, FileActionMap } from '../types/action.types';\r\nimport { ContextMenuConfig } from '../types/context-menu.types';\r\nimport { FileViewConfig } from '../types/file-view.types';\r\nimport { FileArray, FileIdTrueMap, FileMap } from '../types/file.types';\r\nimport { OptionMap } from '../types/options.types';\r\nimport { RootState } from '../types/redux.types';\r\nimport { SortOrder } from '../types/sort.types';\r\nimport { ThumbnailGenerator } from '../types/thumbnails.types';\r\nimport { FileHelper } from '../util/file-helper';\r\nimport { sanitizeInputArray } from './files-transforms';\r\nimport { initialRootState } from './state';\r\n\r\nconst reducers = {\r\n    setExternalFileActionHandler(\r\n        state: RootState,\r\n        action: PayloadAction<Nilable<GenericFileActionHandler<FileAction>>>\r\n    ) {\r\n        state.externalFileActionHandler = action.payload ?? null;\r\n    },\r\n    setRawFileActions(state: RootState, action: PayloadAction<FileAction[] | any>) {\r\n        state.rawFileActions = action.payload;\r\n    },\r\n    setFileActionsErrorMessages(state: RootState, action: PayloadAction<string[]>) {\r\n        state.fileActionsErrorMessages = action.payload;\r\n    },\r\n    setFileActions(state: RootState, action: PayloadAction<FileAction[]>) {\r\n        const fileActionMap: FileActionMap = {};\r\n        action.payload.map(a => (fileActionMap[a.id] = a));\r\n        const fileIds = action.payload.map(a => a.id);\r\n\r\n        state.fileActionMap = fileActionMap as FileMap;\r\n        state.fileActionIds = fileIds;\r\n    },\r\n    updateFileActionMenuItems(state: RootState, action: PayloadAction<[FileActionMenuItem[], FileActionMenuItem[]]>) {\r\n        [state.toolbarItems, state.contextMenuItems] = action.payload;\r\n    },\r\n    setRawFolderChain(state: RootState, action: PayloadAction<FileArray | any>) {\r\n        const rawFolderChain = action.payload;\r\n        const { sanitizedArray: folderChain, errorMessages } = sanitizeInputArray('folderChain', rawFolderChain);\r\n        state.rawFolderChain = rawFolderChain;\r\n        state.folderChain = folderChain;\r\n        state.folderChainErrorMessages = errorMessages;\r\n    },\r\n    setRawFiles(state: RootState, action: PayloadAction<FileArray | any>) {\r\n        const rawFiles = action.payload;\r\n        const { sanitizedArray: files, errorMessages } = sanitizeInputArray('files', rawFiles);\r\n        state.rawFiles = rawFiles;\r\n        state.filesErrorMessages = errorMessages;\r\n\r\n        const fileMap: FileMap = {};\r\n        files.forEach(f => {\r\n            if (f) fileMap[f.id] = f;\r\n        });\r\n        const fileIds = files.map(f => (f ? f.id : null));\r\n        const cleanFileIds = fileIds.filter(f => !!f) as string[];\r\n\r\n        state.fileMap = fileMap;\r\n        state.fileIds = fileIds;\r\n        state.cleanFileIds = cleanFileIds;\r\n\r\n        // Cleanup selection\r\n        for (const selectedFileId of Object.keys(state.selectionMap)) {\r\n            if (!fileMap[selectedFileId]) {\r\n                delete state.selectionMap[selectedFileId];\r\n            }\r\n        }\r\n    },\r\n    setSortedFileIds(state: RootState, action: PayloadAction<Nullable<string>[]>) {\r\n        state.sortedFileIds = action.payload;\r\n    },\r\n    setHiddenFileIds(state: RootState, action: PayloadAction<FileIdTrueMap>) {\r\n        state.hiddenFileIdMap = action.payload;\r\n\r\n        // Cleanup selection\r\n        for (const selectedFileId of Object.keys(state.selectionMap)) {\r\n            if (state.hiddenFileIdMap[selectedFileId]) {\r\n                delete state.selectionMap[selectedFileId];\r\n            }\r\n        }\r\n    },\r\n    setFocusSearchInput(state: RootState, action: PayloadAction<Nullable<() => void>>) {\r\n        state.focusSearchInput = action.payload;\r\n    },\r\n    setSearchString(state: RootState, action: PayloadAction<string>) {\r\n        state.searchString = action.payload;\r\n    },\r\n    selectAllFiles(state: RootState) {\r\n        state.fileIds\r\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id]))\r\n            .map(id => (id ? (state.selectionMap[id] = true) : null));\r\n    },\r\n    selectFiles(state: RootState, action: PayloadAction<{ fileIds: string[]; reset: boolean }>) {\r\n        if (state.disableSelection) return;\r\n        if (action.payload.reset) state.selectionMap = {};\r\n        action.payload.fileIds\r\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id]))\r\n            .map(id => (state.selectionMap[id] = true));\r\n    },\r\n    toggleSelection(state: RootState, action: PayloadAction<{ fileId: string; exclusive: boolean }>) {\r\n        if (state.disableSelection) return;\r\n        const oldValue = !!state.selectionMap[action.payload.fileId];\r\n        if (action.payload.exclusive) state.selectionMap = {};\r\n        if (oldValue) delete state.selectionMap[action.payload.fileId];\r\n        else if (FileHelper.isSelectable(state.fileMap[action.payload.fileId])) {\r\n            state.selectionMap[action.payload.fileId] = true;\r\n        }\r\n    },\r\n    clearSelection(state: RootState) {\r\n        if (state.disableSelection) return;\r\n        if (Object.keys(state.selectionMap).length !== 0) state.selectionMap = {};\r\n    },\r\n    setSelectionDisabled(state: RootState, action: PayloadAction<boolean>) {\r\n        state.disableSelection = action.payload;\r\n        if (Object.keys(state.selectionMap).length !== 0) state.selectionMap = {};\r\n    },\r\n    setFileViewConfig(state: RootState, action: PayloadAction<FileViewConfig>) {\r\n        state.fileViewConfig = action.payload;\r\n    },\r\n    setSort(state: RootState, action: PayloadAction<{ actionId: string; order: SortOrder }>) {\r\n        state.sortActionId = action.payload.actionId;\r\n        state.sortOrder = action.payload.order;\r\n    },\r\n    setOptionDefaults(state: RootState, action: PayloadAction<OptionMap>) {\r\n        for (const optionId of Object.keys(action.payload)) {\r\n            if (optionId in state.optionMap) continue;\r\n            state.optionMap[optionId] = action.payload[optionId];\r\n        }\r\n    },\r\n    toggleOption(state: RootState, action: PayloadAction<string>) {\r\n        state.optionMap[action.payload] = !state.optionMap[action.payload];\r\n    },\r\n    setThumbnailGenerator(state: RootState, action: PayloadAction<Nullable<ThumbnailGenerator>>) {\r\n        state.thumbnailGenerator = action.payload;\r\n    },\r\n    setDoubleClickDelay(state: RootState, action: PayloadAction<number>) {\r\n        state.doubleClickDelay = action.payload;\r\n    },\r\n    setDisableDragAndDrop(state: RootState, action: PayloadAction<boolean>) {\r\n        state.disableDragAndDrop = action.payload;\r\n    },\r\n    setClearSelectionOnOutsideClick(state: RootState, action: PayloadAction<boolean>) {\r\n        state.clearSelectionOnOutsideClick = action.payload;\r\n    },\r\n    setLastClickIndex(state: RootState, action: PayloadAction<Nullable<{ index: number; fileId: string }>>) {\r\n        state.lastClick = action.payload;\r\n    },\r\n    setContextMenuMounted(state: RootState, action: PayloadAction<boolean>) {\r\n        state.contextMenuMounted = action.payload;\r\n    },\r\n    showContextMenu(state: RootState, action: PayloadAction<ContextMenuConfig>) {\r\n        state.contextMenuConfig = action.payload;\r\n    },\r\n    hideContextMenu(state: RootState) {\r\n        if (!state.contextMenuConfig) return;\r\n        state.contextMenuConfig = null;\r\n    },\r\n};\r\n\r\nexport const { actions: reduxActions, reducer: rootReducer } = createSlice({\r\n    name: 'root',\r\n    initialState: initialRootState,\r\n    reducers,\r\n});\r\n","import { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport { RootState } from '../types/redux.types';\r\nimport { useStaticValue } from '../util/hooks-helpers';\r\nimport { rootReducer } from './reducers';\r\nimport { initialRootState } from './state';\r\nimport { useStoreWatchers } from './watchers';\r\n\r\nexport const useChonkyStore = (chonkyInstanceId: string) => {\r\n    const store = useStaticValue(() => {\r\n        const preloadedState: RootState = {\r\n            ...initialRootState,\r\n            instanceId: chonkyInstanceId,\r\n        };\r\n\r\n        return configureStore({\r\n            preloadedState: preloadedState as any,\r\n            reducer: rootReducer,\r\n            middleware: getDefaultMiddleware =>\r\n                getDefaultMiddleware({\r\n                    serializableCheck: false,\r\n                }),\r\n            devTools: { name: `chonky_${chonkyInstanceId}` },\r\n        });\r\n    });\r\n    useStoreWatchers(store);\r\n    return store;\r\n};\r\n\r\n/**\r\n * Hook that can be used with parametrized selectors.\r\n */\r\nexport const useParamSelector = <Args extends Array<any>, Value>(\r\n    parametrizedSelector: (...args: Args) => (state: RootState) => Value,\r\n    ...selectorParams: Args\r\n) => {\r\n    const selector = useCallback(\r\n        (state: RootState) => parametrizedSelector(...selectorParams)(state),\r\n        // eslint-disable-next-line\r\n        [parametrizedSelector, ...selectorParams]\r\n    );\r\n    return useSelector(selector);\r\n};\r\n\r\n/**\r\n * DTE - DispatchThunkEffect. This method is used to decrease code duplication in\r\n * main Chonky method.\r\n */\r\nexport const useDTE = <Args extends Array<any>>(actionCreator: (...args: Args) => any, ...selectorParams: Args) => {\r\n    const dispatch = useDispatch();\r\n    useEffect(\r\n        () => {\r\n            dispatch(actionCreator(...selectorParams));\r\n        },\r\n        // eslint-disable-next-line\r\n        [dispatch, actionCreator, ...selectorParams]\r\n    );\r\n};\r\n\r\nexport const usePropReduxUpdate = <Payload extends any>(actionCreator: (payload: Payload) => any, payload: Payload) => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(actionCreator(payload));\r\n    }, [dispatch, actionCreator, payload]);\r\n};\r\n","import { useEffect } from 'react';\r\nimport watch from 'redux-watch';\r\n\r\nimport { Store } from '@reduxjs/toolkit';\r\n\r\nimport { ChonkyActions } from '../action-definitions';\r\nimport { RootState } from '../types/redux.types';\r\nimport { FileSelection } from '../types/selection.types';\r\nimport { selectSelectedFileIds, selectSelectionMap } from './selectors';\r\nimport { thunkRequestFileAction } from './thunks/dispatchers.thunks';\r\n\r\nexport const useStoreWatchers = (store: Store<RootState>) => {\r\n    useEffect(() => {\r\n        const selectionWatcher = watch(() => selectSelectionMap(store.getState()));\r\n        const onSelectionChange = (\r\n            newSelection: FileSelection,\r\n            oldSelection: FileSelection\r\n        ) => {\r\n            // We don't check for deep equality here as we expect the\r\n            // reducers to prevent all unnecessary updates.\r\n            if (newSelection === oldSelection) return;\r\n\r\n            // Notify users the selection has changed.\r\n            const selectedFilesIds = selectSelectedFileIds(store.getState());\r\n            const selection = new Set<string>(selectedFilesIds);\r\n            store.dispatch(\r\n                thunkRequestFileAction(ChonkyActions.ChangeSelection, {\r\n                    selection,\r\n                }) as any\r\n            );\r\n        };\r\n\r\n        const unsubscribeCallbacks = [\r\n            store.subscribe(selectionWatcher(onSelectionChange)),\r\n        ];\r\n        return () => {\r\n            for (const unsubscribe of unsubscribeCallbacks) unsubscribe();\r\n        };\r\n    }, [store]);\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { ChonkyIconProps } from '../../types/icons.types';\r\n\r\nexport const ChonkyIconPlaceholder: React.FC<ChonkyIconProps> = () => {\r\n    // This component should not be rendered unless the user has misconfigured Chonky\r\n    const title =\r\n        'No icon component found. Please follow Chonky installation instructions to ' +\r\n        'provide a pre-made icon component (or a custom icon).';\r\n    return <span title={title}>⚠️</span>;\r\n};\r\n","import { ChonkyActions } from '../action-definitions/index';\r\nimport { ChonkyIconPlaceholder } from '../components/internal/ChonkyIconPlaceholder';\r\nimport { FileBrowserProps } from '../types/file-browser.types';\r\n\r\nexport type ChonkyConfig = Pick<\r\n    FileBrowserProps,\r\n    | 'fileActions'\r\n    | 'onFileAction'\r\n    | 'thumbnailGenerator'\r\n    | 'doubleClickDelay'\r\n    | 'disableSelection'\r\n    | 'disableDefaultFileActions'\r\n    | 'disableDragAndDrop'\r\n    | 'disableDragAndDropProvider'\r\n    | 'defaultSortActionId'\r\n    | 'defaultFileViewActionId'\r\n    | 'clearSelectionOnOutsideClick'\r\n    | 'iconComponent'\r\n    | 'darkMode'\r\n    | 'i18n'\r\n>;\r\n\r\nexport const defaultConfig: ChonkyConfig = {\r\n    fileActions: null,\r\n    onFileAction: null,\r\n    thumbnailGenerator: null,\r\n    doubleClickDelay: 300,\r\n    disableSelection: false,\r\n    disableDefaultFileActions: false,\r\n    disableDragAndDrop: false,\r\n    disableDragAndDropProvider: false,\r\n    defaultSortActionId: ChonkyActions.SortFilesByName.id,\r\n    defaultFileViewActionId: ChonkyActions.EnableGridView.id,\r\n    clearSelectionOnOutsideClick: true,\r\n    iconComponent: ChonkyIconPlaceholder,\r\n    darkMode: false,\r\n    i18n: {},\r\n};\r\n\r\nexport const setChonkyDefaults = (config: Partial<ChonkyConfig>) => {\r\n    for (const key of Object.keys(defaultConfig)) {\r\n        if (key in config) {\r\n            defaultConfig[key as keyof ChonkyConfig] = config[\r\n                key as keyof ChonkyConfig\r\n            ] as any;\r\n        }\r\n    }\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2019\r\n * @license MIT\r\n */\r\n\r\nimport { createContext, ElementType, useMemo } from 'react';\r\n\r\nimport ExactTrie from 'exact-trie';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { ChonkyIconPlaceholder } from '../components/internal/ChonkyIconPlaceholder';\r\nimport { FileData } from '../types/file.types';\r\nimport { ChonkyIconName, ChonkyIconProps, FileIconData } from '../types/icons.types';\r\n\r\nexport const ChonkyIconContext = createContext<ElementType<ChonkyIconProps>>(ChonkyIconPlaceholder);\r\n\r\nexport const VideoExtensions: string[] = [\r\n    '3g2',\r\n    '3gp',\r\n    '3gpp',\r\n    'asf',\r\n    'asx',\r\n    'avi',\r\n    'dvb',\r\n    'f4v',\r\n    'fli',\r\n    'flv',\r\n    'fvt',\r\n    'h261',\r\n    'h263',\r\n    'h264',\r\n    'jpgm',\r\n    'jpgv',\r\n    'jpm',\r\n    'm1v',\r\n    'm2v',\r\n    'm4u',\r\n    'm4v',\r\n    'mj2',\r\n    'mjp2',\r\n    'mk3d',\r\n    'mks',\r\n    'mkv',\r\n    'mng',\r\n    'mov',\r\n    'movie',\r\n    'mp4',\r\n    'mp4v',\r\n    'mpe',\r\n    'mpeg',\r\n    'mpg',\r\n    'mpg4',\r\n    'mxu',\r\n    'ogv',\r\n    'pyv',\r\n    'qt',\r\n    'smv',\r\n    'ts',\r\n    'uvh',\r\n    'uvm',\r\n    'uvp',\r\n    'uvs',\r\n    'uvu',\r\n    'uvv',\r\n    'uvvh',\r\n    'uvvm',\r\n    'uvvp',\r\n    'uvvs',\r\n    'uvvu',\r\n    'uvvv',\r\n    'viv',\r\n    'vob',\r\n    'webm',\r\n    'wm',\r\n    'wmv',\r\n    'wmx',\r\n    'wvx',\r\n];\r\nexport const ImageExtensions: string[] = [\r\n    '3ds',\r\n    'apng',\r\n    'azv',\r\n    'bmp',\r\n    'bmp',\r\n    'btif',\r\n    'cgm',\r\n    'cmx',\r\n    'djv',\r\n    'djvu',\r\n    'drle',\r\n    'dwg',\r\n    'dxf',\r\n    'emf',\r\n    'exr',\r\n    'fbs',\r\n    'fh',\r\n    'fh4',\r\n    'fh5',\r\n    'fh7',\r\n    'fhc',\r\n    'fits',\r\n    'fpx',\r\n    'fst',\r\n    'g3',\r\n    'gif',\r\n    'heic',\r\n    'heics',\r\n    'heif',\r\n    'heifs',\r\n    'ico',\r\n    'ico',\r\n    'ief',\r\n    'jls',\r\n    'jng',\r\n    'jp2',\r\n    'jpe',\r\n    'jpeg',\r\n    'jpf',\r\n    'jpg',\r\n    'jpg2',\r\n    'jpm',\r\n    'jpx',\r\n    'jxr',\r\n    'ktx',\r\n    'mdi',\r\n    'mmr',\r\n    'npx',\r\n    'pbm',\r\n    'pct',\r\n    'pcx',\r\n    'pcx',\r\n    'pgm',\r\n    'pic',\r\n    'png',\r\n    'pnm',\r\n    'ppm',\r\n    'psd',\r\n    'pti',\r\n    'ras',\r\n    'rgb',\r\n    'rlc',\r\n    'sgi',\r\n    'sid',\r\n    'sub',\r\n    'svg',\r\n    'svgz',\r\n    't38',\r\n    'tap',\r\n    'tfx',\r\n    'tga',\r\n    'tif',\r\n    'tiff',\r\n    'uvg',\r\n    'uvi',\r\n    'uvvg',\r\n    'uvvi',\r\n    'vtf',\r\n    'wbmp',\r\n    'wdp',\r\n    'webp',\r\n    'wmf',\r\n    'xbm',\r\n    'xif',\r\n    'xpm',\r\n    'xwd',\r\n];\r\nexport const AudioExtensions: string[] = [\r\n    '3gpp',\r\n    'aac',\r\n    'adp',\r\n    'aif',\r\n    'aifc',\r\n    'aiff',\r\n    'au',\r\n    'caf',\r\n    'dra',\r\n    'dts',\r\n    'dtshd',\r\n    'ecelp4800',\r\n    'ecelp7470',\r\n    'ecelp9600',\r\n    'eol',\r\n    'flac',\r\n    'kar',\r\n    'lvp',\r\n    'm2a',\r\n    'm3a',\r\n    'm3u',\r\n    'm4a',\r\n    'm4a',\r\n    'mid',\r\n    'midi',\r\n    'mka',\r\n    'mp2',\r\n    'mp2a',\r\n    'mp3',\r\n    'mp3',\r\n    'mp4a',\r\n    'mpga',\r\n    'oga',\r\n    'ogg',\r\n    'pya',\r\n    'ra',\r\n    'ra',\r\n    'ram',\r\n    'rip',\r\n    'rmi',\r\n    'rmp',\r\n    's3m',\r\n    'sil',\r\n    'snd',\r\n    'spx',\r\n    'uva',\r\n    'uvva',\r\n    'wav',\r\n    'wav',\r\n    'wav',\r\n    'wax',\r\n    'weba',\r\n    'wma',\r\n    'xm',\r\n];\r\nexport const ColorsLight: string[] = [\r\n    '#bbbbbb',\r\n    '#d65c5c',\r\n    '#d6665c',\r\n    '#d6705c',\r\n    '#d67a5c',\r\n    '#d6855c',\r\n    '#d68f5c',\r\n    '#d6995c',\r\n    '#d6a35c',\r\n    '#d6ad5c',\r\n    '#d6b85c',\r\n    '#d6c25c',\r\n    '#d6cc5c',\r\n    '#d6d65c',\r\n    '#ccd65c',\r\n    '#c2d65c',\r\n    '#b8d65c',\r\n    '#add65c',\r\n    '#a3d65c',\r\n    '#99d65c',\r\n    '#8fd65c',\r\n    '#85d65c',\r\n    '#7ad65c',\r\n    '#70d65c',\r\n    '#66d65c',\r\n    '#5cd65c',\r\n    '#5cd666',\r\n    '#5cd670',\r\n    '#5cd67a',\r\n    '#5cd685',\r\n    '#5cd68f',\r\n    '#5cd699',\r\n    '#5cd6a3',\r\n    '#5cd6ad',\r\n    '#5cd6b8',\r\n    '#5cd6c2',\r\n    '#5cd6cc',\r\n    '#5cd6d6',\r\n    '#5cccd6',\r\n    '#5cc2d6',\r\n    '#5cb8d6',\r\n    '#5cadd6',\r\n    '#5ca3d6',\r\n    '#5c99d6',\r\n    '#5c8fd6',\r\n    '#5c85d6',\r\n    '#5c7ad6',\r\n    '#5c70d6',\r\n    '#5c66d6',\r\n    '#5c5cd6',\r\n    '#665cd6',\r\n    '#705cd6',\r\n    '#7a5cd6',\r\n    '#855cd6',\r\n    '#8f5cd6',\r\n    '#995cd6',\r\n    '#a35cd6',\r\n    '#ad5cd6',\r\n    '#b85cd6',\r\n    '#c25cd6',\r\n    '#cc5cd6',\r\n    '#d65cd6',\r\n    '#d65ccc',\r\n    '#d65cc2',\r\n    '#d65cb8',\r\n    '#d65cad',\r\n    '#d65ca3',\r\n    '#d65c99',\r\n    '#d65c8f',\r\n    '#d65c85',\r\n    '#d65c7a',\r\n    '#d65c70',\r\n    '#d65c66',\r\n];\r\nexport const ColorsDark: string[] = [\r\n    '#777',\r\n    '#8f3d3d',\r\n    '#8f443d',\r\n    '#8f4b3d',\r\n    '#8f523d',\r\n    '#8f583d',\r\n    '#8f5f3d',\r\n    '#8f663d',\r\n    '#8f6d3d',\r\n    '#8f743d',\r\n    '#8f7a3d',\r\n    '#8f813d',\r\n    '#8f883d',\r\n    '#8f8f3d',\r\n    '#888f3d',\r\n    '#818f3d',\r\n    '#7a8f3d',\r\n    '#748f3d',\r\n    '#6d8f3d',\r\n    '#668f3d',\r\n    '#5f8f3d',\r\n    '#588f3d',\r\n    '#528f3d',\r\n    '#4b8f3d',\r\n    '#448f3d',\r\n    '#3d8f3d',\r\n    '#3d8f44',\r\n    '#3d8f4b',\r\n    '#3d8f52',\r\n    '#3d8f58',\r\n    '#3d8f5f',\r\n    '#3d8f66',\r\n    '#3d8f6d',\r\n    '#3d8f74',\r\n    '#3d8f7a',\r\n    '#3d8f81',\r\n    '#3d8f88',\r\n    '#3d8f8f',\r\n    '#3d888f',\r\n    '#3d818f',\r\n    '#3d7a8f',\r\n    '#3d748f',\r\n    '#3d6d8f',\r\n    '#3d668f',\r\n    '#3d5f8f',\r\n    '#3d588f',\r\n    '#3d528f',\r\n    '#3d4b8f',\r\n    '#3d448f',\r\n    '#3d3d8f',\r\n    '#443d8f',\r\n    '#4b3d8f',\r\n    '#523d8f',\r\n    '#583d8f',\r\n    '#5f3d8f',\r\n    '#663d8f',\r\n    '#6d3d8f',\r\n    '#743d8f',\r\n    '#7a3d8f',\r\n    '#813d8f',\r\n    '#883d8f',\r\n    '#8f3d8f',\r\n    '#8f3d88',\r\n    '#8f3d81',\r\n    '#8f3d7a',\r\n    '#8f3d74',\r\n    '#8f3d6d',\r\n    '#8f3d66',\r\n    '#8f3d5f',\r\n    '#8f3d58',\r\n    '#8f3d52',\r\n    '#8f3d4b',\r\n    '#8f3d44',\r\n];\r\n\r\nconst getIconTrie = () => {\r\n    let colourIndex = 0;\r\n    const step = 5;\r\n\r\n    const IconsToExtensions = [\r\n        // Generic file types\r\n        [ChonkyIconName.license, ['license']],\r\n        [ChonkyIconName.config, ['sfk', 'ini', 'yml', 'toml', 'iml']],\r\n        [ChonkyIconName.model, ['3ds', 'obj', 'ply', 'fbx']],\r\n        [ChonkyIconName.database, ['csv', 'json', 'sql', 'sqlite', 'sqlite3', 'npy', 'npz', 'rec', 'idx', 'hdf5']],\r\n        [ChonkyIconName.text, ['txt', 'md', 'mdx']],\r\n        [ChonkyIconName.archive, ['zip', 'rar', 'tar', 'tar.gz', '7z']],\r\n        [ChonkyIconName.image, ImageExtensions],\r\n        [ChonkyIconName.video, VideoExtensions],\r\n        [ChonkyIconName.code, ['html', 'php', 'css', 'sass', 'scss', 'less', 'cpp', 'h', 'hpp', 'c', 'xml']],\r\n        [ChonkyIconName.info, ['bib', 'readme', 'nfo']],\r\n        [ChonkyIconName.key, ['pem', 'pub']],\r\n        [ChonkyIconName.lock, ['lock', 'lock.json', 'shrinkwrap.json']],\r\n        [ChonkyIconName.music, AudioExtensions],\r\n        [ChonkyIconName.terminal, ['run', 'sh']],\r\n        [ChonkyIconName.trash, ['.Trashes']],\r\n        [ChonkyIconName.users, ['authors', 'contributors']],\r\n\r\n        // OS file types\r\n        [ChonkyIconName.linux, ['AppImage']],\r\n        [ChonkyIconName.ubuntu, ['deb']],\r\n        [ChonkyIconName.windows, ['exe']],\r\n\r\n        // Programming language file types\r\n        [ChonkyIconName.rust, ['rs', 'rlib']],\r\n        [ChonkyIconName.python, ['py', 'ipynb']],\r\n        [ChonkyIconName.nodejs, ['js', 'jsx', 'ts', 'tsx', 'd.ts']],\r\n        [ChonkyIconName.php, ['php']],\r\n\r\n        // Development tools file types\r\n        [ChonkyIconName.git, ['.gitignore']],\r\n\r\n        // Brands file types\r\n        [ChonkyIconName.adobe, ['psd']],\r\n\r\n        // Other program file types\r\n        [ChonkyIconName.pdf, ['pdf']],\r\n        [ChonkyIconName.excel, ['xls', 'xlsx']],\r\n        [ChonkyIconName.word, ['doc', 'docx', 'odt']],\r\n        [ChonkyIconName.flash, ['swf']],\r\n    ] as const;\r\n\r\n    const exactTrie = new ExactTrie({ ignoreCase: true });\r\n    for (const pair of IconsToExtensions) {\r\n        const [icon, extensions] = pair;\r\n\r\n        for (let i = 0; i < extensions.length; ++i) {\r\n            colourIndex += step;\r\n            const colorCode = (colourIndex % (ColorsLight.length - 1)) + 1;\r\n            const iconData: FileIconData = {\r\n                icon,\r\n                colorCode,\r\n            };\r\n            exactTrie.put(extensions[i], iconData, true);\r\n        }\r\n    }\r\n\r\n    return exactTrie;\r\n};\r\n\r\nconst iconTrie = getIconTrie();\r\n\r\nexport const useIconData = (file: Nullable<FileData>): FileIconData => {\r\n    return useMemo(() => {\r\n        if (!file) return { icon: ChonkyIconName.loading, colorCode: 0 };\r\n        if (file.isDir === true) return { icon: ChonkyIconName.folder, colorCode: 0 };\r\n\r\n        const match = iconTrie.getWithCheckpoints(file.name, '.', true);\r\n        return match ? match : { icon: ChonkyIconName.file, colorCode: 32 };\r\n    }, [file]);\r\n};\r\n","import { Theme as MuiTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport classnames from 'classnames';\r\nimport { createUseStyles } from 'react-jss';\r\nimport { DeepPartial } from 'tsdef';\r\n\r\nexport const lightTheme = {\r\n    colors: {\r\n        debugRed: '#fabdbd',\r\n        debugBlue: '#bdd8fa',\r\n        debugGreen: '#d2fabd',\r\n        debugPurple: '#d2bdfa',\r\n        debugYellow: '#fae9bd',\r\n\r\n        textActive: '#09f',\r\n    },\r\n\r\n    fontSizes: {\r\n        rootPrimary: 15,\r\n    },\r\n\r\n    margins: {\r\n        rootLayoutMargin: 8,\r\n    },\r\n\r\n    toolbar: {\r\n        size: 30,\r\n        lineHeight: '30px', // `px` suffix is required for `line-height` fields to work\r\n        fontSize: 15,\r\n        buttonRadius: 4,\r\n    },\r\n\r\n    dnd: {\r\n        canDropColor: 'green',\r\n        cannotDropColor: 'red',\r\n        canDropMask: 'rgba(180, 235, 180, 0.75)',\r\n        cannotDropMask: 'rgba(235, 180, 180, 0.75)',\r\n        fileListCanDropMaskOne: 'rgba(180, 235, 180, 0.1)',\r\n        fileListCanDropMaskTwo: 'rgba(180, 235, 180, 0.2)',\r\n        fileListCannotDropMaskOne: 'rgba(235, 180, 180, 0.1)',\r\n        fileListCannotDropMaskTwo: 'rgba(235, 180, 180, 0.2)',\r\n    },\r\n\r\n    dragLayer: {\r\n        border: 'solid 2px #09f',\r\n        padding: '7px 10px',\r\n        borderRadius: 2,\r\n    },\r\n\r\n    fileList: {\r\n        desktopGridGutter: 8,\r\n        mobileGridGutter: 5,\r\n    },\r\n\r\n    gridFileEntry: {\r\n        childrenCountSize: '1.6em',\r\n        iconColorFocused: '#000',\r\n        iconSize: '2.4em',\r\n        iconColor: '#fff',\r\n        borderRadius: 5,\r\n        fontSize: 14,\r\n\r\n        fileColorTint: 'rgba(255, 255, 255, 0.4)',\r\n        folderBackColorTint: 'rgba(255, 255, 255, 0.1)',\r\n        folderFrontColorTint: 'rgba(255, 255, 255, 0.4)',\r\n    },\r\n\r\n    listFileEntry: {\r\n        propertyFontSize: 14,\r\n        iconFontSize: '1.1em',\r\n        iconBorderRadius: 5,\r\n        fontSize: 14,\r\n    },\r\n};\r\n\r\nexport type ChonkyTheme = typeof lightTheme;\r\n\r\nexport const darkThemeOverride: DeepPartial<ChonkyTheme> = {\r\n    gridFileEntry: {\r\n        fileColorTint: 'rgba(50, 50, 50, 0.4)',\r\n        folderBackColorTint: 'rgba(50, 50, 50, 0.4)',\r\n        folderFrontColorTint: 'rgba(50, 50, 50, 0.15)',\r\n    },\r\n};\r\n\r\nexport const mobileThemeOverride: DeepPartial<ChonkyTheme> = {\r\n    fontSizes: {\r\n        rootPrimary: 13,\r\n    },\r\n    margins: {\r\n        rootLayoutMargin: 4,\r\n    },\r\n    toolbar: {\r\n        size: 28,\r\n        lineHeight: '28px',\r\n        fontSize: 13,\r\n    },\r\n    gridFileEntry: {\r\n        fontSize: 13,\r\n    },\r\n    listFileEntry: {\r\n        propertyFontSize: 12,\r\n        iconFontSize: '1em',\r\n        fontSize: 13,\r\n    },\r\n};\r\n\r\nexport const useIsMobileBreakpoint = () => {\r\n    return useMediaQuery('(max-width:480px)');\r\n};\r\n\r\nexport const getStripeGradient = (colorOne: string, colorTwo: string) =>\r\n    'repeating-linear-gradient(' +\r\n    '45deg,' +\r\n    `${colorOne},` +\r\n    `${colorOne} 10px,` +\r\n    `${colorTwo} 0,` +\r\n    `${colorTwo} 20px` +\r\n    ')';\r\n\r\nexport const makeLocalChonkyStyles = <C extends string = string>(\r\n    styles: (theme: ChonkyTheme & MuiTheme) => any\r\n    // @ts-ignore\r\n): any => createUseStyles<ChonkyTheme, C>(styles);\r\n\r\nexport const makeGlobalChonkyStyles = <C extends string = string>(\r\n    makeStyles: (theme: ChonkyTheme & MuiTheme) => any\r\n) => {\r\n    const selectorMapping = {};\r\n    const makeGlobalStyles = (theme: ChonkyTheme) => {\r\n        const localStyles = makeStyles(theme as any);\r\n        const globalStyles = {};\r\n        const localSelectors = Object.keys(localStyles);\r\n        localSelectors.map(localSelector => {\r\n            const globalSelector = `chonky-${localSelector}`;\r\n            const jssSelector = `@global .${globalSelector}`;\r\n            // @ts-ignore\r\n            globalStyles[jssSelector] = localStyles[localSelector];\r\n            // @ts-ignore\r\n            selectorMapping[localSelector] = globalSelector;\r\n        });\r\n        return globalStyles;\r\n    };\r\n\r\n    // @ts-ignore\r\n    const useStyles = createUseStyles<ChonkyTheme, C>(makeGlobalStyles as any);\r\n    return (...args: any[]): any => {\r\n        const styles = useStyles(...args);\r\n        const classes = {};\r\n        Object.keys(selectorMapping).map(localSelector => {\r\n            // @ts-ignore\r\n            classes[localSelector] = selectorMapping[localSelector];\r\n        });\r\n        return { ...classes, ...styles };\r\n    };\r\n};\r\n\r\nexport const important = <T>(value: T) => [value, '!important'];\r\n\r\nexport const c = classnames;\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { reduxActions } from '../../redux/reducers';\r\nimport { initialRootState } from '../../redux/state';\r\nimport { useDTE, usePropReduxUpdate } from '../../redux/store';\r\nimport {\r\n    thunkActivateSortAction, thunkUpdateDefaultFileViewActionId, thunkUpdateRawFileActions\r\n} from '../../redux/thunks/file-actions.thunks';\r\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\r\nimport { defaultConfig } from '../../util/default-config';\r\nimport { useFileBrowserHandle } from '../../util/file-browser-handle';\r\nimport { getValueOrFallback } from '../../util/helpers';\r\n\r\nexport const ChonkyBusinessLogicInner = React.memo(\r\n    React.forwardRef<FileBrowserHandle, FileBrowserProps>((props, ref) => {\r\n        // ==== Update Redux state\r\n        usePropReduxUpdate(reduxActions.setRawFiles, props.files ?? initialRootState.rawFiles);\r\n        usePropReduxUpdate(reduxActions.setRawFolderChain, props.folderChain);\r\n        useDTE(\r\n            thunkUpdateRawFileActions,\r\n            getValueOrFallback(props.fileActions, defaultConfig.fileActions),\r\n            getValueOrFallback(props.disableDefaultFileActions, defaultConfig.disableDefaultFileActions)\r\n        );\r\n        useDTE(\r\n            reduxActions.setExternalFileActionHandler,\r\n            getValueOrFallback(props.onFileAction, defaultConfig.onFileAction) as any\r\n        );\r\n        useDTE(\r\n            reduxActions.setSelectionDisabled,\r\n            getValueOrFallback(props.disableSelection, defaultConfig.disableSelection, 'boolean')\r\n        );\r\n        useDTE(\r\n            thunkActivateSortAction,\r\n            getValueOrFallback(props.defaultSortActionId, defaultConfig.defaultSortActionId)\r\n        );\r\n        useDTE(\r\n            thunkUpdateDefaultFileViewActionId,\r\n            getValueOrFallback(props.defaultFileViewActionId, defaultConfig.defaultFileViewActionId, 'string')\r\n        );\r\n\r\n        useDTE(\r\n            reduxActions.setThumbnailGenerator,\r\n            getValueOrFallback(props.thumbnailGenerator, defaultConfig.thumbnailGenerator)\r\n        );\r\n        useDTE(\r\n            reduxActions.setDoubleClickDelay,\r\n            getValueOrFallback(props.doubleClickDelay, defaultConfig.doubleClickDelay, 'number')\r\n        );\r\n        useDTE(\r\n            reduxActions.setDisableDragAndDrop,\r\n            getValueOrFallback(props.disableDragAndDrop, defaultConfig.disableDragAndDrop, 'boolean')\r\n        );\r\n        useDTE(\r\n            reduxActions.setClearSelectionOnOutsideClick,\r\n            getValueOrFallback(\r\n                props.clearSelectionOnOutsideClick,\r\n                defaultConfig.clearSelectionOnOutsideClick,\r\n                'boolean'\r\n            )\r\n        );\r\n\r\n        // ==== Setup the imperative handle for external use\r\n        useFileBrowserHandle(ref);\r\n\r\n        return null;\r\n    })\r\n);\r\nChonkyBusinessLogicInner.displayName = 'ChonkyBusinessLogicInner';\r\n\r\nexport const ChonkyBusinessLogic = React.memo(ChonkyBusinessLogicInner);\r\nChonkyBusinessLogic.displayName = 'ChonkyBusinessLogic';\r\n","import React, { useImperativeHandle } from 'react';\r\nimport { useDispatch, useStore } from 'react-redux';\r\n\r\nimport { reduxActions } from '../redux/reducers';\r\nimport { selectSelectionMap } from '../redux/selectors';\r\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\r\nimport { FileAction } from '../types/action.types';\r\nimport { FileBrowserHandle } from '../types/file-browser.types';\r\nimport { RootState } from '../types/redux.types';\r\n\r\nexport const useFileBrowserHandle = (ref: React.Ref<FileBrowserHandle>) => {\r\n    const store = useStore<RootState>();\r\n    const dispatch = useDispatch();\r\n\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            getFileSelection(): Set<string> {\r\n                const selectionMap = selectSelectionMap(store.getState());\r\n                const selectionSet = new Set(Object.keys(selectionMap));\r\n                return selectionSet;\r\n            },\r\n            setFileSelection(selection, reset = true): void {\r\n                const fileIds = Array.from(selection);\r\n                dispatch(reduxActions.selectFiles({ fileIds, reset }));\r\n            },\r\n            requestFileAction<Action extends FileAction>(\r\n                action: Action,\r\n                payload: Action['__payloadType']\r\n            ): Promise<void> {\r\n                return Promise.resolve(\r\n                    dispatch(thunkRequestFileAction(action, payload))\r\n                ).then();\r\n            },\r\n        }),\r\n        [store, dispatch]\r\n    );\r\n};\r\n","import { useCallback, useContext } from 'react';\r\nimport { DndContext, useDrag, useDrop } from 'react-dnd';\r\n\r\nexport const useDndContextAvailable = () => {\r\n    const dndContext = useContext(DndContext);\r\n    const { dragDropManager } = dndContext;\r\n    return !!dragDropManager;\r\n};\r\n\r\nexport const useDragIfAvailable: typeof useDrag = (...args) => {\r\n    // This is an ugly hack to make `useDrag` not throw if a `DndContext` is not available.\r\n    // See: https://github.com/react-dnd/react-dnd/issues/2212\r\n    const dndContextAvailable = useDndContextAvailable();\r\n    const mockHook = useCallback(() => [{} as any, () => null, () => null], []);\r\n    // @ts-ignore\r\n    const useHook: typeof useDrag = dndContextAvailable ? useDrag : mockHook;\r\n    return useHook(...args);\r\n};\r\n\r\nexport const useDropIfAvailable: typeof useDrop = (...args) => {\r\n    const dndContextAvailable = useDndContextAvailable();\r\n    const mockHook = useCallback(() => [{} as any, () => null], []);\r\n    // @ts-ignore\r\n    const useHook: typeof useDrop = dndContextAvailable ? useDrop : mockHook;\r\n    return useHook(...args);\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\nimport { useDragLayer } from 'react-dnd';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { ChonkyDndFileEntryItem, ChonkyDndFileEntryType } from '../../types/dnd.types';\r\nimport { makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface DnDFileListDragLayerProps {}\r\n\r\nconst layerStyles: React.CSSProperties = {\r\n    position: 'fixed',\r\n    pointerEvents: 'none',\r\n    zIndex: 100,\r\n    left: 0,\r\n    top: 0,\r\n    width: '100%',\r\n    height: '100%',\r\n};\r\nconst getItemStyles = (\r\n    initialCursorOffset: Nullable<{ x: number; y: number }>,\r\n    initialFileOffset: Nullable<{ x: number; y: number }>,\r\n    currentFileOffset: Nullable<{ x: number; y: number }>\r\n) => {\r\n    if (!initialCursorOffset || !initialFileOffset || !currentFileOffset) {\r\n        return {\r\n            display: 'none',\r\n        };\r\n    }\r\n    const x = initialCursorOffset.x + (currentFileOffset.x - initialFileOffset.x);\r\n    const y = initialCursorOffset.y + (currentFileOffset.y - initialFileOffset.y);\r\n    const transform = `translate(${x}px, ${y}px)`;\r\n    return {\r\n        transform,\r\n        WebkitTransform: transform,\r\n    };\r\n};\r\n\r\nexport const DnDFileListDragLayer: React.FC<DnDFileListDragLayerProps> = () => {\r\n    const classes = useStyles();\r\n\r\n    const {\r\n        itemType,\r\n        item,\r\n        initialCursorOffset,\r\n        initialFileOffset,\r\n        currentFileOffset,\r\n        isDragging,\r\n    } = useDragLayer(monitor => ({\r\n        item: monitor.getItem() as ChonkyDndFileEntryItem,\r\n        itemType: monitor.getItemType(),\r\n        initialCursorOffset: monitor.getInitialClientOffset(),\r\n        initialFileOffset: monitor.getInitialSourceClientOffset(),\r\n        currentFileOffset: monitor.getSourceClientOffset(),\r\n        isDragging: monitor.isDragging(),\r\n    }));\r\n    if (!isDragging || itemType !== ChonkyDndFileEntryType || !item.payload) {\r\n        return null;\r\n    }\r\n\r\n    const selectionSize = item.payload.selectedFiles.length;\r\n    return (\r\n        <div style={layerStyles}>\r\n            <div\r\n                style={getItemStyles(\r\n                    initialCursorOffset,\r\n                    initialFileOffset,\r\n                    currentFileOffset\r\n                )}\r\n            >\r\n                <div className={classes.fileDragPreview}>\r\n                    <b>{item.payload.draggedFile.name}</b>\r\n                    {selectionSize > 1 && (\r\n                        <>\r\n                            {' and '}\r\n                            <strong>\r\n                                {selectionSize - 1} other file\r\n                                {selectionSize - 1 !== 1 ? 's' : ''}\r\n                            </strong>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    fileDragPreview: {\r\n        boxShadow: `2px 2px 5px ${theme.palette.divider}`,\r\n        backgroundColor: theme.palette.background.default,\r\n        borderRadius: theme.dragLayer.borderRadius,\r\n        fontSize: theme.fontSizes.rootPrimary,\r\n        color: theme.palette.text.primary,\r\n        padding: theme.dragLayer.padding,\r\n        border: theme.dragLayer.border,\r\n        display: 'inline-block',\r\n    },\r\n}));\r\n","import { DragObjectWithType } from 'react-dnd';\r\nimport { Nilable } from 'tsdef';\r\n\r\nimport { StartDragNDropPayload } from './action-payloads.types';\r\nimport { FileData } from './file.types';\r\n\r\nexport interface ChonkyDndDropResult {\r\n    dropTarget: Nilable<FileData> | any;\r\n    dropEffect: 'move' | 'copy';\r\n}\r\n\r\nexport type ChonkyDndFileEntryItem = DragObjectWithType & {\r\n    payload: StartDragNDropPayload;\r\n};\r\nexport const ChonkyDndFileEntryType = 'dnd-chonky-file-entry';\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport hotkeys from 'hotkeys-js';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { selectFileActionData } from '../../redux/selectors';\r\nimport { useParamSelector } from '../../redux/store';\r\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\r\n\r\nexport interface HotkeyListenerProps {\r\n    fileActionId: string;\r\n}\r\n\r\nexport const HotkeyListener: React.FC<HotkeyListenerProps> = React.memo(props => {\r\n    const { fileActionId } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const fileAction = useParamSelector(selectFileActionData, fileActionId);\r\n\r\n    useEffect(() => {\r\n        if (!fileAction || !fileAction.hotkeys || fileAction.hotkeys.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const hotkeysStr = fileAction.hotkeys.join(',');\r\n        const hotkeyCallback = (event: KeyboardEvent) => {\r\n            event.preventDefault();\r\n            dispatch(thunkRequestFileAction(fileAction, undefined));\r\n        };\r\n        hotkeys(hotkeysStr, hotkeyCallback);\r\n        return () => hotkeys.unbind(hotkeysStr, hotkeyCallback);\r\n    }, [dispatch, fileAction]);\r\n\r\n    return null;\r\n});\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport Box from '@mui/material/Box';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { reduxActions } from '../../redux/reducers';\r\nimport {\r\n    selectClearSelectionOnOutsideClick,\r\n    selectFileActionIds,\r\n    selectIsDnDDisabled,\r\n} from '../../redux/selectors';\r\nimport { useDndContextAvailable } from '../../util/dnd-fallback';\r\nimport { elementIsInsideButton } from '../../util/helpers';\r\nimport { makeGlobalChonkyStyles } from '../../util/styles';\r\nimport { useContextMenuTrigger } from '../external/FileContextMenu-hooks';\r\nimport { DnDFileListDragLayer } from '../file-list/DnDFileListDragLayer';\r\nimport { HotkeyListener } from './HotkeyListener';\r\n\r\nexport interface ChonkyPresentationLayerProps {}\r\n\r\nexport const ChonkyPresentationLayer: React.FC<ChonkyPresentationLayerProps> = ({\r\n    children,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const fileActionIds = useSelector(selectFileActionIds);\r\n    const dndDisabled = useSelector(selectIsDnDDisabled);\r\n    const clearSelectionOnOutsideClick = useSelector(\r\n        selectClearSelectionOnOutsideClick\r\n    );\r\n\r\n    // Deal with clicks outside of Chonky\r\n    const handleClickAway = useCallback(\r\n        (event: MouseEvent | TouchEvent) => {\r\n            if (!clearSelectionOnOutsideClick || elementIsInsideButton(event.target)) {\r\n                // We only clear out the selection on outside click if the click target\r\n                // was not a button. We don't want to clear out the selection when a\r\n                // button is clicked because Chonky users might want to trigger some\r\n                // selection-related action on that button click.\r\n                return;\r\n            }\r\n            dispatch(reduxActions.clearSelection());\r\n        },\r\n        [dispatch, clearSelectionOnOutsideClick]\r\n    );\r\n\r\n    // Generate necessary components\r\n    const hotkeyListenerComponents = useMemo(\r\n        () =>\r\n            fileActionIds.map(actionId => (\r\n                <HotkeyListener\r\n                    key={`file-action-listener-${actionId}`}\r\n                    fileActionId={actionId}\r\n                />\r\n            )),\r\n        [fileActionIds]\r\n    );\r\n\r\n    const dndContextAvailable = useDndContextAvailable();\r\n    const showContextMenu = useContextMenuTrigger();\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <ClickAwayListener onClickAway={handleClickAway}>\r\n            <Box className={classes.chonkyRoot} onContextMenu={showContextMenu}>\r\n                {!dndDisabled && dndContextAvailable && <DnDFileListDragLayer />}\r\n                {hotkeyListenerComponents}\r\n                {children ? children : null}\r\n            </Box>\r\n        </ClickAwayListener>\r\n    );\r\n};\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    chonkyRoot: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: `solid 1px ${theme.palette.divider}`,\r\n        padding: theme.margins.rootLayoutMargin,\r\n        fontSize: theme.fontSizes.rootPrimary,\r\n        color: theme.palette.text.primary,\r\n        touchAction: 'manipulation', // Disabling zoom on double tap\r\n        fontFamily: 'sans-serif',\r\n        flexDirection: 'column',\r\n        boxSizing: 'border-box',\r\n        textAlign: 'left',\r\n        borderRadius: 4,\r\n        display: 'flex',\r\n        height: '100%',\r\n\r\n        // Disabling select\r\n        webkitTouchCallout: 'none',\r\n        webkitUserSelect: 'none',\r\n        mozUserSelect: 'none',\r\n        msUserSelect: 'none',\r\n        userSelect: 'none',\r\n    },\r\n}));\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { ChonkyActions } from '../../action-definitions/index';\r\nimport { reduxActions } from '../../redux/reducers';\r\nimport { selectContextMenuMounted } from '../../redux/selectors';\r\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\r\nimport { findElementAmongAncestors } from '../../util/helpers';\r\nimport { useInstanceVariable } from '../../util/hooks-helpers';\r\n\r\nexport const findClosestChonkyFileId = (\r\n    element: HTMLElement | any\r\n): Nullable<string> => {\r\n    const fileEntryWrapperDiv = findElementAmongAncestors(\r\n        element,\r\n        (element: any) =>\r\n            element.tagName &&\r\n            element.tagName.toLowerCase() === 'div' &&\r\n            element.dataset &&\r\n            element.dataset.chonkyFileId\r\n    );\r\n    return fileEntryWrapperDiv ? fileEntryWrapperDiv.dataset.chonkyFileId! : null;\r\n};\r\n\r\nexport const useContextMenuTrigger = () => {\r\n    const dispatch = useDispatch();\r\n    const contextMenuMountedRef = useInstanceVariable(\r\n        useSelector(selectContextMenuMounted)\r\n    );\r\n    return useCallback(\r\n        (event: React.MouseEvent<HTMLDivElement>) => {\r\n            // Use default browser context menu when Chonky context menu component\r\n            // is not mounted.\r\n            if (!contextMenuMountedRef.current) return;\r\n            // Users can use Alt+Right Click to bring up browser's default\r\n            // context menu instead of Chonky's context menu.\r\n            if (event.altKey) return;\r\n\r\n            event.preventDefault();\r\n\r\n            const triggerFileId = findClosestChonkyFileId(event.target);\r\n            dispatch(\r\n                thunkRequestFileAction(ChonkyActions.OpenFileContextMenu, {\r\n                    clientX: event.clientX,\r\n                    clientY: event.clientY,\r\n                    triggerFileId,\r\n                })\r\n            );\r\n        },\r\n        [contextMenuMountedRef, dispatch]\r\n    );\r\n};\r\n\r\nexport const useContextMenuDismisser = () => {\r\n    const dispatch = useDispatch();\r\n    return useCallback(() => dispatch(reduxActions.hideContextMenu()), [dispatch]);\r\n};\r\n","import {\r\n    createTheme,\r\n    ThemeProvider as MuiThemeProvider,\r\n    StyledEngineProvider,\r\n} from '@mui/material/styles';\r\nimport merge from 'deepmerge';\r\nimport React, { ReactNode, useMemo } from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { IntlProvider } from 'react-intl';\r\nimport { ThemeProvider } from 'react-jss';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport shortid from 'shortid';\r\n\r\nimport { useChonkyStore } from '../../redux/store';\r\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\r\nimport { defaultConfig } from '../../util/default-config';\r\nimport { getValueOrFallback } from '../../util/helpers';\r\nimport { useStaticValue } from '../../util/hooks-helpers';\r\nimport { ChonkyFormattersContext, defaultFormatters } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport {\r\n    darkThemeOverride,\r\n    lightTheme,\r\n    mobileThemeOverride,\r\n    useIsMobileBreakpoint,\r\n} from '../../util/styles';\r\nimport { ChonkyBusinessLogic } from '../internal/ChonkyBusinessLogic';\r\nimport { ChonkyIconPlaceholder } from '../internal/ChonkyIconPlaceholder';\r\nimport { ChonkyPresentationLayer } from '../internal/ChonkyPresentationLayer';\r\n\r\n\r\n// if (process.env.NODE_ENV === 'development') {\r\n//     const whyDidYouRender = require('@welldone-software/why-did-you-render');\r\n//     whyDidYouRender(React, {\r\n//         trackAllPureComponents: true,\r\n//     });\r\n// }\r\n\r\nexport const FileBrowser = React.forwardRef<\r\n    FileBrowserHandle,\r\n    FileBrowserProps & { children?: ReactNode }\r\n>((props, ref) => {\r\n    const { instanceId, iconComponent, children } = props;\r\n    const disableDragAndDrop = getValueOrFallback(\r\n        props.disableDragAndDrop,\r\n        defaultConfig.disableDragAndDrop,\r\n        'boolean'\r\n    );\r\n    const disableDragAndDropProvider = getValueOrFallback(\r\n        props.disableDragAndDropProvider,\r\n        defaultConfig.disableDragAndDropProvider,\r\n        'boolean'\r\n    );\r\n    const darkMode = getValueOrFallback(\r\n        props.darkMode,\r\n        defaultConfig.darkMode,\r\n        'boolean'\r\n    );\r\n    const i18n = getValueOrFallback(props.i18n, defaultConfig.i18n);\r\n    const formatters = useMemo(() => ({ ...defaultFormatters, ...i18n?.formatters }), [\r\n        i18n,\r\n    ]);\r\n\r\n    const chonkyInstanceId = useStaticValue(() => instanceId ?? shortid.generate());\r\n    const store = useChonkyStore(chonkyInstanceId);\r\n\r\n    const isMobileBreakpoint = useIsMobileBreakpoint();\r\n    const theme = useMemo(() => {\r\n        const muiTheme = createTheme({\r\n            palette: {\r\n                mode: darkMode ? 'dark' : 'light',\r\n                background: {\r\n                    default: darkMode ? '#424242' : '#fff',\r\n                    paper:  darkMode ? '#424242' : '#fff'\r\n                }\r\n            }\r\n        });\r\n        const combinedTheme = merge(\r\n            muiTheme,\r\n            merge(lightTheme, darkMode ? darkThemeOverride : {})\r\n        );\r\n        return isMobileBreakpoint\r\n            ? merge(combinedTheme, mobileThemeOverride)\r\n            : combinedTheme;\r\n    }, [darkMode, isMobileBreakpoint]);\r\n\r\n    const chonkyComps = (\r\n        <>\r\n            <ChonkyBusinessLogic ref={ref} {...props} />\r\n            <ChonkyPresentationLayer>{children}</ChonkyPresentationLayer>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <IntlProvider locale=\"en\" defaultLocale=\"en\" {...i18n}>\r\n            <ChonkyFormattersContext.Provider value={formatters}>\r\n                <ReduxProvider store={store}>\r\n                    <ThemeProvider theme={theme}>\r\n                        <StyledEngineProvider injectFirst>\r\n                            <MuiThemeProvider theme={theme}>\r\n                                <ChonkyIconContext.Provider\r\n                                    value={\r\n                                        iconComponent ??\r\n                                        defaultConfig.iconComponent ??\r\n                                        ChonkyIconPlaceholder\r\n                                    }\r\n                                >\r\n                                    {disableDragAndDrop || disableDragAndDropProvider ? (\r\n                                        chonkyComps\r\n                                    ) : (\r\n                                        <DndProvider backend={HTML5Backend}>\r\n                                            {chonkyComps}\r\n                                        </DndProvider>\r\n                                    )}\r\n                                </ChonkyIconContext.Provider>\r\n                            </MuiThemeProvider>\r\n                        </StyledEngineProvider>\r\n                    </ThemeProvider>\r\n                </ReduxProvider>\r\n            </ChonkyFormattersContext.Provider>\r\n        </IntlProvider>\r\n    );\r\n});\r\nFileBrowser.displayName = 'FileBrowser';\r\n","import { useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { ChonkyActions } from '../../action-definitions/index';\r\nimport { selectFolderChain } from '../../redux/selectors';\r\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\r\nimport { FileData } from '../../types/file.types';\r\nimport { FileHelper } from '../../util/file-helper';\r\n\r\nexport interface FolderChainItem {\r\n    file: Nullable<FileData>;\r\n    disabled: boolean;\r\n    onClick?: () => void;\r\n}\r\n\r\nexport const useFolderChainItems = (): FolderChainItem[] => {\r\n    const folderChain = useSelector(selectFolderChain);\r\n    const dispatch = useDispatch();\r\n\r\n    const folderChainItems = useMemo(() => {\r\n        const items: FolderChainItem[] = [];\r\n        if (!folderChain) return items;\r\n\r\n        for (let i = 0; i < folderChain.length; ++i) {\r\n            const file = folderChain[i];\r\n            items.push({\r\n                file,\r\n                disabled: !file,\r\n                onClick:\r\n                    !FileHelper.isOpenable(file) || i === folderChain.length - 1\r\n                        ? undefined\r\n                        : () =>\r\n                              dispatch(\r\n                                  thunkRequestFileAction(ChonkyActions.OpenFiles, {\r\n                                      targetFile: file,\r\n                                      files: [file],\r\n                                  })\r\n                              ),\r\n            });\r\n        }\r\n        return items;\r\n    }, [dispatch, folderChain]);\r\n    return folderChainItems;\r\n};\r\n","import { MaybePromise, Nullable } from 'tsdef';\r\n\r\nimport { FileActionState } from './action-handler.types';\r\nimport { FileViewConfig } from './file-view.types';\r\nimport { FileFilter, FileMap } from './file.types';\r\nimport { ChonkyIconName } from './icons.types';\r\nimport { ChonkyDispatch, RootState } from './redux.types';\r\nimport { FileSortKeySelector } from './sort.types';\r\n\r\nexport interface FileAction {\r\n    /**\r\n     * Unique file action ID. If you set the action ID to one of the built-in Chonky\r\n     * action action IDs, you custom action definition will override the built-in\r\n     * definition.\r\n     */\r\n    id: string;\r\n    /**\r\n     * When set to `true`, the action will only be active (dispatchable) when user\r\n     * selects one or more files. If `fileFilter` is defined, it will be applied to\r\n     * selection before checking if its empty.\r\n     */\r\n    requiresSelection?: boolean; // Requires selection of 1+ files\r\n    /**\r\n     * A predicate that determines whether a file should be included in the selection\r\n     * for this action.\r\n     */\r\n    fileFilter?: FileFilter;\r\n    /**\r\n     * List of hotkeys that should trigger this action, defined using `hotkey-js`\r\n     * notation.\r\n     * @see https://www.npmjs.com/package/hotkeys-js\r\n     */\r\n    hotkeys?: string[] | readonly string[];\r\n    /**\r\n     * When button is defined and `toolbar` or `contextMenu` is set to `true`, a\r\n     * button will be added to the relevant UI component. Clicking on this button\r\n     * will active this action. The appearance of the button will change based on\r\n     * the action definition and the current Chonky state.\r\n     */\r\n    button?: FileActionButton;\r\n    /**\r\n     * When `sortKeySelector` is specified, the action becomes a sorting toggle. When\r\n     * this action is activated, it will sort files using the key selector, toggling\r\n     * between Ascending and Descending orders.\r\n     */\r\n    sortKeySelector?: FileSortKeySelector;\r\n    /**\r\n     * When `fileViewConfig` is specified, triggering this action will apply the\r\n     * provided config to Chonky's file view.\r\n     */\r\n    fileViewConfig?: FileViewConfig;\r\n    /**\r\n     * When `option` is specified, the action becomes an option toggle. When the action\r\n     * is activated, the boolean value of the option will be toggled.\r\n     */\r\n    option?: FileActionOption;\r\n    /**\r\n     * When selection transform is defined, activating this action will update the file\r\n     * selection. If the transform function returns `null`, selection will be left\r\n     * untouched.\r\n     */\r\n    selectionTransform?: FileSelectionTransform;\r\n    /**\r\n     * When effect is defined, it will be called right before dispatching the action to\r\n     * the user defined action handler. If the effect function returns a promise, Chonky\r\n     * will wait for the promise to resolve or fail before dispatching the action to the\r\n     * handler. If this function returns `true`, the file action will NOT be dispatched\r\n     * the the handler.\r\n     */\r\n    effect?: FileActionEffect;\r\n    /**\r\n     * When customVisibility is defined, it will change the display state of the file action\r\n     * The function must return the visibility as one of the CustomVisibilityState values:\r\n     *  - Hidden\r\n     *  - Disabled\r\n     *  - Default\r\n     *  - Active\r\n     */\r\n    customVisibility?: () => CustomVisibilityState;\r\n    /**\r\n     * Field used to infer the type of action payload. It is used solely for Typescript\r\n     * type inference and action validation.\r\n     */\r\n    __payloadType?: any;\r\n    /**\r\n     * Field used to infer the type of extra state for this action. It is used solely\r\n     * for Typescript type inference and action validation.\r\n     */\r\n    __extraStateType?: any;\r\n}\r\n\r\nexport interface FileActionButton {\r\n    name: string; // Button name\r\n    toolbar?: boolean; // Whether to show the button in the toolbar\r\n    contextMenu?: boolean; // Whether to show the button in the context menu\r\n    group?: string; // Button group (dropdown in toolbar or section in context menu)\r\n    tooltip?: string; // Help tooltip text\r\n    icon?: ChonkyIconName | string | any; // Icon name\r\n    iconOnly?: boolean; // Whether to only display the icon\r\n}\r\n\r\nexport interface FileActionOption {\r\n    id: string; // Unique option ID\r\n    defaultValue: boolean; // Whether the option is enabled by default (required)\r\n}\r\n\r\nexport type FileSelectionTransform = (data: {\r\n    prevSelection: Set<string>;\r\n    fileIds: ReadonlyArray<string>;\r\n    fileMap: Readonly<FileMap>;\r\n    hiddenFileIds: Set<string>;\r\n}) => Nullable<Set<string>>;\r\n\r\nexport type FileActionEffect<Action extends FileAction = any> = (data: {\r\n    action: Action;\r\n    payload: Action['__payloadType'];\r\n    state: FileActionState<{}>; // extra state is empty on purpose\r\n    reduxDispatch: ChonkyDispatch;\r\n    getReduxState: () => RootState;\r\n}) => MaybePromise<undefined | boolean | void>;\r\n\r\nexport type FileActionMap = { [actonId: string]: FileAction };\r\n\r\nexport enum CustomVisibilityState {\r\n    Hidden, \r\n    Disabled, \r\n    Default,\r\n    Active\r\n};\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\nimport { DragSourceMonitor, DropTargetMonitor } from 'react-dnd';\r\nimport { getEmptyImage } from 'react-dnd-html5-backend';\r\nimport { useDispatch, useSelector, useStore } from 'react-redux';\r\nimport { ExcludeKeys, Nullable } from 'tsdef';\r\n\r\nimport { EssentialActions } from '../action-definitions/essential';\r\nimport { ChonkyActions } from '../action-definitions/index';\r\nimport {\r\n    selectCurrentFolder,\r\n    selectFolderChain,\r\n    selectInstanceId,\r\n    selectSelectedFiles,\r\n} from '../redux/selectors';\r\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\r\nimport { StartDragNDropPayload } from '../types/action-payloads.types';\r\nimport {\r\n    ChonkyDndDropResult,\r\n    ChonkyDndFileEntryItem,\r\n    ChonkyDndFileEntryType,\r\n} from '../types/dnd.types';\r\nimport { DndEntryState } from '../types/file-list.types';\r\nimport { FileData } from '../types/file.types';\r\nimport { useDragIfAvailable, useDropIfAvailable } from './dnd-fallback';\r\nimport { FileHelper } from './file-helper';\r\nimport { useInstanceVariable } from './hooks-helpers';\r\n\r\nexport const useFileDrag = (file: Nullable<FileData>) => {\r\n    // Prepare the dnd payload\r\n    const store = useStore();\r\n    const fileRef = useInstanceVariable(file);\r\n    const getDndStartPayload = useCallback<() => StartDragNDropPayload>(() => {\r\n        const reduxState = store.getState();\r\n        return {\r\n            sourceInstanceId: selectInstanceId(reduxState),\r\n            source: selectCurrentFolder(reduxState),\r\n            // We force non-null type below because by convention, if drag & drop for\r\n            // this file was possible, it must have been non-null.\r\n            draggedFile: fileRef.current!,\r\n            selectedFiles: selectSelectedFiles(reduxState),\r\n        };\r\n    }, [store, fileRef]);\r\n\r\n    // For drag source\r\n    const dispatch = useDispatch();\r\n    const canDrag = useCallback(() => FileHelper.isDraggable(fileRef.current), [\r\n        fileRef,\r\n    ]);\r\n    const onDragStart = useCallback((): ChonkyDndFileEntryItem => {\r\n        const item: ChonkyDndFileEntryItem = {\r\n            type: ChonkyDndFileEntryType,\r\n            payload: getDndStartPayload(),\r\n        };\r\n        dispatch(thunkRequestFileAction(ChonkyActions.StartDragNDrop, item.payload));\r\n        return item;\r\n    }, [dispatch, getDndStartPayload]);\r\n    const onDragEnd = useCallback(\r\n        (item: ChonkyDndFileEntryItem, monitor: DragSourceMonitor) => {\r\n            const dropResult = monitor.getDropResult() as ChonkyDndDropResult;\r\n            if (\r\n                !FileHelper.isDraggable(item.payload.draggedFile) ||\r\n                !dropResult ||\r\n                !dropResult.dropTarget\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            dispatch(\r\n                thunkRequestFileAction(ChonkyActions.EndDragNDrop, {\r\n                    ...item.payload,\r\n                    destination: dropResult.dropTarget,\r\n                    copy: dropResult.dropEffect === 'copy',\r\n                })\r\n            );\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    // Create refs for react-dnd hooks\r\n    const item = useMemo<ChonkyDndFileEntryItem>(\r\n        () => ({\r\n            type: ChonkyDndFileEntryType,\r\n            // Payload is actually added in `onDragStart`\r\n            payload: {} as StartDragNDropPayload,\r\n        }),\r\n        []\r\n    );\r\n    const collect = useCallback(monitor => ({ isDragging: monitor.isDragging() }), []);\r\n    const [{ isDragging: dndIsDragging }, drag, preview] = useDragIfAvailable({\r\n        item,\r\n        canDrag,\r\n        begin: onDragStart,\r\n        // @ts-ignore\r\n        end: onDragEnd,\r\n        collect,\r\n    });\r\n\r\n    useEffect(() => {\r\n        // Set drag preview to an empty image because `DnDFileListDragLayer` will\r\n        // provide its own preview.\r\n        preview(getEmptyImage(), { captureDraggingState: true });\r\n    }, [preview]);\r\n\r\n    return { dndIsDragging, drag };\r\n};\r\n\r\ninterface UseFileDropParams {\r\n    file: Nullable<FileData>;\r\n    forceDisableDrop?: boolean;\r\n    includeChildrenDrops?: boolean;\r\n}\r\n\r\nexport const useFileDrop = ({\r\n    file,\r\n    forceDisableDrop,\r\n    includeChildrenDrops,\r\n}: UseFileDropParams) => {\r\n    const folderChainRef = useInstanceVariable(useSelector(selectFolderChain));\r\n    const onDrop = useCallback(\r\n        (_item: ChonkyDndFileEntryItem, monitor) => {\r\n            if (!monitor.canDrop()) return;\r\n            const customDropResult: ExcludeKeys<ChonkyDndDropResult, 'dropEffect'> = {\r\n                dropTarget: file,\r\n            };\r\n            return customDropResult;\r\n        },\r\n        [file]\r\n    );\r\n    const canDrop = useCallback(\r\n        (item: ChonkyDndFileEntryItem, monitor: DropTargetMonitor) => {\r\n            if (\r\n                forceDisableDrop ||\r\n                !FileHelper.isDroppable(file) ||\r\n                (!monitor.isOver({ shallow: true }) && !includeChildrenDrops)\r\n            ) {\r\n                return false;\r\n            }\r\n            const { source, draggedFile, selectedFiles } = item.payload;\r\n\r\n            // We prevent folders from being dropped into themselves. We also prevent\r\n            // any folder from current folder chain being moved - we can't move the\r\n            // folder that we are currently in.\r\n            const prohibitedFileIds = new Set<string>();\r\n            prohibitedFileIds.add(file.id);\r\n            folderChainRef.current.map(folder => {\r\n                if (folder) prohibitedFileIds.add(folder.id);\r\n            });\r\n            const movedFiles: FileData[] = [draggedFile, ...selectedFiles];\r\n            for (const currFile of movedFiles) {\r\n                if (prohibitedFileIds.has(currFile.id)) return false;\r\n            }\r\n\r\n            // Finally, prohibit files from being moved into their parent folder\r\n            // (which is a no-op).\r\n            return file.id !== source?.id;\r\n        },\r\n        [forceDisableDrop, file, includeChildrenDrops, folderChainRef]\r\n    );\r\n    const collect = useCallback(\r\n        monitor => ({\r\n            isOver: monitor.isOver(),\r\n            isOverCurrent: monitor.isOver({ shallow: true }),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n        []\r\n    );\r\n    const [\r\n        { isOver: dndIsOver, isOverCurrent: dndIsOverCurrent, canDrop: dndCanDrop },\r\n        drop,\r\n    ] = useDropIfAvailable({\r\n        accept: ChonkyDndFileEntryType,\r\n        drop: onDrop,\r\n        canDrop,\r\n        collect,\r\n    });\r\n    return { dndIsOver, dndIsOverCurrent, dndCanDrop, drop };\r\n};\r\n\r\nexport const useFileEntryDnD = (file: Nullable<FileData>) => {\r\n    const { dndIsDragging, drag } = useFileDrag(file);\r\n    const { dndIsOver, dndCanDrop, drop } = useFileDrop({ file });\r\n    const dndState = useMemo<DndEntryState>(\r\n        () => ({\r\n            dndIsDragging,\r\n            dndIsOver,\r\n            dndCanDrop,\r\n        }),\r\n        [dndCanDrop, dndIsDragging, dndIsOver]\r\n    );\r\n    return {\r\n        drop,\r\n        drag,\r\n        dndState,\r\n    };\r\n};\r\n\r\nexport const useDndHoverOpen = (file: Nullable<FileData>, dndState: DndEntryState) => {\r\n    const dispatch = useDispatch();\r\n    const currentFolderRef = useInstanceVariable(useSelector(selectCurrentFolder));\r\n    useEffect(() => {\r\n        let timeout: Nullable<any> = null;\r\n        if (\r\n            dndState.dndIsOver &&\r\n            FileHelper.isDndOpenable(file) &&\r\n            file.id !== currentFolderRef.current?.id\r\n        ) {\r\n            timeout = setTimeout(\r\n                () =>\r\n                    dispatch(\r\n                        thunkRequestFileAction(EssentialActions.OpenFiles, {\r\n                            targetFile: file,\r\n                            files: [file],\r\n                        })\r\n                    ),\r\n                // TODO: Make this timeout configurable\r\n                1500\r\n            );\r\n        }\r\n        return () => {\r\n            if (timeout) clearTimeout(timeout);\r\n        };\r\n    }, [dispatch, file, dndState.dndIsOver, currentFolderRef]);\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { makeLocalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface TextPlaceholderProps {\r\n    minLength: number;\r\n    maxLength: number;\r\n}\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n    return min + Math.floor(Math.random() * Math.floor(max - min));\r\n};\r\nexport const TextPlaceholder: React.FC<TextPlaceholderProps> = React.memo(props => {\r\n    const { minLength, maxLength } = props;\r\n\r\n    const placeholderLength = getRandomInt(minLength, maxLength);\r\n    const whitespace = '&nbsp;'.repeat(placeholderLength);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <span\r\n            className={classes.textPlaceholder}\r\n            dangerouslySetInnerHTML={{ __html: whitespace }}\r\n        />\r\n    );\r\n});\r\n\r\nconst useStyles = makeLocalChonkyStyles(() => ({\r\n    '@keyframes loading-placeholder': {\r\n        '0%': { opacity: 0.2 },\r\n        '50%': { opacity: 0.4 },\r\n        '100%': { opacity: 0.2 },\r\n    },\r\n    textPlaceholder: {\r\n        animationName: '$loading-placeholder',\r\n        animationIterationCount: 'infinite',\r\n        animationTimingFunction: 'linear',\r\n        animationDuration: '1.5s',\r\n        backgroundColor: '#ccc',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        borderRadius: 4,\r\n        maxWidth: '40%',\r\n        minWidth: 20,\r\n    },\r\n}));\r\n","import React, {\r\n    HTMLProps, useCallback, useContext, useEffect, useMemo, useRef, useState\r\n} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Nullable, Undefinable } from 'tsdef';\r\n\r\nimport { ChonkyActions } from '../../action-definitions/index';\r\nimport { selectThumbnailGenerator } from '../../redux/selectors';\r\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\r\nimport { DndEntryState } from '../../types/file-list.types';\r\nimport { FileData } from '../../types/file.types';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { FileHelper } from '../../util/file-helper';\r\nimport { ChonkyIconContext, ColorsDark, ColorsLight, useIconData } from '../../util/icon-helper';\r\nimport { Logger } from '../../util/logger';\r\nimport { TextPlaceholder } from '../external/TextPlaceholder';\r\nimport { KeyboardClickEvent, MouseClickEvent } from '../internal/ClickableWrapper';\r\nimport { FileEntryState } from './GridEntryPreview';\r\n\r\nexport const useFileEntryHtmlProps = (file: Nullable<FileData>): HTMLProps<HTMLDivElement> => {\r\n    return useMemo(() => {\r\n        const dataProps: { [prop: string]: Undefinable<string> } = {\r\n            'data-test-id': 'file-entry',\r\n            'data-chonky-file-id': file ? file.id : undefined,\r\n        };\r\n\r\n        return {\r\n            role: 'listitem',\r\n            ...dataProps,\r\n        };\r\n    }, [file]);\r\n};\r\n\r\nexport const useFileEntryState = (file: Nullable<FileData>, selected: boolean, focused: boolean) => {\r\n    const iconData = useIconData(file);\r\n    const { thumbnailUrl, thumbnailLoading } = useThumbnailUrl(file);\r\n\r\n    return useMemo<FileEntryState>(() => {\r\n        const fileColor = thumbnailUrl ? ColorsDark[iconData.colorCode] : ColorsLight[iconData.colorCode];\r\n        const iconSpin = thumbnailLoading || !file;\r\n        const icon = thumbnailLoading ? ChonkyIconName.loading : iconData.icon;\r\n\r\n        return {\r\n            childrenCount: FileHelper.getChildrenCount(file),\r\n            icon: file && file.icon !== undefined ? file.icon : icon,\r\n            iconSpin: iconSpin,\r\n            thumbnailUrl: thumbnailUrl,\r\n            color: file && file.color !== undefined ? file.color : fileColor,\r\n            selected: selected,\r\n            focused: !!focused,\r\n        };\r\n    }, [file, focused, iconData, selected, thumbnailLoading, thumbnailUrl]);\r\n};\r\n\r\nexport const useDndIcon = (dndState: DndEntryState) => {\r\n    let dndIconName: Nullable<ChonkyIconName> = null;\r\n    if (dndState.dndIsOver) {\r\n        const showDropIcon = dndState.dndCanDrop;\r\n        dndIconName = showDropIcon ? ChonkyIconName.dndCanDrop : ChonkyIconName.dndCannotDrop;\r\n    } else if (dndState.dndIsDragging) {\r\n        dndIconName = ChonkyIconName.dndDragging;\r\n    }\r\n\r\n    return dndIconName;\r\n};\r\n\r\nexport const useModifierIconComponents = (file: Nullable<FileData>) => {\r\n    const modifierIcons: ChonkyIconName[] = useMemo(() => {\r\n        const modifierIcons: ChonkyIconName[] = [];\r\n        if (FileHelper.isHidden(file)) modifierIcons.push(ChonkyIconName.hidden);\r\n        if (FileHelper.isSymlink(file)) modifierIcons.push(ChonkyIconName.symlink);\r\n        if (FileHelper.isEncrypted(file)) modifierIcons.push(ChonkyIconName.lock);\r\n        return modifierIcons;\r\n    }, [file]);\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n    const modifierIconComponents = useMemo(\r\n        () => modifierIcons.map((icon, index) => <ChonkyIcon key={`file-modifier-${index}`} icon={icon} />),\r\n        // For some reason ESLint marks `ChonkyIcon` as an unnecessary dependency,\r\n        // but we expect it can change at runtime so we disable the check.\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [ChonkyIcon, modifierIcons]\r\n    );\r\n    return modifierIconComponents;\r\n};\r\n\r\nconst _extname = (fileName: string) => {\r\n    const parts = fileName.split('.');\r\n    if (parts.length) {\r\n        return `.${parts[parts.length - 1]}`;\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const useFileNameComponent = (file: Nullable<FileData>) => {\r\n    return useMemo(() => {\r\n        if (!file) return <TextPlaceholder minLength={15} maxLength={20} />;\r\n\r\n        let name;\r\n        let extension = null;\r\n\r\n        const isDir = FileHelper.isDirectory(file);\r\n        if (isDir) {\r\n            name = file.name;\r\n        } else {\r\n            extension = file.ext ?? _extname(file.name);\r\n            name = file.name.substr(0, file.name.length - extension.length);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {name}\r\n                {extension && <span className=\"chonky-file-entry-description-title-extension\">{extension}</span>}\r\n            </>\r\n        );\r\n    }, [file]);\r\n};\r\n\r\nexport const useThumbnailUrl = (file: Nullable<FileData>) => {\r\n    const thumbnailGenerator = useSelector(selectThumbnailGenerator);\r\n    const [thumbnailUrl, setThumbnailUrl] = useState<Nullable<string>>(null);\r\n    const [thumbnailLoading, setThumbnailLoading] = useState<boolean>(false);\r\n    const loadingAttempts = useRef(0);\r\n\r\n    useEffect(() => {\r\n        let loadingCancelled = false;\r\n\r\n        if (file) {\r\n            if (thumbnailGenerator) {\r\n                if (loadingAttempts.current === 0) {\r\n                    setThumbnailLoading(true);\r\n                }\r\n                loadingAttempts.current++;\r\n                Promise.resolve()\r\n                    .then(() => thumbnailGenerator(file))\r\n                    .then((thumbnailUrl: any) => {\r\n                        if (loadingCancelled) return;\r\n                        setThumbnailLoading(false);\r\n\r\n                        if (thumbnailUrl && typeof thumbnailUrl === 'string') {\r\n                            setThumbnailUrl(thumbnailUrl);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if (!loadingCancelled) setThumbnailLoading(false);\r\n                        Logger.error(`User-defined \"thumbnailGenerator\" handler threw an error: ${error.message}`);\r\n                    });\r\n            } else if (file.thumbnailUrl) {\r\n                setThumbnailUrl(file.thumbnailUrl);\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            loadingCancelled = true;\r\n        };\r\n    }, [file, setThumbnailUrl, setThumbnailLoading, thumbnailGenerator]);\r\n\r\n    return { thumbnailUrl, thumbnailLoading };\r\n};\r\n\r\nexport const useFileClickHandlers = (file: Nullable<FileData>, displayIndex: number) => {\r\n    const dispatch = useDispatch();\r\n\r\n    // Prepare base handlers\r\n    const onMouseClick = useCallback(\r\n        (event: MouseClickEvent, clickType: 'single' | 'double') => {\r\n            if (!file) return;\r\n\r\n            dispatch(\r\n                thunkRequestFileAction(ChonkyActions.MouseClickFile, {\r\n                    clickType,\r\n                    file,\r\n                    fileDisplayIndex: displayIndex,\r\n                    altKey: event.altKey,\r\n                    ctrlKey: event.ctrlKey,\r\n                    shiftKey: event.shiftKey,\r\n                })\r\n            );\r\n        },\r\n        [dispatch, file, displayIndex]\r\n    );\r\n    const onKeyboardClick = useCallback(\r\n        (event: KeyboardClickEvent) => {\r\n            if (!file) return;\r\n\r\n            dispatch(\r\n                thunkRequestFileAction(ChonkyActions.KeyboardClickFile, {\r\n                    file,\r\n                    fileDisplayIndex: displayIndex,\r\n                    enterKey: event.enterKey,\r\n                    spaceKey: event.spaceKey,\r\n                    altKey: event.altKey,\r\n                    ctrlKey: event.ctrlKey,\r\n                    shiftKey: event.shiftKey,\r\n                })\r\n            );\r\n        },\r\n        [dispatch, file, displayIndex]\r\n    );\r\n\r\n    // Prepare single/double click handlers\r\n    const onSingleClick = useCallback((event: MouseClickEvent) => onMouseClick(event, 'single'), [onMouseClick]);\r\n    const onDoubleClick = useCallback((event: MouseClickEvent) => onMouseClick(event, 'double'), [onMouseClick]);\r\n\r\n    return {\r\n        onSingleClick,\r\n        onDoubleClick,\r\n        onKeyboardClick,\r\n    };\r\n};\r\n","import { useCallback, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { ChonkyActions } from '../action-definitions/index';\r\nimport {\r\n    selectFileActionData,\r\n    selectFileViewConfig,\r\n    selectOptionValue,\r\n    selectParentFolder,\r\n    selectSelectedFilesForActionCount,\r\n    selectSortActionId,\r\n    selectSortOrder,\r\n} from '../redux/selectors';\r\nimport { useParamSelector } from '../redux/store';\r\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\r\nimport { ChonkyIconName } from '../types/icons.types';\r\nimport { CustomVisibilityState } from '../types/action.types';\r\nimport { SortOrder } from '../types/sort.types';\r\nimport { FileHelper } from './file-helper';\r\n\r\nexport const useFileActionTrigger = (fileActionId: string) => {\r\n    const dispatch = useDispatch();\r\n    const fileAction = useParamSelector(selectFileActionData, fileActionId);\r\n    return useCallback(() => dispatch(thunkRequestFileAction(fileAction, undefined)), [\r\n        dispatch,\r\n        fileAction,\r\n    ]);\r\n};\r\n\r\nexport const useFileActionProps = (\r\n    fileActionId: string\r\n): { icon: Nullable<ChonkyIconName | string>; active: boolean; disabled: boolean } => {\r\n    const parentFolder = useSelector(selectParentFolder);\r\n    const fileViewConfig = useSelector(selectFileViewConfig);\r\n\r\n    const sortActionId = useSelector(selectSortActionId);\r\n    const sortOrder = useSelector(selectSortOrder);\r\n\r\n    const action = useParamSelector(selectFileActionData, fileActionId);\r\n    // @ts-ignore\r\n    const optionValue = useParamSelector(selectOptionValue, action?.option?.id);\r\n\r\n    const actionSelectionSize = useParamSelector(\r\n        selectSelectedFilesForActionCount,\r\n        fileActionId\r\n    );\r\n\r\n    const actionSelectionEmpty = actionSelectionSize === 0;\r\n\r\n    return useMemo(() => {\r\n        if (!action) return { icon: null, active: false, disabled: true };\r\n\r\n        let icon = action.button?.icon ?? null;\r\n        if (action.sortKeySelector) {\r\n            if (sortActionId === action.id) {\r\n                if (sortOrder === SortOrder.ASC) {\r\n                    icon = ChonkyIconName.sortAsc;\r\n                } else {\r\n                    icon = ChonkyIconName.sortDesc;\r\n                }\r\n            } else {\r\n                icon = ChonkyIconName.placeholder;\r\n            }\r\n        } else if (action.option) {\r\n            if (optionValue) {\r\n                icon = ChonkyIconName.toggleOn;\r\n            } else {\r\n                icon = ChonkyIconName.toggleOff;\r\n            }\r\n        }\r\n\r\n        const isSortButtonAndCurrentSort = action.id === sortActionId;\r\n        const isFileViewButtonAndCurrentView = action.fileViewConfig === fileViewConfig;\r\n        const isOptionAndEnabled = action.option ? !!optionValue : false;\r\n\r\n        let customDisabled = false;\r\n        let customActive = false;\r\n        if (action.customVisibility !== undefined) {\r\n            customDisabled = action.customVisibility() === CustomVisibilityState.Disabled;\r\n            customActive = action.customVisibility() === CustomVisibilityState.Active;\r\n        }\r\n        const active =\r\n            isSortButtonAndCurrentSort ||\r\n            isFileViewButtonAndCurrentView ||\r\n            isOptionAndEnabled ||\r\n            customActive;\r\n        \r\n        let disabled: boolean = (!!action.requiresSelection && actionSelectionEmpty) || customDisabled;\r\n\r\n        if (action.id === ChonkyActions.OpenParentFolder.id) {\r\n            // We treat `open_parent_folder` file action as a special case as it\r\n            // requires the parent folder to be present to work...\r\n            disabled = disabled || !FileHelper.isOpenable(parentFolder);\r\n        }\r\n\r\n        return { icon, active, disabled };\r\n    }, [\r\n        parentFolder,\r\n        fileViewConfig,\r\n        sortActionId,\r\n        sortOrder,\r\n        action,\r\n        optionValue,\r\n        actionSelectionEmpty,\r\n    ]);\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport Button from '@mui/material/Button';\r\nimport React, { useContext } from 'react';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { selectFileActionData } from '../../redux/selectors';\r\nimport { useParamSelector } from '../../redux/store';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { CustomVisibilityState } from '../../types/action.types';\r\nimport { useFileActionProps, useFileActionTrigger } from '../../util/file-actions';\r\nimport { useLocalizedFileActionStrings } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { c, important, makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface ToolbarButtonProps {\r\n    className?: string;\r\n    text: string;\r\n    tooltip?: string;\r\n    active?: boolean;\r\n    icon?: Nullable<ChonkyIconName | string>;\r\n    iconOnly?: boolean;\r\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n    disabled?: boolean;\r\n    dropdown?: boolean;\r\n}\r\n\r\nexport const ToolbarButton: React.FC<ToolbarButtonProps> = React.memo(props => {\r\n    const {\r\n        className: externalClassName,\r\n        text,\r\n        tooltip,\r\n        active,\r\n        icon,\r\n        iconOnly,\r\n        onClick,\r\n        disabled,\r\n        dropdown,\r\n    } = props;\r\n    const classes = useStyles();\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n\r\n    const iconComponent =\r\n        icon || iconOnly ? (\r\n            <div className={iconOnly ? '' : classes.iconWithText}>\r\n                <ChonkyIcon\r\n                    icon={icon ? icon : ChonkyIconName.fallbackIcon}\r\n                    fixedWidth={true}\r\n                />\r\n            </div>\r\n        ) : null;\r\n\r\n    const className = c({\r\n        [externalClassName ?? '']: true,\r\n        [classes.baseButton]: true,\r\n        [classes.iconOnlyButton]: iconOnly,\r\n        [classes.activeButton]: !!active,\r\n    });\r\n    return (\r\n        <Button\r\n            className={className}\r\n            onClick={onClick}\r\n            title={tooltip ? tooltip : text}\r\n            disabled={disabled || !onClick}\r\n        >\r\n            {iconComponent}\r\n            {text && !iconOnly && <span>{text}</span>}\r\n            {dropdown && (\r\n                <div className={classes.iconDropdown}>\r\n                    <ChonkyIcon\r\n                        icon={icon ? icon : ChonkyIconName.dropdown}\r\n                        fixedWidth={true}\r\n                    />\r\n                </div>\r\n            )}\r\n        </Button>\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    baseButton: {\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        textTransform: important('none'),\r\n        letterSpacing: important(0),\r\n        minWidth: important('auto'),\r\n        lineHeight: theme.toolbar.lineHeight,\r\n        height: theme.toolbar.size,\r\n        paddingBottom: important(0),\r\n        paddingTop: important(0),\r\n    },\r\n    iconWithText: {\r\n        marginRight: 8,\r\n    },\r\n    iconOnlyButton: {\r\n        width: theme.toolbar.size,\r\n        textAlign: 'center',\r\n    },\r\n    iconDropdown: {\r\n        fontSize: '0.7em',\r\n        marginLeft: 2,\r\n        marginTop: 1,\r\n    },\r\n    activeButton: {\r\n        color: important(theme.colors.textActive),\r\n    },\r\n}));\r\n\r\nexport interface SmartToolbarButtonProps {\r\n    fileActionId: string;\r\n}\r\n\r\nexport const SmartToolbarButton: React.FC<SmartToolbarButtonProps> = React.memo(\r\n    props => {\r\n        const { fileActionId } = props;\r\n\r\n        const action = useParamSelector(selectFileActionData, fileActionId);\r\n        const triggerAction = useFileActionTrigger(fileActionId);\r\n        const { icon, active, disabled } = useFileActionProps(fileActionId);\r\n        const { buttonName, buttonTooltip } = useLocalizedFileActionStrings(action);\r\n\r\n        if (!action) return null;\r\n        const { button } = action;\r\n        if (!button) return null;\r\n        if (action.customVisibility !== undefined && action.customVisibility() === CustomVisibilityState.Hidden) return null;\r\n\r\n        return (\r\n            <ToolbarButton\r\n                text={buttonName}\r\n                tooltip={buttonTooltip}\r\n                icon={icon}\r\n                iconOnly={button.iconOnly}\r\n                active={active}\r\n                onClick={triggerAction}\r\n                disabled={disabled}\r\n            />\r\n        );\r\n    }\r\n);\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { useContext, useMemo } from 'react';\r\n\r\nimport { DndEntryState } from '../../types/file-list.types';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { useDndHoverOpen, useFileDrop } from '../../util/dnd';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { c, important, makeLocalChonkyStyles } from '../../util/styles';\r\nimport { useDndIcon } from '../file-list/FileEntry-hooks';\r\nimport { FolderChainItem } from './FileNavbar-hooks';\r\nimport { ToolbarButton } from './ToolbarButton';\r\n\r\nexport interface FolderChainButtonProps {\r\n    first: boolean;\r\n    current: boolean;\r\n    item: FolderChainItem;\r\n}\r\n\r\nexport const FolderChainButton: React.FC<FolderChainButtonProps> = React.memo(\r\n    ({ first, current, item }) => {\r\n        const { file, disabled, onClick } = item;\r\n        const { dndIsOver, dndCanDrop, drop } = useFileDrop({\r\n            file,\r\n            forceDisableDrop: !file || current,\r\n        });\r\n        const dndState = useMemo<DndEntryState>(\r\n            () => ({\r\n                dndIsOver,\r\n                dndCanDrop,\r\n                dndIsDragging: false,\r\n            }),\r\n            [dndCanDrop, dndIsOver]\r\n        );\r\n        useDndHoverOpen(file, dndState);\r\n        const dndIconName = useDndIcon(dndState);\r\n        const ChonkyIcon = useContext(ChonkyIconContext);\r\n\r\n        const classes = useStyles(dndState);\r\n        const className = c({\r\n            [classes.baseBreadcrumb]: true,\r\n            [classes.disabledBreadcrumb]: disabled,\r\n            [classes.currentBreadcrumb]: current,\r\n        });\r\n        const text = file ? file.name : 'Loading...';\r\n        const icon =\r\n            first && file?.folderChainIcon === undefined\r\n                ? ChonkyIconName.folder\r\n                : file?.folderChainIcon;\r\n\r\n        return (\r\n            <div className={classes.buttonContainer} ref={file ? drop : null}>\r\n                {file && dndIconName && (\r\n                    <div className={classes.dndIndicator}>\r\n                        <ChonkyIcon icon={dndIconName} fixedWidth={true} />\r\n                    </div>\r\n                )}\r\n                <ToolbarButton\r\n                    icon={icon}\r\n                    className={className}\r\n                    text={text}\r\n                    disabled={disabled}\r\n                    onClick={onClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nconst useStyles = makeLocalChonkyStyles(theme => ({\r\n    buttonContainer: {\r\n        position: 'relative',\r\n    },\r\n    baseBreadcrumb: {\r\n        color: (dndState: DndEntryState) => {\r\n            let color = theme.palette.text.primary;\r\n            if (dndState.dndIsOver) {\r\n                color = dndState.dndCanDrop\r\n                    ? theme.dnd.canDropColor\r\n                    : theme.dnd.cannotDropColor;\r\n            }\r\n            return important(color);\r\n        },\r\n    },\r\n    disabledBreadcrumb: {\r\n        // Constant function here is on purpose. Without the function, the color here\r\n        // does not override the `baseBreadcrumb` color from above.\r\n        color: () => important(theme.palette.text.disabled),\r\n    },\r\n    currentBreadcrumb: {\r\n        textDecoration: important('underline'),\r\n    },\r\n    dndIndicator: {\r\n        color: (dndState: DndEntryState) =>\r\n            dndState.dndCanDrop ? theme.dnd.canDropColor : theme.dnd.cannotDropColor,\r\n        backgroundColor: (dndState: DndEntryState) =>\r\n            dndState.dndCanDrop ? theme.dnd.canDropMask : theme.dnd.cannotDropMask,\r\n        lineHeight: `calc(${theme.toolbar.lineHeight} - 6px)`,\r\n        transform: 'translateX(-50%) translateY(-50%)',\r\n        borderRadius: theme.toolbar.buttonRadius,\r\n        height: theme.toolbar.size - 6,\r\n        width: theme.toolbar.size - 6,\r\n        boxSizing: 'border-box',\r\n        position: 'absolute',\r\n        textAlign: 'center',\r\n        left: '50%',\r\n        top: '50%',\r\n        zIndex: 5,\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport React, { ReactElement, useMemo } from 'react';\r\n\r\nimport { ChonkyActions } from '../../action-definitions/index';\r\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\r\nimport { useFolderChainItems } from './FileNavbar-hooks';\r\nimport { FolderChainButton } from './FolderChainButton';\r\nimport { SmartToolbarButton } from './ToolbarButton';\r\n\r\nexport interface FileNavbarProps {}\r\n\r\nexport const FileNavbar: React.FC<FileNavbarProps> = React.memo(() => {\r\n    const classes = useStyles();\r\n    const folderChainItems = useFolderChainItems();\r\n\r\n    const folderChainComponents = useMemo(() => {\r\n        const components: ReactElement[] = [];\r\n        for (let i = 0; i < folderChainItems.length; ++i) {\r\n            const key = `folder-chain-${i}`;\r\n            const component = (\r\n                <FolderChainButton\r\n                    key={key}\r\n                    first={i === 0}\r\n                    current={i === folderChainItems.length - 1}\r\n                    item={folderChainItems[i]}\r\n                />\r\n            );\r\n            components.push(component);\r\n        }\r\n        return components;\r\n    }, [folderChainItems]);\r\n\r\n    return (\r\n        <Box className={classes.navbarWrapper}>\r\n            <Box className={classes.navbarContainer}>\r\n                <SmartToolbarButton fileActionId={ChonkyActions.OpenParentFolder.id} />\r\n                <Breadcrumbs\r\n                    className={classes.navbarBreadcrumbs}\r\n                    classes={{ separator: classes.separator }}\r\n                >\r\n                    {folderChainComponents}\r\n                </Breadcrumbs>\r\n            </Box>\r\n        </Box>\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    navbarWrapper: {\r\n        paddingBottom: theme.margins.rootLayoutMargin,\r\n    },\r\n    navbarContainer: {\r\n        display: 'flex',\r\n    },\r\n    upDirectoryButton: {\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        height: theme.toolbar.size,\r\n        width: theme.toolbar.size,\r\n        padding: '0px !important',\r\n    },\r\n    navbarBreadcrumbs: {\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        flexGrow: 100,\r\n    },\r\n    separator: {\r\n        marginRight: important(4),\r\n        marginLeft: important(4),\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { selectFileActionData } from '../../redux/selectors';\r\nimport { useParamSelector } from '../../redux/store';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { CustomVisibilityState } from '../../types/action.types';\r\nimport { useFileActionProps, useFileActionTrigger } from '../../util/file-actions';\r\nimport { useLocalizedFileActionStrings } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { c, important, makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface ToolbarDropdownButtonProps {\r\n    text: string;\r\n    active?: boolean;\r\n    icon?: Nullable<ChonkyIconName | string>;\r\n    onClick?: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ToolbarDropdownButton = React.forwardRef(\r\n    (props: ToolbarDropdownButtonProps, ref: React.Ref<HTMLLIElement>) => {\r\n        const { text, active, icon, onClick, disabled } = props;\r\n        const classes = useStyles();\r\n        const ChonkyIcon = useContext(ChonkyIconContext);\r\n\r\n        const className = c({\r\n            [classes.baseButton]: true,\r\n            [classes.activeButton]: active,\r\n        });\r\n        return (\r\n            <MenuItem\r\n                ref={ref}\r\n                className={className}\r\n                onClick={onClick}\r\n                disabled={disabled}\r\n            >\r\n                {icon && (\r\n                    <ListItemIcon className={classes.icon}>\r\n                        <ChonkyIcon icon={icon} fixedWidth={true} />\r\n                    </ListItemIcon>\r\n                )}\r\n                <ListItemText primaryTypographyProps={{ className: classes.text }}>\r\n                    {text}\r\n                </ListItemText>\r\n            </MenuItem>\r\n        );\r\n    }\r\n);\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    baseButton: {\r\n        lineHeight: important(theme.toolbar.lineHeight),\r\n        height: important(theme.toolbar.size),\r\n        minHeight: important('auto'),\r\n        minWidth: important('auto'),\r\n        padding: important(20),\r\n    },\r\n    icon: {\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        minWidth: important('auto'),\r\n        color: important('inherit'),\r\n        marginRight: 8,\r\n    },\r\n    text: {\r\n        fontSize: important(theme.toolbar.fontSize),\r\n    },\r\n    activeButton: {\r\n        color: important(theme.colors.textActive),\r\n    },\r\n}));\r\n\r\nexport interface SmartToolbarDropdownButtonProps {\r\n    fileActionId: string;\r\n    onClickFollowUp?: () => void;\r\n}\r\n\r\nexport const SmartToolbarDropdownButton = React.forwardRef(\r\n    (props: SmartToolbarDropdownButtonProps, ref: React.Ref<HTMLLIElement>) => {\r\n        const { fileActionId, onClickFollowUp } = props;\r\n\r\n        const action = useParamSelector(selectFileActionData, fileActionId);\r\n        const triggerAction = useFileActionTrigger(fileActionId);\r\n        const { icon, active, disabled } = useFileActionProps(fileActionId);\r\n        const { buttonName } = useLocalizedFileActionStrings(action);\r\n\r\n        // Combine external click handler with internal one\r\n        const handleClick = useCallback(() => {\r\n            triggerAction();\r\n            if (onClickFollowUp) onClickFollowUp();\r\n        }, [onClickFollowUp, triggerAction]);\r\n\r\n        if (!action) return null;\r\n        const { button } = action;\r\n        if (!button) return null;\r\n        if (action.customVisibility !== undefined && action.customVisibility() === CustomVisibilityState.Hidden) return null;\r\n\r\n        return (\r\n            <ToolbarDropdownButton\r\n                ref={ref}\r\n                text={buttonName}\r\n                icon={icon}\r\n                onClick={handleClick}\r\n                active={active}\r\n                disabled={disabled}\r\n            />\r\n        );\r\n    }\r\n);\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport Menu from '@mui/material/Menu';\r\nimport React, { useCallback, useMemo } from 'react';\r\n\r\nimport { FileActionGroup } from '../../types/action-menus.types';\r\nimport { useLocalizedFileActionGroup } from '../../util/i18n';\r\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\r\nimport { ToolbarButton } from './ToolbarButton';\r\nimport { SmartToolbarDropdownButton } from './ToolbarDropdownButton';\r\n\r\nexport type ToolbarDropdownProps = FileActionGroup;\r\n\r\nexport const ToolbarDropdown: React.FC<ToolbarDropdownProps> = React.memo(props => {\r\n    const { name, fileActionIds } = props;\r\n    const [anchor, setAnchor] = React.useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = useCallback(\r\n        (event: React.MouseEvent<HTMLButtonElement>) => setAnchor(event.currentTarget),\r\n        [setAnchor]\r\n    );\r\n    const handleClose = useCallback(() => setAnchor(null), [setAnchor]);\r\n\r\n    const menuItemComponents = useMemo(\r\n        () =>\r\n            fileActionIds.map(id => (\r\n                <SmartToolbarDropdownButton\r\n                    key={`menu-item-${id}`}\r\n                    fileActionId={id}\r\n                    onClickFollowUp={handleClose}\r\n                />\r\n            )),\r\n        [fileActionIds, handleClose]\r\n    );\r\n\r\n    const localizedName = useLocalizedFileActionGroup(name);\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <ToolbarButton text={localizedName} onClick={handleClick} dropdown={true} />\r\n            <Menu\r\n                autoFocus\r\n                keepMounted\r\n                elevation={2}\r\n                anchorEl={anchor}\r\n                onClose={handleClose}\r\n                open={Boolean(anchor)}\r\n                transitionDuration={150}\r\n                classes={{ list: classes.dropdownList }}\r\n            >\r\n                {menuItemComponents}\r\n            </Menu>\r\n        </>\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(() => ({\r\n    dropdownList: {\r\n        paddingBottom: important(0),\r\n        paddingTop: important(0),\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport { selectHiddenFileCount, selectors, selectSelectionSize } from '../../redux/selectors';\r\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\r\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface ToolbarInfoProps {}\r\n\r\nexport const ToolbarInfo: React.FC<ToolbarInfoProps> = React.memo(() => {\r\n    const classes = useStyles();\r\n\r\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\r\n    const selectionSize = useSelector(selectSelectionSize);\r\n    const hiddenCount = useSelector(selectHiddenFileCount);\r\n\r\n    const intl = useIntl();\r\n    const fileCountString = intl.formatMessage(\r\n        {\r\n            id: getI18nId(I18nNamespace.Toolbar, 'visibleFileCount'),\r\n            defaultMessage: `{fileCount, plural,\r\n                =0 {# items}\r\n                one {# item}\r\n                other {# items}\r\n            }`,\r\n        },\r\n        { fileCount: displayFileIds.length }\r\n    );\r\n    const selectedString = intl.formatMessage(\r\n        {\r\n            id: getI18nId(I18nNamespace.Toolbar, 'selectedFileCount'),\r\n            defaultMessage: `{fileCount, plural,\r\n                =0 {}\r\n                other {# selected}\r\n            }`,\r\n        },\r\n        { fileCount: selectionSize }\r\n    );\r\n    const hiddenString = intl.formatMessage(\r\n        {\r\n            id: getI18nId(I18nNamespace.Toolbar, 'hiddenFileCount'),\r\n            defaultMessage: `{fileCount, plural,\r\n                =0 {}\r\n                other {# hidden}\r\n            }`,\r\n        },\r\n        { fileCount: hiddenCount }\r\n    );\r\n\r\n    return (\r\n        <div className={classes.infoContainer}>\r\n            <Typography className={classes.infoText} variant=\"body1\">\r\n                {fileCountString}\r\n                {(selectedString || hiddenString) && (\r\n                    <span className={classes.extraInfoSpan}>\r\n                        (\r\n                        <span className={classes.selectionSizeText}>\r\n                            {selectedString}\r\n                        </span>\r\n                        {selectedString && hiddenString && ', '}\r\n                        <span className={classes.hiddenCountText}>{hiddenString}</span>)\r\n                    </span>\r\n                )}\r\n            </Typography>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    infoContainer: {\r\n        height: theme.toolbar.size,\r\n        display: 'flex',\r\n    },\r\n    infoText: {\r\n        lineHeight: important(theme.toolbar.lineHeight),\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        marginLeft: important(12),\r\n        height: theme.toolbar.size,\r\n    },\r\n    extraInfoSpan: {\r\n        marginRight: important(8),\r\n        marginLeft: important(8),\r\n        opacity: 0.8,\r\n    },\r\n    selectionSizeText: {\r\n        color: theme.colors.textActive,\r\n    },\r\n    hiddenCountText: {},\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport { reduxActions } from '../../redux/reducers';\r\nimport { selectSearchString } from '../../redux/selectors';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { useDebounce } from '../../util/hooks-helpers';\r\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface ToolbarSearchProps {}\r\n\r\nexport const ToolbarSearch: React.FC<ToolbarSearchProps> = React.memo(() => {\r\n    const intl = useIntl();\r\n    const searchPlaceholderString = intl.formatMessage({\r\n        id: getI18nId(I18nNamespace.Toolbar, 'searchPlaceholder'),\r\n        defaultMessage: 'Search',\r\n    });\r\n\r\n    const classes = useStyles();\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n\r\n    const searchInputRef = useRef<HTMLInputElement>();\r\n\r\n    const dispatch = useDispatch();\r\n    const reduxSearchString = useSelector(selectSearchString);\r\n\r\n    const [localSearchString, setLocalSearchString] = useState(reduxSearchString);\r\n    const [debouncedLocalSearchString] = useDebounce(localSearchString, 300);\r\n    const [showLoadingIndicator, setShowLoadingIndicator] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(\r\n            reduxActions.setFocusSearchInput(() => {\r\n                if (searchInputRef.current) searchInputRef.current.focus();\r\n            })\r\n        );\r\n        return () => {\r\n            dispatch(reduxActions.setFocusSearchInput(null));\r\n        };\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        setShowLoadingIndicator(false);\r\n        dispatch(reduxActions.setSearchString(debouncedLocalSearchString));\r\n    }, [debouncedLocalSearchString, dispatch]);\r\n\r\n    const handleChange = useCallback((event: React.FormEvent<HTMLInputElement>) => {\r\n        setShowLoadingIndicator(true);\r\n        setLocalSearchString(event.currentTarget.value);\r\n    }, []);\r\n    const handleKeyUp = useCallback(\r\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n            // Remove focus from the search input field when user presses escape.\r\n            // Note: We use KeyUp instead of KeyPress because some browser plugins can\r\n            //       intercept KeyPress events with Escape key.\r\n            //       @see https://stackoverflow.com/a/37461974\r\n            if (event.key === 'Escape') {\r\n                setLocalSearchString('');\r\n                dispatch(reduxActions.setSearchString(''));\r\n                if (searchInputRef.current) searchInputRef.current.blur();\r\n            }\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    return (\r\n        <TextField\r\n            className={classes.searchFieldContainer}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            value={localSearchString}\r\n            placeholder={searchPlaceholderString}\r\n            onChange={handleChange as any}\r\n            inputRef={searchInputRef}\r\n            InputProps={{\r\n                onKeyUp: handleKeyUp,\r\n                startAdornment: (\r\n                    <InputAdornment className={classes.searchIcon} position=\"start\">\r\n                        <ChonkyIcon\r\n                            icon={showLoadingIndicator ? ChonkyIconName.loading : ChonkyIconName.search}\r\n                            spin={showLoadingIndicator}\r\n                        />\r\n                    </InputAdornment>\r\n                ),\r\n                className: classes.searchFieldInput,\r\n            }}\r\n            inputProps={{ className: classes.searchFieldInputInner }}\r\n        />\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    searchFieldContainer: {\r\n        height: theme.toolbar.size,\r\n        width: 150,\r\n    },\r\n    searchIcon: {\r\n        fontSize: '0.9em',\r\n        opacity: 0.75,\r\n    },\r\n    searchFieldInput: {\r\n        lineHeight: important(0),\r\n        padding: important(0),\r\n        margin: important(0),\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        borderRadius: theme.toolbar.buttonRadius,\r\n        height: theme.toolbar.size - 4,\r\n        paddingLeft: important(8),\r\n        marginTop: 2,\r\n    },\r\n    searchFieldInputInner: {\r\n        lineHeight: important(`${theme.toolbar.size - 4}px`),\r\n        fontSize: important(theme.toolbar.fontSize),\r\n        height: important(theme.toolbar.size - 4),\r\n        padding: important([0, 8, 0, 0]),\r\n        margin: important(0),\r\n        '-webkit-appearance': 'none',\r\n    },\r\n}));\r\n","import React, { ReactElement, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectToolbarItems } from '../../redux/selectors';\r\nimport { makeGlobalChonkyStyles } from '../../util/styles';\r\nimport { SmartToolbarButton } from './ToolbarButton';\r\nimport { ToolbarDropdown } from './ToolbarDropdown';\r\nimport { ToolbarInfo } from './ToolbarInfo';\r\nimport { ToolbarSearch } from './ToolbarSearch';\r\n\r\nexport interface FileToolbarProps {}\r\n\r\nexport const FileToolbar: React.FC<FileToolbarProps> = React.memo(() => {\r\n    const classes = useStyles();\r\n    const toolbarItems = useSelector(selectToolbarItems);\r\n\r\n    const toolbarItemComponents = useMemo(() => {\r\n        const components: ReactElement[] = [];\r\n        for (let i = 0; i < toolbarItems.length; ++i) {\r\n            const item = toolbarItems[i];\r\n\r\n            const key = `toolbar-item-${typeof item === 'string' ? item : item.name}`;\r\n            const component =\r\n                typeof item === 'string' ? (\r\n                    <SmartToolbarButton key={key} fileActionId={item} />\r\n                ) : (\r\n                    <ToolbarDropdown\r\n                        key={key}\r\n                        name={item.name}\r\n                        fileActionIds={item.fileActionIds}\r\n                    />\r\n                );\r\n            components.push(component);\r\n        }\r\n        return components;\r\n    }, [toolbarItems]);\r\n\r\n    return (\r\n        <div className={classes.toolbarWrapper}>\r\n            <div className={classes.toolbarContainer}>\r\n                <div className={classes.toolbarLeft}>\r\n                    <ToolbarSearch />\r\n                    <ToolbarInfo />\r\n                </div>\r\n                <div className={classes.toolbarRight}>{toolbarItemComponents}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    toolbarWrapper: {},\r\n    toolbarContainer: {\r\n        flexWrap: 'wrap-reverse',\r\n        display: 'flex',\r\n    },\r\n    toolbarLeft: {\r\n        paddingBottom: theme.margins.rootLayoutMargin,\r\n        flexWrap: 'nowrap',\r\n        flexGrow: 10000,\r\n        display: 'flex',\r\n    },\r\n    toolbarLeftFiller: {\r\n        flexGrow: 10000,\r\n    },\r\n    toolbarRight: {\r\n        paddingBottom: theme.margins.rootLayoutMargin,\r\n        flexWrap: 'nowrap',\r\n        display: 'flex',\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { CSSProperties, useContext } from 'react';\r\nimport { useIntl } from 'react-intl';\r\n\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface FileListEmptyProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport const FileListEmpty: React.FC<FileListEmptyProps> = props => {\r\n    const { width, height } = props;\r\n    const classes = useStyles();\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n    const style: CSSProperties = {\r\n        width,\r\n        height,\r\n    };\r\n\r\n    const intl = useIntl();\r\n    const emptyString = intl.formatMessage({\r\n        id: getI18nId(I18nNamespace.FileList, 'nothingToShow'),\r\n        defaultMessage: 'Nothing to show',\r\n    });\r\n\r\n    return (\r\n        <div className={classes.fileListEmpty} style={style}>\r\n            <div className={classes.fileListEmptyContent}>\r\n                <ChonkyIcon icon={ChonkyIconName.folderOpen} />\r\n                &nbsp; {emptyString}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst useStyles = makeGlobalChonkyStyles(theme => ({\r\n    fileListEmpty: {\r\n        color: theme.palette.text.disabled,\r\n        position: 'relative',\r\n        textAlign: 'center',\r\n        fontSize: '1.2em',\r\n    },\r\n    fileListEmptyContent: {\r\n        transform: 'translateX(-50%) translateY(-50%)',\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { useCallback } from 'react';\r\nimport { AnyObjectWithStringKeys } from 'tsdef';\r\n\r\nimport { useClickHandler, useKeyDownHandler } from './ClickableWrapper-hooks';\r\n\r\nexport interface MouseClickEvent {\r\n    altKey: boolean;\r\n    ctrlKey: boolean;\r\n    shiftKey: boolean;\r\n}\r\nexport type MouseClickEventHandler = (event: MouseClickEvent) => void;\r\n\r\nexport interface KeyboardClickEvent {\r\n    enterKey: boolean;\r\n    spaceKey: boolean;\r\n    altKey: boolean;\r\n    ctrlKey: boolean;\r\n    shiftKey: boolean;\r\n}\r\nexport type KeyboardClickEventHandler = (event: KeyboardClickEvent) => void;\r\n\r\nexport interface ClickableWrapperProps {\r\n    wrapperTag: any;\r\n    passthroughProps?: any;\r\n\r\n    onSingleClick?: MouseClickEventHandler;\r\n    onDoubleClick?: MouseClickEventHandler;\r\n    onKeyboardClick?: KeyboardClickEventHandler;\r\n    setFocused?: (focused: boolean) => void;\r\n}\r\n\r\nexport const ClickableWrapper: React.FC<ClickableWrapperProps> = props => {\r\n    const {\r\n        children,\r\n        wrapperTag: WrapperTag,\r\n        passthroughProps,\r\n        onSingleClick,\r\n        onDoubleClick,\r\n        onKeyboardClick,\r\n        setFocused,\r\n    } = props;\r\n\r\n    const handleClick = useClickHandler(onSingleClick, onDoubleClick);\r\n    const handleKeyDown = useKeyDownHandler(onKeyboardClick);\r\n\r\n    const compProps: AnyObjectWithStringKeys = {\r\n        onFocus: useCallback(() => setFocused && setFocused(true), [setFocused]),\r\n        onBlur: useCallback(() => setFocused && setFocused(false), [setFocused]),\r\n    };\r\n\r\n    if (onSingleClick || onDoubleClick || onKeyboardClick) {\r\n        compProps.onClick = handleClick;\r\n        compProps.onKeyDown = handleKeyDown;\r\n        compProps.tabIndex = 0;\r\n    }\r\n\r\n    const mergedProps = { ...compProps, ...passthroughProps };\r\n    return <WrapperTag {...mergedProps}>{children}</WrapperTag>;\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { useCallback, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Nilable, Nullable } from 'tsdef';\r\n\r\nimport { selectDoubleClickDelay } from '../../redux/selectors';\r\nimport {\r\n    KeyboardClickEvent,\r\n    KeyboardClickEventHandler,\r\n    MouseClickEvent,\r\n    MouseClickEventHandler,\r\n} from './ClickableWrapper';\r\n\r\nexport const useClickHandler = (\r\n    onSingleClick: Nilable<MouseClickEventHandler>,\r\n    onDoubleClick: Nilable<MouseClickEventHandler>\r\n) => {\r\n    const doubleClickDelay = useSelector(selectDoubleClickDelay);\r\n\r\n    const counter = useRef({\r\n        clickCount: 0,\r\n        clickTimeout: null as Nullable<number>,\r\n    });\r\n\r\n    return useCallback(\r\n        (event: React.MouseEvent) => {\r\n            const mouseClickEvent: MouseClickEvent = {\r\n                altKey: event.altKey,\r\n                ctrlKey: event.ctrlKey || event.metaKey,\r\n                shiftKey: event.shiftKey,\r\n\r\n            };\r\n\r\n            counter.current.clickCount++;\r\n            if (counter.current.clickCount === 1) {\r\n                if (onSingleClick) {\r\n                    event.preventDefault();\r\n                    onSingleClick(mouseClickEvent);\r\n                }\r\n                counter.current.clickCount = 1;\r\n                // @ts-ignore\r\n                counter.current.clickTimeout = setTimeout(\r\n                    () => (counter.current.clickCount = 0),\r\n                    doubleClickDelay\r\n                );\r\n            } else if (counter.current.clickCount === 2) {\r\n                if (onDoubleClick) {\r\n                    event.preventDefault();\r\n                    onDoubleClick(mouseClickEvent);\r\n                }\r\n                if (typeof counter.current.clickTimeout === 'number') {\r\n                    clearTimeout(counter.current.clickTimeout);\r\n                    counter.current.clickTimeout = null;\r\n                    counter.current.clickCount = 0;\r\n                }\r\n            }\r\n        },\r\n        [doubleClickDelay, onSingleClick, onDoubleClick, counter]\r\n    );\r\n};\r\n\r\nexport const useKeyDownHandler = (onKeyboardClick?: KeyboardClickEventHandler) => {\r\n    return useCallback(\r\n        (event: React.KeyboardEvent) => {\r\n            if (!onKeyboardClick) return;\r\n\r\n            const keyboardClickEvent: KeyboardClickEvent = {\r\n                enterKey: event.nativeEvent.code === 'Enter',\r\n                spaceKey: event.nativeEvent.code === 'Space',\r\n                altKey: event.altKey,\r\n                ctrlKey: event.ctrlKey,\r\n                shiftKey: event.shiftKey,\r\n            };\r\n\r\n            if (keyboardClickEvent.spaceKey || keyboardClickEvent.enterKey) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onKeyboardClick(keyboardClickEvent);\r\n            }\r\n        },\r\n        [onKeyboardClick]\r\n    );\r\n};\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { FileData } from '../../types/file.types';\r\nimport { makeLocalChonkyStyles } from '../../util/styles';\r\nimport { useFileNameComponent, useModifierIconComponents } from './FileEntry-hooks';\r\n\r\nexport interface FileEntryNameProps {\r\n    file: Nullable<FileData>;\r\n    className?: string;\r\n}\r\n\r\nexport const FileEntryName: React.FC<FileEntryNameProps> = React.memo(({ file, className }) => {\r\n    const modifierIconComponents = useModifierIconComponents(file);\r\n    const fileNameComponent = useFileNameComponent(file);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <span className={className} title={file ? file.name : undefined}>\r\n            {modifierIconComponents.length > 0 && (\r\n                <span className={classes.modifierIcons}>{modifierIconComponents}</span>\r\n            )}\r\n            {fileNameComponent}\r\n        </span>\r\n    );\r\n});\r\nFileEntryName.displayName = 'FileEntryName';\r\n\r\nconst useStyles = makeLocalChonkyStyles(theme => ({\r\n    modifierIcons: {\r\n        color: theme.palette.text.disabled,\r\n        position: 'relative',\r\n        fontSize: '0.775em',\r\n        paddingRight: 5,\r\n    },\r\n}));\r\n","import React, { useContext } from 'react';\r\n\r\nimport { FileEntryProps } from '../../types/file-list.types';\r\nimport { useLocalizedFileEntryStrings } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { makeLocalChonkyStyles } from '../../util/styles';\r\nimport { TextPlaceholder } from '../external/TextPlaceholder';\r\nimport { useFileEntryHtmlProps, useFileEntryState } from './FileEntry-hooks';\r\nimport { FileEntryName } from './FileEntryName';\r\nimport { FileEntryState } from './GridEntryPreview';\r\n\r\nexport const CompactEntry: React.FC<FileEntryProps> = React.memo(\r\n    // @ts-ignore\r\n    ({ file, selected, focused, dndState }) => {\r\n        const entryState: FileEntryState = useFileEntryState(file, selected, focused);\r\n\r\n        const { fileModDateString, fileSizeString } = useLocalizedFileEntryStrings(\r\n            file\r\n        );\r\n\r\n        const classes = useStyles(entryState);\r\n        const ChonkyIcon = useContext(ChonkyIconContext);\r\n        const fileEntryHtmlProps = useFileEntryHtmlProps(file);\r\n        return (\r\n            <div className={classes.listFileEntry} {...fileEntryHtmlProps}>\r\n                <div className={classes.listFileEntryIcon}>\r\n                    <ChonkyIcon\r\n                        icon={entryState.icon}\r\n                        spin={entryState.iconSpin}\r\n                        fixedWidth={true}\r\n                    />\r\n                </div>\r\n                <div className={classes.listFileEntryDescription}>\r\n                    <div\r\n                        className={classes.listFileEntryName}\r\n                        title={file ? file.name : undefined}\r\n                    >\r\n                        <FileEntryName file={file} />\r\n                    </div>\r\n                    <div className={classes.listFileEntryProperties}>\r\n                        <div className={classes.listFileEntryProperty}>\r\n                            {file ? (\r\n                                fileModDateString ?? <span>—</span>\r\n                            ) : (\r\n                                <TextPlaceholder minLength={5} maxLength={15} />\r\n                            )}\r\n                        </div>\r\n                        <div className={classes.listFileEntryProperty}>\r\n                            {file ? (\r\n                                fileSizeString ?? <span>—</span>\r\n                            ) : (\r\n                                <TextPlaceholder minLength={10} maxLength={20} />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"chonky-file-entry-outline\"></div>\r\n                <div className=\"chonky-file-entry-selection\"></div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nconst useStyles = makeLocalChonkyStyles(theme => ({\r\n    listFileEntry: {\r\n        fontSize: theme.listFileEntry.fontSize,\r\n        alignItems: 'center',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        height: '100%',\r\n    },\r\n    listFileEntryIcon: {\r\n        backgroundColor: (state: FileEntryState) => state.color,\r\n        boxShadow: 'inset rgba(255, 255, 255, 0.5) 0 0 0 999px',\r\n        borderRadius: theme.listFileEntry.iconBorderRadius,\r\n        fontSize: theme.listFileEntry.iconFontSize,\r\n        color: '#fff',\r\n        padding: 8,\r\n    },\r\n    listFileEntryDescription: {\r\n        flexDirection: 'column',\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n    },\r\n    listFileEntryName: {\r\n        padding: [0, 8, 4, 8],\r\n    },\r\n    listFileEntryProperties: {\r\n        fontSize: theme.listFileEntry.propertyFontSize,\r\n        flexDirection: 'row',\r\n        display: 'flex',\r\n    },\r\n    listFileEntryProperty: {\r\n        padding: [0, 8],\r\n        opacity: 0.4,\r\n    },\r\n}));\r\n","import React from 'react';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { DndEntryState } from '../../types/file-list.types';\r\nimport { FileData } from '../../types/file.types';\r\nimport { useDndHoverOpen, useFileEntryDnD } from '../../util/dnd';\r\nimport { FileHelper } from '../../util/file-helper';\r\nimport { makeLocalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface DnDFileEntryProps {\r\n    file: Nullable<FileData>;\r\n    children: (dndState: DndEntryState) => React.ReactElement;\r\n}\r\n\r\nexport const DnDFileEntry = React.memo(({ file, children }: DnDFileEntryProps) => {\r\n    const { drop, drag, dndState } = useFileEntryDnD(file);\r\n\r\n    useDndHoverOpen(file, dndState);\r\n    const classes = useStyles();\r\n    return (\r\n        <div ref={drop} className={classes.fillParent}>\r\n            <div\r\n                ref={FileHelper.isDraggable(file) ? drag : null}\r\n                className={classes.fillParent}\r\n            >\r\n                {children(dndState)}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport const useStyles = makeLocalChonkyStyles(() => ({\r\n    fillParent: {\r\n        height: '100%',\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport c from 'classnames';\r\nimport React from 'react';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { makeGlobalChonkyStyles } from '../../util/styles';\r\n\r\nexport interface FileThumbnailProps {\r\n    className: string;\r\n    thumbnailUrl: Nullable<string>;\r\n}\r\n\r\nexport const FileThumbnail: React.FC<FileThumbnailProps> = React.memo(props => {\r\n    const { className, thumbnailUrl } = props;\r\n\r\n    const thumbnailStyle: React.CSSProperties = thumbnailUrl ? { backgroundImage: `url('${thumbnailUrl}')` } : {};\r\n\r\n    const classes = useStyles();\r\n    return <div className={c([className, classes.fileThumbnail])} style={thumbnailStyle} />;\r\n});\r\nFileThumbnail.displayName = 'FileThumbnail';\r\n\r\nconst useStyles = makeGlobalChonkyStyles(() => ({\r\n    fileThumbnail: {\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'contain',\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { useContext } from 'react';\r\n\r\nimport { DndEntryState } from '../../types/file-list.types';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\r\nimport { useDndIcon } from './FileEntry-hooks';\r\n\r\nexport interface DnDIndicatorProps {\r\n    className: string;\r\n    dndState: DndEntryState;\r\n}\r\n\r\nexport const GridEntryDndIndicator: React.FC<DnDIndicatorProps> = React.memo(props => {\r\n    const { className: externalClassName, dndState } = props;\r\n    const dndIconName = useDndIcon(dndState);\r\n    const classes = useStyles(dndState);\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n    if (!dndIconName) return null;\r\n    const className = c({\r\n        [classes.dndIndicator]: true,\r\n        [externalClassName]: true,\r\n    });\r\n    return (\r\n        <div className={className}>\r\n            <ChonkyIcon icon={dndIconName} />\r\n        </div>\r\n    );\r\n});\r\n\r\nconst useStyles = makeLocalChonkyStyles(theme => ({\r\n    dndIndicator: {\r\n        color: (dndState: DndEntryState) =>\r\n            dndState.dndIsOver\r\n                ? dndState.dndCanDrop\r\n                    ? theme.dnd.canDropColor\r\n                    : theme.dnd.cannotDropColor\r\n                : '#000',\r\n        boxSizing: 'border-box',\r\n        position: 'absolute',\r\n        fontSize: '1.2em',\r\n        opacity: 0.6,\r\n        padding: 6,\r\n        '&:before': {\r\n            borderBottom: '50px solid transparent',\r\n            borderLeft: '50px solid #fff',\r\n            position: 'absolute',\r\n            content: '\"\"',\r\n            zIndex: -1,\r\n            left: 0,\r\n            top: 0,\r\n        },\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { DndEntryState } from '../../types/file-list.types';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { c, important, makeLocalChonkyStyles } from '../../util/styles';\r\nimport { FileThumbnail } from './FileThumbnail';\r\nimport { GridEntryDndIndicator } from './GridEntryDndIndicator';\r\n\r\nexport type FileEntryState = {\r\n    childrenCount: Nullable<number>;\r\n    color: string;\r\n    icon: ChonkyIconName | string;\r\n    thumbnailUrl: Nullable<string>;\r\n    iconSpin: boolean;\r\n    selected: boolean;\r\n    focused: boolean;\r\n};\r\n\r\nexport interface FileEntryPreviewProps {\r\n    className?: string;\r\n    entryState: FileEntryState;\r\n    dndState: DndEntryState;\r\n}\r\n\r\nexport const GridEntryPreviewFolder: React.FC<FileEntryPreviewProps> = React.memo(props => {\r\n    const { className: externalClassName, entryState, dndState } = props;\r\n\r\n    const folderClasses = useFolderStyles(entryState);\r\n    const fileClasses = useFileStyles(entryState);\r\n    const commonClasses = useCommonEntryStyles(entryState);\r\n    const className = c({\r\n        [folderClasses.previewFile]: true,\r\n        [externalClassName || '']: !!externalClassName,\r\n    });\r\n    return (\r\n        <div className={className}>\r\n            <div className={folderClasses.folderBackSideMid}>\r\n                <div className={folderClasses.folderBackSideTop} />\r\n                <div className={folderClasses.folderFrontSide}>\r\n                    <GridEntryDndIndicator className={fileClasses.dndIndicator} dndState={dndState} />\r\n                    <div className={c([fileClasses.fileIcon, folderClasses.fileIcon])}>{entryState.childrenCount}</div>\r\n                    <div className={commonClasses.selectionIndicator}></div>\r\n                    <FileThumbnail className={fileClasses.thumbnail} thumbnailUrl={entryState.thumbnailUrl} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nGridEntryPreviewFolder.displayName = 'GridEntryPreviewFolder';\r\n\r\nconst useFolderStyles = makeLocalChonkyStyles(theme => ({\r\n    previewFile: {\r\n        borderRadius: theme.gridFileEntry.borderRadius,\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n    },\r\n    folderBackSideTop: {\r\n        backgroundColor: (state: FileEntryState) => state.color,\r\n        boxShadow: (state: FileEntryState) => {\r\n            let color = theme.gridFileEntry.folderBackColorTint;\r\n            if (state.focused) color = 'rgba(0, 0, 0, 0.3)';\r\n            else if (state.selected) color = 'rgba(0, 153, 255, .4)';\r\n            return `inset ${color} 0 0 0 999px`;\r\n        },\r\n        borderTopLeftRadius: theme.gridFileEntry.borderRadius,\r\n        borderTopRightRadius: 10,\r\n        position: 'absolute',\r\n        right: '60%',\r\n        height: 13,\r\n        top: -10,\r\n        left: 0,\r\n        '&:after': {\r\n            borderRightColor: theme.palette.background.paper,\r\n            borderTopColor: theme.palette.background.paper,\r\n            borderBottomColor: 'transparent',\r\n            borderLeftColor: 'transparent',\r\n            borderWidth: [0, 15, 10, 0],\r\n            borderStyle: 'solid',\r\n            position: 'absolute',\r\n            display: 'block',\r\n            content: '\"\"',\r\n            right: 0,\r\n            top: 0,\r\n        },\r\n    },\r\n    folderBackSideMid: {\r\n        backgroundColor: (state: FileEntryState) => state.color,\r\n        boxShadow: (state: FileEntryState) => {\r\n            let color = theme.gridFileEntry.folderBackColorTint;\r\n            if (state.focused) color = 'rgba(0, 0, 0, 0.3)';\r\n            else if (state.selected) color = 'rgba(0, 153, 255, .4)';\r\n            return `inset ${color} 0 0 0 999px`;\r\n        },\r\n        borderTopRightRadius: theme.gridFileEntry.borderRadius,\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        top: 10,\r\n    },\r\n    folderFrontSide: {\r\n        boxShadow: (state: FileEntryState) => {\r\n            const shadows: string[] = [];\r\n            if (state.focused) shadows.push('inset rgba(0, 0, 0, 1) 0 0 0 3px');\r\n            if (state.selected) shadows.push('inset rgba(0, 153, 255, .65) 0 0 0 3px');\r\n            shadows.push(`inset ${theme.gridFileEntry.folderFrontColorTint} 0 0 0 999px`);\r\n            return shadows.join(', ');\r\n        },\r\n        backgroundColor: (state: FileEntryState) => state.color,\r\n        borderRadius: theme.gridFileEntry.borderRadius,\r\n        position: 'absolute',\r\n        overflow: 'hidden',\r\n        bottom: 0,\r\n        right: 0,\r\n        left: 0,\r\n        top: 10,\r\n    },\r\n    fileIcon: {\r\n        fontSize: important(theme.gridFileEntry.childrenCountSize),\r\n    },\r\n}));\r\n\r\nexport const GridEntryPreviewFile: React.FC<FileEntryPreviewProps> = React.memo(props => {\r\n    const { className: externalClassName, entryState, dndState } = props;\r\n\r\n    const fileClasses = useFileStyles(entryState);\r\n    const commonClasses = useCommonEntryStyles(entryState);\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n    const className = c({\r\n        [fileClasses.previewFile]: true,\r\n        [externalClassName || '']: !!externalClassName,\r\n    });\r\n    return (\r\n        <div className={className}>\r\n            <GridEntryDndIndicator className={fileClasses.dndIndicator} dndState={dndState} />\r\n            <div className={fileClasses.fileIcon}>\r\n                <ChonkyIcon icon={entryState.icon} spin={entryState.iconSpin} />\r\n            </div>\r\n            <div className={commonClasses.selectionIndicator}></div>\r\n            <FileThumbnail className={fileClasses.thumbnail} thumbnailUrl={entryState.thumbnailUrl} />\r\n        </div>\r\n    );\r\n});\r\nGridEntryPreviewFile.displayName = 'GridEntryPreviewFile';\r\n\r\nconst useFileStyles = makeLocalChonkyStyles(theme => ({\r\n    previewFile: {\r\n        boxShadow: (state: FileEntryState) => {\r\n            const shadows: string[] = [];\r\n            if (state.selected) shadows.push('inset rgba(0,153,255, .65) 0 0 0 3px');\r\n            if (state.focused) shadows.push('inset rgba(0, 0, 0, 1) 0 0 0 3px');\r\n            shadows.push(`inset ${theme.gridFileEntry.fileColorTint} 0 0 0 999px`);\r\n            return shadows.join(', ');\r\n        },\r\n        backgroundColor: (state: FileEntryState) => state.color,\r\n        borderRadius: theme.gridFileEntry.borderRadius,\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n    },\r\n    dndIndicator: {\r\n        zIndex: 14,\r\n    },\r\n    fileIcon: {\r\n        transform: 'translateX(-50%) translateY(-50%)',\r\n        fontSize: theme.gridFileEntry.iconSize,\r\n        opacity: (state: FileEntryState) => (state.thumbnailUrl && !state.focused ? 0 : 1),\r\n        color: (state: FileEntryState) =>\r\n            state.focused ? theme.gridFileEntry.iconColorFocused : theme.gridFileEntry.iconColor,\r\n        position: 'absolute',\r\n        left: '50%',\r\n        zIndex: 12,\r\n        top: '50%',\r\n    },\r\n    thumbnail: {\r\n        borderRadius: theme.gridFileEntry.borderRadius,\r\n        position: 'absolute',\r\n        zIndex: 6,\r\n        bottom: 5,\r\n        right: 5,\r\n        left: 5,\r\n        top: 5,\r\n    },\r\n}));\r\n\r\nexport const useCommonEntryStyles = makeLocalChonkyStyles(() => ({\r\n    selectionIndicator: {\r\n        display: (state: FileEntryState) => (state.selected ? 'block' : 'none'),\r\n        background:\r\n            'repeating-linear-gradient(' +\r\n            '45deg,' +\r\n            'rgba(0,153,255,.14),' +\r\n            'rgba(0,153,255,.14) 10px,' +\r\n            'rgba(0,153,255,.25) 0,' +\r\n            'rgba(0,153,255,.25) 20px' +\r\n            ')',\r\n        backgroundColor: 'rgba(0, 153, 255, .14)',\r\n        position: 'absolute',\r\n        height: '100%',\r\n        width: '100%',\r\n        zIndex: 10,\r\n    },\r\n    focusIndicator: {\r\n        display: (state: FileEntryState) => (state.focused ? 'block' : 'none'),\r\n        boxShadow: 'inset rgba(0, 0, 0, 1) 0 0 0 2px',\r\n        position: 'absolute',\r\n        height: '100%',\r\n        width: '100%',\r\n        zIndex: 11,\r\n    },\r\n}));\r\n","import React from 'react';\r\n\r\nimport { FileEntryProps } from '../../types/file-list.types';\r\nimport { FileHelper } from '../../util/file-helper';\r\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\r\nimport { useFileEntryHtmlProps, useFileEntryState } from './FileEntry-hooks';\r\nimport { FileEntryName } from './FileEntryName';\r\nimport { FileEntryState, GridEntryPreviewFile, GridEntryPreviewFolder } from './GridEntryPreview';\r\n\r\nexport const GridEntry: React.FC<FileEntryProps> = React.memo(({ file, selected, focused, dndState }) => {\r\n    const isDirectory = FileHelper.isDirectory(file);\r\n    const entryState = useFileEntryState(file, selected, focused);\r\n\r\n    const classes = useFileEntryStyles(entryState);\r\n    const fileEntryHtmlProps = useFileEntryHtmlProps(file);\r\n    const entryClassName = c({\r\n        [classes.gridFileEntry]: true,\r\n    });\r\n    return (\r\n        <div className={entryClassName} {...fileEntryHtmlProps}>\r\n            {isDirectory ? (\r\n                <GridEntryPreviewFolder\r\n                    className={classes.gridFileEntryPreview}\r\n                    entryState={entryState}\r\n                    dndState={dndState}\r\n                />\r\n            ) : (\r\n                <GridEntryPreviewFile\r\n                    className={classes.gridFileEntryPreview}\r\n                    entryState={entryState}\r\n                    dndState={dndState}\r\n                />\r\n            )}\r\n            <div className={classes.gridFileEntryNameContainer}>\r\n                <FileEntryName className={classes.gridFileEntryName} file={file} />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\nGridEntry.displayName = 'GridEntry';\r\n\r\nconst useFileEntryStyles = makeLocalChonkyStyles(theme => ({\r\n    gridFileEntry: {\r\n        flexDirection: 'column',\r\n        display: 'flex',\r\n        height: '100%',\r\n    },\r\n    gridFileEntryPreview: {\r\n        flexGrow: 1,\r\n    },\r\n    gridFileEntryNameContainer: {\r\n        fontSize: theme.gridFileEntry.fontSize,\r\n        wordBreak: 'break-word',\r\n        textAlign: 'center',\r\n        paddingTop: 5,\r\n    },\r\n    gridFileEntryName: {\r\n        backgroundColor: (state: FileEntryState) => (state.selected ? 'rgba(0,153,255, .25)' : 'transparent'),\r\n        textDecoration: (state: FileEntryState) => (state.focused ? 'underline' : 'none'),\r\n        borderRadius: 3,\r\n        padding: [2, 4],\r\n    },\r\n}));\r\n","import React, { useContext, useMemo } from 'react';\r\n\r\nimport { DndEntryState, FileEntryProps } from '../../types/file-list.types';\r\nimport { useLocalizedFileEntryStrings } from '../../util/i18n';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\r\nimport { TextPlaceholder } from '../external/TextPlaceholder';\r\nimport {\r\n    useDndIcon,\r\n    useFileEntryHtmlProps,\r\n    useFileEntryState,\r\n} from './FileEntry-hooks';\r\nimport { FileEntryName } from './FileEntryName';\r\nimport { FileEntryState, useCommonEntryStyles } from './GridEntryPreview';\r\n\r\ninterface StyleState {\r\n    entryState: FileEntryState;\r\n    dndState: DndEntryState;\r\n}\r\n\r\nexport const ListEntry: React.FC<FileEntryProps> = React.memo(\r\n    ({ file, selected, focused, dndState }) => {\r\n        const entryState: FileEntryState = useFileEntryState(file, selected, focused);\r\n        const dndIconName = useDndIcon(dndState);\r\n\r\n        const { fileModDateString, fileSizeString } = useLocalizedFileEntryStrings(\r\n            file\r\n        );\r\n        const styleState = useMemo<StyleState>(\r\n            () => ({\r\n                entryState,\r\n                dndState,\r\n            }),\r\n            [dndState, entryState]\r\n        );\r\n        const classes = useStyles(styleState);\r\n        const commonClasses = useCommonEntryStyles(entryState);\r\n        const ChonkyIcon = useContext(ChonkyIconContext);\r\n        const fileEntryHtmlProps = useFileEntryHtmlProps(file);\r\n        return (\r\n            <div className={classes.listFileEntry} {...fileEntryHtmlProps}>\r\n                <div className={commonClasses.focusIndicator}></div>\r\n                <div\r\n                    className={c([\r\n                        commonClasses.selectionIndicator,\r\n                        classes.listFileEntrySelection,\r\n                    ])}\r\n                ></div>\r\n                <div className={classes.listFileEntryIcon}>\r\n                    <ChonkyIcon\r\n                        icon={dndIconName ?? entryState.icon}\r\n                        spin={dndIconName ? false : entryState.iconSpin}\r\n                        fixedWidth={true}\r\n                    />\r\n                </div>\r\n                <div\r\n                    className={classes.listFileEntryName}\r\n                    title={file ? file.name : undefined}\r\n                >\r\n                    <FileEntryName file={file} />\r\n                </div>\r\n                <div className={classes.listFileEntryProperty}>\r\n                    {file ? (\r\n                        fileModDateString ?? <span>—</span>\r\n                    ) : (\r\n                        <TextPlaceholder minLength={5} maxLength={15} />\r\n                    )}\r\n                </div>\r\n                <div className={classes.listFileEntryProperty}>\r\n                    {file ? (\r\n                        fileSizeString ?? <span>—</span>\r\n                    ) : (\r\n                        <TextPlaceholder minLength={10} maxLength={20} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nconst useStyles = makeLocalChonkyStyles(theme => ({\r\n    listFileEntry: {\r\n        boxShadow: `inset ${theme.palette.divider} 0 -1px 0`,\r\n        fontSize: theme.listFileEntry.fontSize,\r\n        color: ({ dndState }: StyleState) =>\r\n            dndState.dndIsOver\r\n                ? dndState.dndCanDrop\r\n                    ? theme.dnd.canDropColor\r\n                    : theme.dnd.cannotDropColor\r\n                : 'inherit',\r\n        alignItems: 'center',\r\n        position: 'relative',\r\n        display: 'flex',\r\n        height: '100%',\r\n    },\r\n    listFileEntrySelection: {\r\n        opacity: 0.6,\r\n    },\r\n    listFileEntryIcon: {\r\n        color: ({ entryState, dndState }: StyleState) =>\r\n            dndState.dndIsOver\r\n                ? dndState.dndCanDrop\r\n                    ? theme.dnd.canDropColor\r\n                    : theme.dnd.cannotDropColor\r\n                : entryState.color,\r\n        fontSize: theme.listFileEntry.iconFontSize,\r\n        boxSizing: 'border-box',\r\n        padding: [2, 4],\r\n        zIndex: 20,\r\n    },\r\n    listFileEntryName: {\r\n        textOverflow: 'ellipsis',\r\n        boxSizing: 'border-box',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        flex: '1 1 300px',\r\n        paddingLeft: 8,\r\n        zIndex: 20,\r\n    },\r\n    listFileEntryProperty: {\r\n        fontSize: theme.listFileEntry.propertyFontSize,\r\n        boxSizing: 'border-box',\r\n        whiteSpace: 'nowrap',\r\n        overflow: 'hidden',\r\n        flex: '0 1 150px',\r\n        padding: [2, 8],\r\n        zIndex: 20,\r\n    },\r\n}));\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Nullable } from 'tsdef';\r\n\r\nimport { selectFileData, selectIsDnDDisabled, selectIsFileSelected } from '../../redux/selectors';\r\nimport { useParamSelector } from '../../redux/store';\r\nimport { DndEntryState, FileEntryProps } from '../../types/file-list.types';\r\nimport { FileViewMode } from '../../types/file-view.types';\r\nimport { FileHelper } from '../../util/file-helper';\r\nimport { makeGlobalChonkyStyles } from '../../util/styles';\r\nimport { ClickableWrapper, ClickableWrapperProps } from '../internal/ClickableWrapper';\r\nimport { CompactEntry } from './CompactEntry';\r\nimport { DnDFileEntry } from './DnDFileEntry';\r\nimport { useFileClickHandlers } from './FileEntry-hooks';\r\nimport { GridEntry } from './GridEntry';\r\nimport { ListEntry } from './ListEntry';\r\n\r\nexport interface SmartFileEntryProps {\r\n    fileId: Nullable<string>;\r\n    displayIndex: number;\r\n    fileViewMode: FileViewMode;\r\n}\r\n\r\nconst disabledDndState: DndEntryState = {\r\n    dndIsDragging: false,\r\n    dndIsOver: false,\r\n    dndCanDrop: false,\r\n};\r\n\r\nexport const SmartFileEntry: React.FC<SmartFileEntryProps> = React.memo(({ fileId, displayIndex, fileViewMode }) => {\r\n    const classes = useStyles();\r\n\r\n    // Basic properties\r\n    const file = useParamSelector(selectFileData, fileId);\r\n    const selected = useParamSelector(selectIsFileSelected, fileId);\r\n    const dndDisabled = useSelector(selectIsDnDDisabled);\r\n\r\n    // Clickable wrapper properties\r\n    const fileClickHandlers = useFileClickHandlers(file, displayIndex);\r\n    const [focused, setFocused] = useState(false);\r\n    const clickableWrapperProps: ClickableWrapperProps = {\r\n        wrapperTag: 'div',\r\n        passthroughProps: { className: classes.fileEntryClickableWrapper },\r\n        ...(FileHelper.isClickable(file) ? fileClickHandlers : undefined),\r\n        setFocused,\r\n    };\r\n\r\n    // File entry properties\r\n    const fileEntryProps: Omit<FileEntryProps, 'dndState'> = {\r\n        file,\r\n        selected,\r\n        focused,\r\n    };\r\n\r\n    let EntryComponent: React.FC<FileEntryProps>;\r\n    if (fileViewMode === FileViewMode.List) EntryComponent = ListEntry;\r\n    else if (fileViewMode === FileViewMode.Compact) EntryComponent = CompactEntry;\r\n    else EntryComponent = GridEntry;\r\n\r\n    return dndDisabled ? (\r\n        <ClickableWrapper {...clickableWrapperProps}>\r\n            <EntryComponent {...fileEntryProps} dndState={disabledDndState} />\r\n        </ClickableWrapper>\r\n    ) : (\r\n        <DnDFileEntry file={file}>\r\n            {dndState => (\r\n                <ClickableWrapper {...clickableWrapperProps}>\r\n                    <EntryComponent {...fileEntryProps} dndState={dndState} />\r\n                </ClickableWrapper>\r\n            )}\r\n        </DnDFileEntry>\r\n    );\r\n});\r\nSmartFileEntry.displayName = 'SmartFileEntry';\r\n\r\nconst useStyles = makeGlobalChonkyStyles(() => ({\r\n    fileEntryClickableWrapper: {\r\n        // We disable default browser outline because Chonky provides its own outline\r\n        // (which doesn't compromise accessibility, hopefully)\r\n        outline: 'none !important',\r\n        position: 'relative',\r\n        height: '100%',\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { CSSProperties, useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { VariableSizeGrid } from 'react-window';\r\n\r\nimport { ChonkyActions } from '../../action-definitions';\r\nimport { selectFileViewConfig, selectors } from '../../redux/selectors';\r\nimport { FileViewConfigGrid } from '../../types/file-view.types';\r\nimport { RootState } from '../../types/redux.types';\r\nimport { useInstanceVariable } from '../../util/hooks-helpers';\r\nimport { makeGlobalChonkyStyles, useIsMobileBreakpoint } from '../../util/styles';\r\nimport { SmartFileEntry } from './FileEntry';\r\n\r\nexport interface FileListGridProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface GridConfig {\r\n    rowCount: number;\r\n    columnCount: number;\r\n    gutter: number;\r\n    rowHeight: number;\r\n    columnWidth: number;\r\n}\r\n\r\nexport const isMobileDevice = () => {\r\n    // noinspection JSDeprecatedSymbols\r\n    return typeof window.orientation !== 'undefined' || navigator.userAgent.indexOf('IEMobile') !== -1;\r\n};\r\n\r\nexport const getGridConfig = (\r\n    width: number,\r\n    fileCount: number,\r\n    viewConfig: FileViewConfigGrid,\r\n    isMobileBreakpoint: boolean\r\n): GridConfig => {\r\n    const gutter = isMobileBreakpoint ? 5 : 8;\r\n    const scrollbar = isMobileDevice() ? 0 : 18;\r\n\r\n    let columnCount: number;\r\n    let columnWidth: number;\r\n    if (isMobileBreakpoint) {\r\n        columnCount = 2;\r\n        columnWidth = (width - gutter - scrollbar) / columnCount;\r\n    } else {\r\n        columnWidth = viewConfig.entryWidth;\r\n        columnCount = Math.max(1, Math.floor((width - scrollbar) / (columnWidth + gutter)));\r\n    }\r\n\r\n    const rowCount = Math.ceil(fileCount / columnCount);\r\n\r\n    return {\r\n        rowCount,\r\n        columnCount,\r\n        gutter,\r\n        rowHeight: viewConfig.entryHeight,\r\n        columnWidth,\r\n    };\r\n};\r\n\r\nexport const GridContainer: React.FC<FileListGridProps> = React.memo(props => {\r\n    const { width, height } = props;\r\n\r\n    const viewConfig = useSelector(selectFileViewConfig) as FileViewConfigGrid;\r\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\r\n    const fileCount = useMemo(() => displayFileIds.length, [displayFileIds]);\r\n\r\n    const gridRef = useRef<VariableSizeGrid>();\r\n    const isMobileBreakpoint = useIsMobileBreakpoint();\r\n\r\n    // Whenever the grid config changes at runtime, we call a method on the\r\n    // `VariableSizeGrid` handle to reset column width/row height cache.\r\n    // !!! Note that we deliberately update the `gridRef` firsts and update the React\r\n    //     state AFTER that. This is needed to avoid file entries jumping up/down.\r\n    const [gridConfig, setGridConfig] = useState(getGridConfig(width, fileCount, viewConfig, isMobileBreakpoint));\r\n    const gridConfigRef = useRef(gridConfig);\r\n    useEffect(() => {\r\n        const oldConf = gridConfigRef.current;\r\n        const newConf = getGridConfig(width, fileCount, viewConfig, isMobileBreakpoint);\r\n\r\n        gridConfigRef.current = newConf;\r\n        if (gridRef.current) {\r\n            if (oldConf.rowCount !== newConf.rowCount) {\r\n                gridRef.current.resetAfterRowIndex(Math.min(oldConf.rowCount, newConf.rowCount) - 1);\r\n            }\r\n            if (oldConf.columnCount !== newConf.columnCount) {\r\n                gridRef.current.resetAfterColumnIndex(Math.min(oldConf.columnCount, newConf.rowCount) - 1);\r\n            }\r\n            if (oldConf.columnWidth !== newConf.columnWidth) {\r\n                gridRef.current.resetAfterIndices({ columnIndex: 0, rowIndex: 0 });\r\n            }\r\n        }\r\n\r\n        setGridConfig(newConf);\r\n    }, [setGridConfig, gridConfigRef, isMobileBreakpoint, width, viewConfig, fileCount]);\r\n\r\n    const sizers = useMemo(() => {\r\n        const gc = gridConfigRef;\r\n        return {\r\n            getColumnWidth: (index: number) =>\r\n                gc.current.columnWidth! + (index === gc.current.columnCount - 1 ? 0 : gc.current.gutter),\r\n            getRowHeight: (index: number) =>\r\n                gc.current.rowHeight + (index === gc.current.rowCount - 1 ? 0 : gc.current.gutter),\r\n        };\r\n    }, [gridConfigRef]);\r\n\r\n    const displayFileIdsRef = useInstanceVariable(useSelector(selectors.getDisplayFileIds));\r\n    const getItemKey = useCallback(\r\n        (data: { columnIndex: number; rowIndex: number; data: any }) => {\r\n            const index = data.rowIndex * gridConfigRef.current.columnCount + data.columnIndex;\r\n\r\n            return displayFileIdsRef.current[index] ?? `loading-file-${index}`;\r\n        },\r\n        [gridConfigRef, displayFileIdsRef]\r\n    );\r\n\r\n    const cellRenderer = useCallback(\r\n        (data: { rowIndex: number; columnIndex: number; style: CSSProperties }) => {\r\n            const gc = gridConfigRef;\r\n            const index = data.rowIndex * gc.current.columnCount + data.columnIndex;\r\n            const fileId = displayFileIds[index];\r\n            if (displayFileIds[index] === undefined) return null;\r\n\r\n            const styleWithGutter: CSSProperties = {\r\n                ...data.style,\r\n                paddingRight: data.columnIndex === gc.current.columnCount - 1 ? 0 : gc.current.gutter,\r\n                paddingBottom: data.rowIndex === gc.current.rowCount - 1 ? 0 : gc.current.gutter,\r\n                boxSizing: 'border-box',\r\n            };\r\n\r\n            return (\r\n                <div style={styleWithGutter}>\r\n                    <SmartFileEntry fileId={fileId ?? null} displayIndex={index} fileViewMode={viewConfig.mode} />\r\n                </div>\r\n            );\r\n        },\r\n        [displayFileIds, viewConfig.mode]\r\n    );\r\n\r\n    const classes = useStyles();\r\n    const gridComponent = useMemo(() => {\r\n        return (\r\n            <VariableSizeGrid\r\n                ref={gridRef as any}\r\n                className={classes.gridContainer}\r\n                estimatedRowHeight={gridConfig.rowHeight + gridConfig.gutter}\r\n                rowHeight={sizers.getRowHeight}\r\n                estimatedColumnWidth={gridConfig.columnWidth + gridConfig.gutter}\r\n                columnWidth={sizers.getColumnWidth}\r\n                columnCount={gridConfig.columnCount}\r\n                height={height}\r\n                rowCount={gridConfig.rowCount}\r\n                width={width}\r\n                itemKey={getItemKey}\r\n            >\r\n                {cellRenderer}\r\n            </VariableSizeGrid>\r\n        );\r\n    }, [\r\n        classes.gridContainer,\r\n        gridConfig.rowHeight,\r\n        gridConfig.gutter,\r\n        gridConfig.columnWidth,\r\n        gridConfig.columnCount,\r\n        gridConfig.rowCount,\r\n        sizers.getRowHeight,\r\n        sizers.getColumnWidth,\r\n        height,\r\n        width,\r\n        getItemKey,\r\n        cellRenderer,\r\n    ]);\r\n\r\n    return gridComponent;\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(() => ({\r\n    gridContainer: {},\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { CSSProperties, useCallback, useMemo, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FixedSizeList } from 'react-window';\r\n\r\nimport { selectFileViewConfig, selectors } from '../../redux/selectors';\r\nimport { FileViewMode } from '../../types/file-view.types';\r\nimport { useInstanceVariable } from '../../util/hooks-helpers';\r\nimport { makeLocalChonkyStyles } from '../../util/styles';\r\nimport { SmartFileEntry } from './FileEntry';\r\n\r\nexport interface FileListListProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport const ListContainer: React.FC<FileListListProps> = React.memo(props => {\r\n    const { width, height } = props;\r\n\r\n    const viewConfig = useSelector(selectFileViewConfig);\r\n\r\n    const listRef = useRef<FixedSizeList>();\r\n\r\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\r\n    const displayFileIdsRef = useInstanceVariable(displayFileIds);\r\n    const getItemKey = useCallback(\r\n        (index: number) => displayFileIdsRef.current[index] ?? `loading-file-${index}`,\r\n        [displayFileIdsRef]\r\n    );\r\n\r\n    const classes = useStyles();\r\n    const listComponent = useMemo(() => {\r\n        // When entry size is null, we use List view\r\n        const rowRenderer = (data: { index: number; style: CSSProperties }) => {\r\n            return (\r\n                <div style={data.style}>\r\n                    <SmartFileEntry\r\n                        fileId={displayFileIds[data.index] ?? null}\r\n                        displayIndex={data.index}\r\n                        fileViewMode={FileViewMode.List}\r\n                    />\r\n                </div>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <FixedSizeList\r\n                ref={listRef as any}\r\n                className={classes.listContainer}\r\n                itemSize={viewConfig.entryHeight}\r\n                height={height}\r\n                itemCount={displayFileIds.length}\r\n                width={width}\r\n                itemKey={getItemKey}\r\n            >\r\n                {rowRenderer}\r\n            </FixedSizeList>\r\n        );\r\n    }, [\r\n        classes.listContainer,\r\n        viewConfig.entryHeight,\r\n        height,\r\n        displayFileIds,\r\n        width,\r\n        getItemKey,\r\n    ]);\r\n\r\n    return listComponent;\r\n});\r\n\r\nconst useStyles = makeLocalChonkyStyles(theme => ({\r\n    listContainer: {\r\n        borderTop: `solid 1px ${theme.palette.divider}`,\r\n    },\r\n}));\r\n","import React, { UIEvent, useCallback, useContext, useMemo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\n\r\nimport { ChonkyActions } from '../../action-definitions/index';\r\nimport { selectCurrentFolder, selectFileViewConfig, selectors } from '../../redux/selectors';\r\nimport { FileViewMode } from '../../types/file-view.types';\r\nimport { ChonkyIconName } from '../../types/icons.types';\r\nimport { useFileDrop } from '../../util/dnd';\r\nimport { ChonkyIconContext } from '../../util/icon-helper';\r\nimport {\r\n    c, getStripeGradient, makeGlobalChonkyStyles, makeLocalChonkyStyles\r\n} from '../../util/styles';\r\nimport { FileListEmpty } from './FileListEmpty';\r\nimport { GridContainer } from './GridContainer';\r\nimport { ListContainer } from './ListContainer';\r\n\r\nexport interface FileListProps {\r\n    onScroll?: (e: UIEvent<HTMLDivElement>) => void;\r\n}\r\n\r\ninterface StyleState {\r\n    dndCanDrop: boolean;\r\n    dndIsOverCurrent: boolean;\r\n}\r\n\r\nexport const FileList: React.FC<FileListProps> = React.memo((props: FileListProps) => {\r\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\r\n    const viewConfig = useSelector(selectFileViewConfig);\r\n\r\n    const currentFolder = useSelector(selectCurrentFolder);\r\n    const { drop, dndCanDrop, dndIsOverCurrent } = useFileDrop({ file: currentFolder });\r\n    const styleState = useMemo<StyleState>(() => ({ dndCanDrop, dndIsOverCurrent }), [dndCanDrop, dndIsOverCurrent]);\r\n\r\n    const localClasses = useLocalStyles(styleState);\r\n    const classes = useStyles(viewConfig);\r\n    const { onScroll } = props;\r\n\r\n    // In Chonky v0.x, this field was user-configurable. In Chonky v1.x+, we hardcode\r\n    // this to `true` to simplify configuration. Users can just wrap Chonky in their\r\n    // own `div` if they want to have finer control over the height.\r\n    const fillParentContainer = true;\r\n\r\n    const listRenderer = useCallback(\r\n        ({ width, height }: { width: number; height: number }) => {\r\n            if (displayFileIds.length === 0) {\r\n                return <FileListEmpty width={width} height={viewConfig.entryHeight} />;\r\n            } else if (viewConfig.mode === FileViewMode.List) {\r\n                return <ListContainer width={width} height={height} />;\r\n            } else {\r\n                return <GridContainer width={width} height={height} />;\r\n            }\r\n        },\r\n        [displayFileIds, viewConfig]\r\n    );\r\n\r\n    const ChonkyIcon = useContext(ChonkyIconContext);\r\n    return (\r\n        <div onScroll={onScroll} ref={drop} className={c([classes.fileListWrapper, localClasses.fileListWrapper])} role=\"list\">\r\n            <div className={localClasses.dndDropZone}>\r\n                <div className={localClasses.dndDropZoneIcon}>\r\n                    <ChonkyIcon icon={dndCanDrop ? ChonkyIconName.dndCanDrop : ChonkyIconName.dndCannotDrop} />\r\n                </div>\r\n            </div>\r\n            <AutoSizer disableHeight={!fillParentContainer}>{listRenderer}</AutoSizer>\r\n        </div>\r\n    );\r\n});\r\nFileList.displayName = 'FileList';\r\n\r\nconst useLocalStyles = makeLocalChonkyStyles(theme => ({\r\n    fileListWrapper: {\r\n        minHeight: ChonkyActions.EnableGridView.fileViewConfig.entryHeight + 2,\r\n        background: (state: StyleState) =>\r\n            state.dndIsOverCurrent && state.dndCanDrop\r\n                ? state.dndCanDrop\r\n                    ? getStripeGradient(theme.dnd.fileListCanDropMaskOne, theme.dnd.fileListCanDropMaskTwo)\r\n                    : getStripeGradient(theme.dnd.fileListCannotDropMaskOne, theme.dnd.fileListCannotDropMaskTwo)\r\n                : 'none',\r\n    },\r\n    dndDropZone: {\r\n        display: (state: StyleState) =>\r\n            // When we cannot drop, we don't show an indicator at all\r\n            state.dndIsOverCurrent && state.dndCanDrop ? 'block' : 'none',\r\n        borderRadius: theme.gridFileEntry.borderRadius,\r\n        pointerEvents: 'none',\r\n        position: 'absolute',\r\n        height: '100%',\r\n        width: '100%',\r\n        zIndex: 2,\r\n    },\r\n    dndDropZoneIcon: {\r\n        backgroundColor: (state: StyleState) => (state.dndCanDrop ? theme.dnd.canDropMask : theme.dnd.cannotDropMask),\r\n        color: (state: StyleState) => (state.dndCanDrop ? theme.dnd.canDropColor : theme.dnd.cannotDropColor),\r\n        borderRadius: theme.gridFileEntry.borderRadius,\r\n        transform: 'translateX(-50%) translateY(-50%)',\r\n        position: 'absolute',\r\n        textAlign: 'center',\r\n        lineHeight: '60px',\r\n        fontSize: '2em',\r\n        left: '50%',\r\n        height: 60,\r\n        top: '50%',\r\n        width: 60,\r\n    },\r\n}));\r\n\r\nconst useStyles = makeGlobalChonkyStyles(() => ({\r\n    fileListWrapper: {\r\n        height: '100%',\r\n        maxHeight: '100%',\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React, { ReactElement, useEffect, useMemo } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport Menu from '@mui/material/Menu';\r\n\r\nimport { reduxActions } from '../../redux/reducers';\r\nimport { selectContextMenuConfig, selectContextMenuItems } from '../../redux/selectors';\r\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\r\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\r\nimport { useContextMenuDismisser } from './FileContextMenu-hooks';\r\nimport { SmartToolbarDropdownButton } from './ToolbarDropdownButton';\r\n\r\nexport interface FileContextMenuProps {}\r\n\r\nexport const FileContextMenu: React.FC<FileContextMenuProps> = React.memo(() => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(reduxActions.setContextMenuMounted(true));\r\n        return () => {\r\n            dispatch(reduxActions.setContextMenuMounted(false));\r\n        };\r\n    }, [dispatch]);\r\n\r\n    const intl = useIntl();\r\n    const browserMenuShortcutString = intl.formatMessage(\r\n        {\r\n            id: getI18nId(I18nNamespace.FileContextMenu, 'browserMenuShortcut'),\r\n            defaultMessage: 'Browser menu: {shortcut}',\r\n        },\r\n        { shortcut: <strong>Alt + Right Click</strong> }\r\n    );\r\n\r\n    const contextMenuConfig = useSelector(selectContextMenuConfig);\r\n    const contextMenuItems = useSelector(selectContextMenuItems);\r\n\r\n    const hideContextMenu = useContextMenuDismisser();\r\n    const contextMenuItemComponents = useMemo(() => {\r\n        const components: ReactElement[] = [];\r\n        for (let i = 0; i < contextMenuItems.length; ++i) {\r\n            const item = contextMenuItems[i];\r\n\r\n            if (typeof item === 'string') {\r\n                components.push(\r\n                    <SmartToolbarDropdownButton\r\n                        key={`context-menu-item-${item}`}\r\n                        fileActionId={item}\r\n                        onClickFollowUp={hideContextMenu}\r\n                    />\r\n                );\r\n            } else {\r\n                item.fileActionIds.map(id =>\r\n                    components.push(\r\n                        <SmartToolbarDropdownButton\r\n                            key={`context-menu-item-${item.name}-${id}`}\r\n                            fileActionId={id}\r\n                            onClickFollowUp={hideContextMenu}\r\n                        />\r\n                    )\r\n                );\r\n            }\r\n        }\r\n        return components;\r\n    }, [contextMenuItems, hideContextMenu]);\r\n\r\n    const anchorPosition = useMemo(\r\n        () => (contextMenuConfig ? { top: contextMenuConfig.mouseY, left: contextMenuConfig.mouseX } : undefined),\r\n        [contextMenuConfig]\r\n    );\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Menu\r\n            elevation={2}\r\n            disablePortal\r\n            onClose={hideContextMenu}\r\n            transitionDuration={150}\r\n            open={!!contextMenuConfig}\r\n            anchorPosition={anchorPosition}\r\n            anchorReference=\"anchorPosition\"\r\n            classes={{ list: classes.contextMenuList }}\r\n        >\r\n            {contextMenuItemComponents}\r\n            <ListSubheader component=\"div\" className={classes.browserMenuTooltip}>\r\n                {browserMenuShortcutString}\r\n            </ListSubheader>\r\n        </Menu>\r\n    );\r\n});\r\n\r\nconst useStyles = makeGlobalChonkyStyles(() => ({\r\n    contextMenuList: {\r\n        paddingBottom: important(0),\r\n        paddingTop: important(0),\r\n    },\r\n    browserMenuTooltip: {\r\n        lineHeight: important('30px'),\r\n        fontSize: important('0.7em'),\r\n    },\r\n}));\r\n","/**\r\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\r\n * @copyright 2020\r\n * @license MIT\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\r\nimport { FileList } from '../file-list/FileList';\r\nimport { FileBrowser } from './FileBrowser';\r\nimport { FileContextMenu } from './FileContextMenu';\r\nimport { FileNavbar } from './FileNavbar';\r\nimport { FileToolbar } from './FileToolbar';\r\n\r\nexport const FullFileBrowser = React.memo(\r\n    React.forwardRef<FileBrowserHandle, FileBrowserProps>((props, ref) => {\r\n        const { onScroll } = props\r\n        return (\r\n            <FileBrowser ref={ref} {...props}>\r\n                <FileNavbar />\r\n                <FileToolbar />\r\n                <FileList onScroll={onScroll}/>\r\n                <FileContextMenu/>\r\n            </FileBrowser>\r\n        );\r\n    })\r\n);\r\nFullFileBrowser.displayName = 'FullFileBrowser';\r\n","/**\r\n *\r\n */\r\n\r\nimport { useCallback, useMemo, useState } from 'react';\r\n\r\nimport { ChonkyActions } from '../action-definitions';\r\nimport { FileActionData } from '../types/action-handler.types';\r\nimport { FileAction } from '../types/action.types';\r\nimport { FileArray, FileData } from '../types/file.types';\r\nimport { FileHelper } from '../util/file-helper';\r\n\r\nexport interface CustomFileData extends FileData {\r\n    parentId?: string;\r\n    childrenIds?: string[];\r\n}\r\nexport interface CustomFileMap<FT extends CustomFileData> {\r\n    [fileId: string]: FT;\r\n}\r\nexport interface FileMapParams<FT extends CustomFileData> {\r\n    baseFileMap: CustomFileMap<FT>;\r\n    initialFolderId: string;\r\n}\r\n\r\nexport const useFolderChain = <FT extends CustomFileData>(\r\n    fileMap: CustomFileMap<FT>,\r\n    currentFolderId: string\r\n): FileArray<FT> => {\r\n    return useMemo(() => {\r\n        const currentFolder = fileMap[currentFolderId];\r\n\r\n        const folderChain = [currentFolder];\r\n\r\n        let parentId = currentFolder.parentId;\r\n        while (parentId) {\r\n            const parentFile = fileMap[parentId];\r\n            if (parentFile) {\r\n                folderChain.unshift(parentFile);\r\n                parentId = parentFile.parentId;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return folderChain;\r\n    }, [currentFolderId, fileMap]);\r\n};\r\n\r\nexport const useFiles = <FT extends CustomFileData>(\r\n    fileMap: CustomFileMap<FT>,\r\n    currentFolderId: string\r\n): FileArray<FT> => {\r\n    return useMemo(() => {\r\n        const currentFolder = fileMap[currentFolderId];\r\n        const childrenIds = currentFolder.childrenIds!;\r\n        const files = childrenIds.map((fileId: string) => fileMap[fileId]);\r\n        return files;\r\n    }, [currentFolderId, fileMap]);\r\n};\r\n\r\nexport const useFileMapMethods = <FT extends CustomFileData>(\r\n    baseFileMap: CustomFileMap<FT>,\r\n    initialFolderId: string\r\n) => {\r\n    const [fileMap, setFileMap] = useState(baseFileMap);\r\n    const [currentFolderId, setCurrentFolderId] = useState(initialFolderId);\r\n    const resetFileMap = useCallback(() => {\r\n        setFileMap(baseFileMap);\r\n        setCurrentFolderId(initialFolderId);\r\n    }, [baseFileMap, initialFolderId]);\r\n    const moveFiles = useCallback(\r\n        (files: FT[], source: FT, destination: FT) =>\r\n            setFileMap(currentFileMap => {\r\n                const newFileMap = { ...currentFileMap };\r\n                const moveFileIds = new Set(files.map(f => f.id));\r\n\r\n                // Delete files from their source folder.\r\n                const newSourceChildrenIds = source.childrenIds!.filter(id => !moveFileIds.has(id));\r\n                newFileMap[source.id] = {\r\n                    ...source,\r\n                    childrenIds: newSourceChildrenIds,\r\n                    childrenCount: newSourceChildrenIds.length,\r\n                };\r\n\r\n                // Add the files to their destination folder.\r\n                const newDestinationChildrenIds = [...destination.childrenIds!, ...files.map(f => f.id)];\r\n                newFileMap[destination.id] = {\r\n                    ...destination,\r\n                    childrenIds: newDestinationChildrenIds,\r\n                    childrenCount: newDestinationChildrenIds.length,\r\n                };\r\n\r\n                // Finally, update the parent folder ID on the files from source folder\r\n                // ID to the destination folder ID.\r\n                files.forEach(file => {\r\n                    newFileMap[file.id] = {\r\n                        ...file,\r\n                        parentId: destination.id,\r\n                    };\r\n                });\r\n\r\n                return newFileMap;\r\n            }),\r\n        []\r\n    );\r\n\r\n    const methods = useMemo(\r\n        () => ({\r\n            setFileMap,\r\n            setCurrentFolderId,\r\n            resetFileMap,\r\n            moveFiles,\r\n        }),\r\n        [setFileMap, setCurrentFolderId, resetFileMap, moveFiles]\r\n    );\r\n    return {\r\n        fileMap,\r\n        currentFolderId,\r\n        methods,\r\n    };\r\n};\r\nexport type FileMethods = ReturnType<typeof useFileMapMethods>['methods'];\r\n\r\nexport const useFileActionHandler = (methods: FileMethods) => {\r\n    return useCallback(\r\n        (data: FileActionData<FileAction>) => {\r\n            if (data.id === ChonkyActions.OpenFiles.id) {\r\n                const { targetFile, files } = data.payload;\r\n                const fileToOpen = targetFile ?? files[0];\r\n                if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\r\n                    methods.setCurrentFolderId(fileToOpen.id);\r\n                }\r\n            } else if (data.id === ChonkyActions.MoveFiles.id) {\r\n                methods.moveFiles(data.payload.files, data.payload.source!, data.payload.destination);\r\n            }\r\n        },\r\n        [methods]\r\n    );\r\n};\r\n\r\nexport const useFileMap = <FT extends CustomFileData = CustomFileData>({\r\n    baseFileMap,\r\n    initialFolderId,\r\n}: FileMapParams<FT>) => {\r\n    const { fileMap, currentFolderId, methods } = useFileMapMethods(baseFileMap, initialFolderId);\r\n    const folderChain = useFolderChain(fileMap, currentFolderId);\r\n    const files = useFiles(fileMap, currentFolderId);\r\n    const fileActionHandler = useFileActionHandler(methods as FileMethods);\r\n\r\n    const data = {\r\n        fileMap,\r\n        currentFolderId,\r\n        folderChain,\r\n        files,\r\n    };\r\n    return { data, methods, fileActionHandler };\r\n};\r\n"],"names":["SortOrder","UNINITIALIZED_SENTINEL","useStaticValue","factory","valueRef","useRef","current","useInstanceVariable","value","ref","useEffect","Logger","error","args","console","warn","debug","formatBullets","bullets","join","FileHelper","isDirectory","file","isDir","isHidden","isSymlink","isEncrypted","isClickable","isOpenable","openable","isSelectable","selectable","isDraggable","draggable","isDroppable","droppable","isDndOpenable","dndOpenable","getModDate","modDate","parseDate","maybeDate","Date","message","isNaN","getTime","getChildrenCount","childrenCount","sanitizeInputArray","mode","rawArray","sanitizedFiles","errorMessages","Array","isArray","nonObjectFileCount","missingFieldFileCount","seenIds","Set","duplicateIds","i","length","item","id","name","has","add","push","size","repeatedIdsString","from","arrayString","itemString","errorMessageString","sanitizedArray","OptionIds","ShowHiddenFiles","ShowFoldersFirst","DarkMode","FileViewMode","ChonkyIconName","selectInstanceId","state","instanceId","selectExternalFileActionHandler","externalFileActionHandler","selectFileActionMap","fileActionMap","selectFileActionIds","fileActionIds","selectFileActionData","fileActionId","selectToolbarItems","toolbarItems","selectContextMenuItems","contextMenuItems","selectFolderChain","folderChain","selectCurrentFolder","selectParentFolder","selectFileMap","fileMap","selectCleanFileIds","cleanFileIds","selectFileData","fileId","selectHiddenFileIdMap","hiddenFileIdMap","selectHiddenFileCount","Object","keys","selectFocusSearchInput","focusSearchInput","selectSearchString","searchString","selectSelectionMap","selectionMap","selectSelectedFileIds","selectSelectionSize","selectIsFileSelected","selectSelectedFiles","map","selectSelectedFilesForAction","action","requiresSelection","getSelectedFiles","fileFilter","selectSelectedFilesForActionCount","getSelectedFilesForAction","_getSelectedFilesForA","selectDisableSelection","disableSelection","selectFileViewConfig","fileViewConfig","selectSortActionId","sortActionId","selectSortOrder","sortOrder","selectOptionMap","optionMap","selectOptionValue","optionId","selectThumbnailGenerator","thumbnailGenerator","selectDoubleClickDelay","doubleClickDelay","selectIsDnDDisabled","disableDragAndDrop","selectClearSelectionOnOutsideClick","clearSelectionOnOutsideClick","selectContextMenuMounted","contextMenuMounted","selectContextMenuConfig","contextMenuConfig","selectContextMenuTriggerFile","config","triggerFileId","getFileActionMap","getOptionMap","getFileMap","getFileIds","fileIds","getCleanFileIds","getSortActionId","getSortOrder","getSearchString","_getLastClick","lastClick","makeGetAction","fileActionSelector","createSelector","makeGetOptionValue","defaultValue","undefined","makeGetFiles","fileIdsSelector","getSortedFileIds","files","sortAction","showFolderFirst","prepareSortKeySelector","selector","sortFunctions","desc","sortKeySelector","ASC","sort","by","getSearcher","cleanFiles","FuzzySearch","caseSensitive","getSearchFilteredFileIds","searcher","search","f","getHiddenFileIdMap","searchFilteredFileIds","showHiddenFiles","searchFilteredFileIdsSet","forEach","selectors","getDisplayFileIds","sortedFileIds","filter","getLastClickIndex","displayFileIds","index","getFileData","getIsFileSelected","selectedFiles","filters","filteredSelectedFiles","reduce","prevFiles","thunkUpdateRawFileActions","rawFileActions","disableDefaultFileActions","dispatch","defaultActionsToAdd","disabledActionIds","DefaultFileActions","fileActions","seenActionIds","addToSeen","a","wasNotSeen","fileActionArrays","duplicateFreeArrays","arr","duplicateFreeArray","concat","mergeFileActionsArrays","EssentialFileActions","optionDefaults","option","reduxActions","setRawFileActions","setFileActionsErrorMessages","setFileActions","setOptionDefaults","thunkUpdateToolbarNContextMenuItems","excludedToolbarFileActionIds","ChonkyActions","OpenParentFolder","seenToolbarGroups","seenContextMenuGroups","getGroup","itemArray","seenMap","groupName","group","button","toolbar","contextMenu","updateFileActionMenuItems","thunkUpdateDefaultFileViewActionId","getState","setFileViewConfig","thunkActivateSortAction","order","DESC","setSort","actionId","thunkDispatchFileAction","data","_dispatch","Promise","resolve","thunkRequestFileAction","payload","selectedFilesForAction","actionState","contextMenuTriggerFile","toggleOption","selectionTransform","prevSelection","hiddenFileIds","newSelection","clearSelection","selectFiles","reset","thunkApplySelectionTransform","effect","maybeEffectPromise","reduxDispatch","getReduxState","then","effectResult","triggerDispatchAfterEffect","I18nNamespace","defineFileAction","__payloadType","hotkeys","errorMessage","Error","findElementAmongAncestors","maybeElement","predicate","parentElement","getValueOrFallback","fallback","desiredType","EssentialActions","MouseClickFile","params","clickType","OpenFiles","targetFile","ctrlKey","toggleSelection","exclusive","setLastClickIndex","fileDisplayIndex","shiftKey","lastClickIndex","rangeStart","rangeEnd","fileIdsToSelect","slice","KeyboardClickFile","enterKey","spaceKey","StartDragNDrop","draggedFile","EndDragNDrop","destination","MoveFiles","ChangeSelection","icon","openParentFolder","iconOnly","parentFolder","OpenFileContextMenu","triggerFile","showContextMenu","mouseX","clientX","mouseY","clientY","DefaultActions","OpenSelection","openFiles","SelectAllFiles","selectAllFiles","ClearSelection","EnableListView","List","entryHeight","list","EnableCompactView","Compact","entryWidth","compact","EnableGridView","Grid","smallThumbnail","SortFilesByName","toLowerCase","SortFilesBySize","SortFilesByDate","ToggleHiddenFiles","ToggleShowFoldersFirst","FocusSearchInput","ToggleDarkMode","ExtraActions","CopyFiles","copy","CreateFolder","tooltip","folderCreate","UploadFiles","upload","DownloadFiles","download","DeleteFiles","trash","initialRootState","fileActionsErrorMessages","rawFolderChain","folderChainErrorMessages","rawFiles","filesErrorMessages","searchMode","createSlice","initialState","reducers","setExternalFileActionHandler","setRawFolderChain","setRawFiles","selectedFileId","setSortedFileIds","setHiddenFileIds","setFocusSearchInput","setSearchString","oldValue","setSelectionDisabled","setThumbnailGenerator","setDoubleClickDelay","setDisableDragAndDrop","setClearSelectionOnOutsideClick","setContextMenuMounted","hideContextMenu","actions","rootReducer","reducer","useChonkyStore","chonkyInstanceId","store","preloadedState","configureStore","middleware","getDefaultMiddleware","serializableCheck","devTools","selectionWatcher","watch","unsubscribeCallbacks","subscribe","oldSelection","selectedFilesIds","selection","unsubscribe","useStoreWatchers","useParamSelector","parametrizedSelector","selectorParams","useCallback","useSelector","useDTE","actionCreator","useDispatch","usePropReduxUpdate","ChonkyIconPlaceholder","React","title","defaultConfig","onFileAction","disableDragAndDropProvider","defaultSortActionId","defaultFileViewActionId","iconComponent","darkMode","i18n","getI18nId","namespace","stringId","getActionI18nId","FileActions","useLocalizedFileActionStrings","intl","useIntl","useMemo","buttonName","buttonTooltip","formatMessage","defaultMessage","_action$button","_action$button2","_action$button3","useLocalizedFileEntryStrings","formatters","useContext","ChonkyFormattersContext","fileModDateString","formatFileModDate","fileSizeString","formatFileSize","defaultFormatters","safeModDate","formatDate","dateStyle","timeStyle","_intl","sizeData","filesize","bits","output","symbol","Math","round","createContext","ChonkyIconContext","VideoExtensions","ImageExtensions","AudioExtensions","ColorsLight","ColorsDark","iconTrie","colourIndex","IconsToExtensions","license","model","database","text","archive","image","video","code","info","key","lock","music","terminal","users","linux","ubuntu","windows","rust","python","nodejs","php","git","adobe","pdf","excel","word","flash","exactTrie","ExactTrie","ignoreCase","pair","extensions","put","colorCode","getIconTrie","lightTheme","colors","debugRed","debugBlue","debugGreen","debugPurple","debugYellow","textActive","fontSizes","rootPrimary","margins","rootLayoutMargin","lineHeight","fontSize","buttonRadius","dnd","canDropColor","cannotDropColor","canDropMask","cannotDropMask","fileListCanDropMaskOne","fileListCanDropMaskTwo","fileListCannotDropMaskOne","fileListCannotDropMaskTwo","dragLayer","border","padding","borderRadius","fileList","desktopGridGutter","mobileGridGutter","gridFileEntry","childrenCountSize","iconColorFocused","iconSize","iconColor","fileColorTint","folderBackColorTint","folderFrontColorTint","listFileEntry","propertyFontSize","iconFontSize","iconBorderRadius","darkThemeOverride","mobileThemeOverride","useIsMobileBreakpoint","useMediaQuery","getStripeGradient","colorOne","colorTwo","makeLocalChonkyStyles","styles","createUseStyles","makeGlobalChonkyStyles","makeStyles","selectorMapping","useStyles","theme","localStyles","globalStyles","localSelector","globalSelector","classes","important","c","classnames","ChonkyBusinessLogicInner","memo","forwardRef","props","useStore","useImperativeHandle","getFileSelection","setFileSelection","requestFileAction","useFileBrowserHandle","displayName","ChonkyBusinessLogic","useDndContextAvailable","DndContext","dragDropManager","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","initialCursorOffset","initialFileOffset","currentFileOffset","display","transform","x","y","WebkitTransform","DnDFileListDragLayer","useDragLayer","monitor","getItem","itemType","getItemType","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","isDragging","selectionSize","style","className","fileDragPreview","boxShadow","palette","divider","backgroundColor","background","color","primary","HotkeyListener","fileAction","hotkeysStr","hotkeyCallback","event","preventDefault","unbind","ChonkyPresentationLayer","children","dndDisabled","handleClickAway","target","element","tagName","hotkeyListenerComponents","dndContextAvailable","contextMenuMountedRef","altKey","fileEntryWrapperDiv","dataset","chonkyFileId","useContextMenuTrigger","ClickAwayListener","onClickAway","Box","chonkyRoot","onContextMenu","paper","touchAction","fontFamily","flexDirection","boxSizing","textAlign","webkitTouchCallout","webkitUserSelect","mozUserSelect","msUserSelect","userSelect","FileBrowser","shortid","generate","isMobileBreakpoint","muiTheme","createTheme","default","combinedTheme","merge","chonkyComps","IntlProvider","locale","defaultLocale","Provider","ReduxProvider","ThemeProvider","StyledEngineProvider","injectFirst","MuiThemeProvider","DndProvider","backend","HTML5Backend","CustomVisibilityState","useFileDrop","forceDisableDrop","includeChildrenDrops","folderChainRef","mockHook","useHook","useDrop","useDropIfAvailable","accept","drop","_item","canDrop","dropTarget","isOver","shallow","source","prohibitedFileIds","folder","collect","isOverCurrent","dndIsOver","dndIsOverCurrent","dndCanDrop","useDndHoverOpen","dndState","currentFolderRef","timeout","_currentFolderRef$cur","setTimeout","clearTimeout","TextPlaceholder","min","max","placeholderLength","maxLength","minLength","floor","random","whitespace","repeat","textPlaceholder","dangerouslySetInnerHTML","__html","@keyframes loading-placeholder","0%","opacity","50%","100%","animationName","animationIterationCount","animationTimingFunction","animationDuration","whiteSpace","overflow","maxWidth","minWidth","useFileEntryHtmlProps","role","data-test-id","data-chonky-file-id","useFileEntryState","selected","focused","iconData","getWithCheckpoints","loading","useIconData","useThumbnailUrl","thumbnailUrl","thumbnailLoading","fileColor","iconSpin","useDndIcon","dndIconName","dndCannotDrop","dndIsDragging","dndDragging","useState","setThumbnailUrl","setThumbnailLoading","loadingAttempts","loadingCancelled","useFileActionTrigger","useFileActionProps","optionValue","_action$option","actionSelectionEmpty","active","disabled","sortAsc","sortDesc","placeholder","toggleOn","toggleOff","isSortButtonAndCurrentSort","isFileViewButtonAndCurrentView","isOptionAndEnabled","customDisabled","customActive","customVisibility","Disabled","Active","ToolbarButton","externalClassName","onClick","dropdown","ChonkyIcon","iconWithText","fallbackIcon","fixedWidth","baseButton","iconOnlyButton","activeButton","Button","iconDropdown","textTransform","letterSpacing","paddingBottom","paddingTop","marginRight","marginLeft","marginTop","SmartToolbarButton","triggerAction","Hidden","FolderChainButton","first","baseBreadcrumb","disabledBreadcrumb","currentBreadcrumb","folderChainIcon","buttonContainer","dndIndicator","textDecoration","FileNavbar","folderChainItems","items","_loop","folderChainComponents","components","component","navbarWrapper","navbarContainer","Breadcrumbs","navbarBreadcrumbs","separator","upDirectoryButton","flexGrow","ToolbarDropdownButton","MenuItem","ListItemIcon","ListItemText","primaryTypographyProps","minHeight","SmartToolbarDropdownButton","onClickFollowUp","handleClick","ToolbarDropdown","anchor","setAnchor","currentTarget","handleClose","menuItemComponents","localizedName","FileActionGroups","Menu","autoFocus","keepMounted","elevation","anchorEl","onClose","open","Boolean","transitionDuration","dropdownList","ToolbarInfo","hiddenCount","fileCountString","Toolbar","fileCount","selectedString","hiddenString","infoContainer","Typography","infoText","variant","extraInfoSpan","selectionSizeText","hiddenCountText","ToolbarSearch","searchPlaceholderString","searchInputRef","reduxSearchString","localSearchString","setLocalSearchString","debouncedLocalSearchString","delay","debouncedValue","setDebouncedValue","handler","useDebounce","showLoadingIndicator","setShowLoadingIndicator","focus","handleChange","handleKeyUp","blur","TextField","searchFieldContainer","onChange","inputRef","InputProps","onKeyUp","startAdornment","InputAdornment","searchIcon","spin","searchFieldInput","inputProps","searchFieldInputInner","margin","paddingLeft","-webkit-appearance","FileToolbar","toolbarItemComponents","toolbarWrapper","toolbarContainer","toolbarLeft","toolbarRight","flexWrap","toolbarLeftFiller","FileListEmpty","emptyString","FileList","fileListEmpty","fileListEmptyContent","folderOpen","ClickableWrapper","WrapperTag","wrapperTag","passthroughProps","onSingleClick","onDoubleClick","onKeyboardClick","setFocused","counter","clickCount","clickTimeout","mouseClickEvent","metaKey","useClickHandler","handleKeyDown","keyboardClickEvent","nativeEvent","stopPropagation","useKeyDownHandler","compProps","onFocus","onBlur","onKeyDown","tabIndex","mergedProps","FileEntryName","modifierIconComponents","modifierIcons","hidden","symlink","useModifierIconComponents","fileNameComponent","parts","extension","ext","split","substr","useFileNameComponent","paddingRight","CompactEntry","entryState","fileEntryHtmlProps","listFileEntryIcon","listFileEntryDescription","listFileEntryName","listFileEntryProperties","listFileEntryProperty","alignItems","DnDFileEntry","fileRef","getDndStartPayload","reduxState","sourceInstanceId","canDrag","onDragStart","type","onDragEnd","dropResult","getDropResult","dropEffect","useDrag","useDragIfAvailable","begin","end","drag","preview","getEmptyImage","captureDraggingState","useFileDrag","useFileEntryDnD","fillParent","FileThumbnail","thumbnailStyle","backgroundImage","fileThumbnail","backgroundRepeat","backgroundPosition","backgroundSize","GridEntryDndIndicator","&:before","borderBottom","borderLeft","content","GridEntryPreviewFolder","folderClasses","useFolderStyles","fileClasses","useFileStyles","commonClasses","useCommonEntryStyles","previewFile","folderBackSideMid","folderBackSideTop","folderFrontSide","fileIcon","selectionIndicator","thumbnail","borderTopLeftRadius","borderTopRightRadius","right","&:after","borderRightColor","borderTopColor","borderBottomColor","borderLeftColor","borderWidth","borderStyle","bottom","shadows","GridEntryPreviewFile","focusIndicator","GridEntry","useFileEntryStyles","entryClassName","gridFileEntryPreview","gridFileEntryNameContainer","gridFileEntryName","wordBreak","ListEntry","styleState","listFileEntrySelection","textOverflow","flex","disabledDndState","SmartFileEntry","EntryComponent","displayIndex","fileViewMode","fileClickHandlers","onMouseClick","useFileClickHandlers","clickableWrapperProps","fileEntryClickableWrapper","fileEntryProps","outline","getGridConfig","viewConfig","columnCount","columnWidth","gutter","scrollbar","window","orientation","navigator","userAgent","indexOf","rowCount","ceil","rowHeight","GridContainer","gridRef","gridConfig","setGridConfig","gridConfigRef","oldConf","newConf","resetAfterRowIndex","resetAfterColumnIndex","resetAfterIndices","columnIndex","rowIndex","sizers","gc","getColumnWidth","getRowHeight","displayFileIdsRef","getItemKey","cellRenderer","styleWithGutter","VariableSizeGrid","gridContainer","estimatedRowHeight","estimatedColumnWidth","itemKey","ListContainer","listRef","FixedSizeList","listContainer","itemSize","itemCount","borderTop","currentFolder","localClasses","useLocalStyles","onScroll","listRenderer","fileListWrapper","dndDropZone","dndDropZoneIcon","AutoSizer","disableHeight","maxHeight","FileContextMenu","browserMenuShortcutString","shortcut","useContextMenuDismisser","contextMenuItemComponents","anchorPosition","disablePortal","anchorReference","contextMenuList","ListSubheader","browserMenuTooltip","FullFileBrowser","useFolderChain","currentFolderId","parentId","parentFile","unshift","useFiles","childrenIds","useFileMapMethods","baseFileMap","initialFolderId","setFileMap","setCurrentFolderId","resetFileMap","moveFiles","currentFileMap","newFileMap","moveFileIds","newSourceChildrenIds","newDestinationChildrenIds","methods","useFileActionHandler","fileToOpen","fileActionHandler"],"mappings":"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ACXC,UAAW,UAGR,MAGfL,eAAgB,SAACM,EAAkBnc,GAC/B,IAAKA,GAA6B,iBAAdA,EAAK8C,KAAmB,OAAO,KAEnD,IACMsZ,EAAWC,EADJrc,EAAK8C,KACc,CAAEwZ,MAAM,EAAOC,OAAQ,WACvD,MAAwB,MAApBH,EAASI,OACCC,KAAKC,MAAMN,EAASld,MAAQ,IAAM,UACjB,OAApBkd,EAASI,OACNC,KAAKC,MAAMN,EAASld,WAAUkd,EAASI,OAE3CJ,EAASld,UAASkd,EAASI,SAIhCf,GAA0BkB,gBAAcb,Ia5FxCc,GAAoBD,gBAA4ChD,IAEhEkD,GAA4B,CACrC,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,QACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,KACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,OACA,KACA,MACA,MACA,OAESC,GAA4B,CACrC,MACA,OACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,KACA,MACA,OACA,QACA,OACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,OAESC,GAA4B,CACrC,OACA,MACA,MACA,MACA,OACA,OACA,KACA,MACA,MACA,MACA,QACA,YACA,YACA,YACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,MACA,MAESC,GAAwB,CACjC,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAESC,GAAuB,CAChC,OACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAoEEC,GAjEc,WAgDhB,IA/CA,IAAIC,EAAc,EAGZC,EAAoB,CAEtB,CAAC1Z,uBAAe2Z,QAAS,CAAC,YAC1B,CAAC3Z,uBAAe2E,OAAQ,CAAC,MAAO,MAAO,MAAO,OAAQ,QACtD,CAAC3E,uBAAe4Z,MAAO,CAAC,MAAO,MAAO,MAAO,QAC7C,CAAC5Z,uBAAe6Z,SAAU,CAAC,MAAO,OAAQ,MAAO,SAAU,UAAW,MAAO,MAAO,MAAO,MAAO,SAClG,CAAC7Z,u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"}